<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Separate Concerns</title>
  <link
    href="https://blog.separateconcerns.com/feed.atom"
    rel="self" type="application/atom+xml"
  />
  <link
    href="https://blog.separateconcerns.com"
    rel="alternate" type="application/xhtml+xml"
  />
  <id>tag:blog.separateconcerns.com,2012-12-13:atomfeed</id>
  <updated>2023-08-12T14:33:05Z</updated>
  <author>
    <name>Pierre 'catwell' Chapuis</name>
    <uri>https://catwell.info/</uri>
  </author>
  <entry>
    <title>Thoughts 7 — Microblogging, Solarpunk, AI and success</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-08-12-thoughts-7.html"
    />
    <id>tag:blog.separateconcerns.com,2023-08-12:thoughts-7</id>
    <published>2023-08-12T16:30:00Z</published>
    <updated>2023-08-12T16:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <blockquote>
<p>&#8220;Thoughts&#8221; are posts about what has been on my mind. Sometimes practical, sometimes not; often just things I read recently. Less thought out than regular posts.</p>
</blockquote>
<section id="Microblogging">
<h2>Microblogging</h2>
<p>First a small announcement: <a href="https://bsky.app/profile/catwell.info">I have joined Bluesky</a>. I like it so far and I think it has a good founding team, so I want to believe in its long-term potential. On the other hand, I will likely stop using Mastodon soon; it is not working for me. I will stay on X for now, but I can see Bluesky replacing it entirely after a while.</p>
</section>
<section id="The-future-is-Solarpunk">
<h2><a href="https://feldspaten.org/2023/07/17/The-future-is-solarpunk/">The future is Solarpunk</a></h2>
<blockquote>
<p>Let’s acknowledge the difficulties of our times but without accepting defeat in the process of trying to solve those issues. [&#8230;] We are at the point where we can decide if we want to go full Cyperpunk or something more positive. Solarpunk is the movement, the idea behind envisioning and then creating a better future based on humans which live in harmony with nature.</p>
</blockquote>
<p>If there is one thing I am certain of regarding climate change, it is that no amount of moderation will be enough to solve it without terrible consequences on a planetary scale. But there most likely won&#8217;t be a magical technological breakthrough either. We need to seriously start looking at technologies and ways of life that are both sustainable and acceptable for the whole planet.</p>
<p>On a side note, I also think important technological breakthroughs are not easily predictable in detail. For instance, I think it is highly likely that AI will play a role in fighting climate change,
but I currently have no idea how.</p>
</section>
<section id="StochasticDeterministic">
<h2><a href="https://matt-rickard.com/stochastic-deterministic">Stochastic/Deterministic</a></h2>
<blockquote>
<p>Generative AI introduces much more stochasticity into programming. [&#8230;] Ironically, this makes the deterministic parts that much more important.</p>
</blockquote>
<p>One of the first things I did at Finegrain was making sure I knew about all the sources of randomness, and then adding deterministic end-to-end tests.</p>
</section>
<section id="MiniGPT-4">
<h2><a href="https://minigpt-4.github.io">MiniGPT-4</a></h2>
<p>The authors have taken the visual understanding part of <a href="https://arxiv.org/abs/2301.12597">BLIP-2</a> (a ViT and a Querying Transformer) and aligned it with <a href="https://lmsys.org/blog/2023-03-30-vicuna/">Vicuna</a>. They achieved that by connecting them through a single 5120x768 linear layer. This illustrates well the unintuitive effectiveness of simple linear projections in high-dimensional spaces.</p>
</section>
<section id="What-took-you-here-won't-take-you-there">
<h2>What took you here won&#8217;t take you there</h2>
<blockquote>
<p>It is hard to grasp for some engineers early in their careers what took them here won&#8217;t take them there. Shipping features will probably can take you to senior, shipping 10x more features is not how you&#8217;ll become a principal. What will get you to principal is removing chaos, unblocking others, fighting for things to be built in the right order, fighting scope creep, having backbone while knowing when to delegate decision making.</p>
<p>&#8211; <a href="https://twitter.com/rakyll/status/1666592449207336960">Jaana Dogan (@rakyll) on Twitter^WX</a></p>
</blockquote>
</section>
<section id="Why-it's-necessary-to-shoot-yourself-in-the-foot">
<h2><a href="https://jacobgw.com/blog/observation/2023/07/08/shoot-yourself-in-the-foot.html">Why it&#8217;s necessary to shoot yourself in the foot</a></h2>
<blockquote>
<p>To fully understand a &#8220;best practice&#8221; or why something is necessary, it’s important to experience how things go wrong without it. When teaching programming, we should let people make these mistakes, and <strong>then</strong> show them the tools to correct them.</p>
</blockquote>
</section>
<section id="The-Happiness-Advantage">
<h2>The Happiness Advantage</h2>
<p>There is <a href="https://www.shawnachor.com/books/happiness-advantage/">a whole book</a> dedicated to the fact that happiness fuels success and (mostly) not the other way around, and how to take advantage of it.</p>
<p>I haven&#8217;t read the book (yet) but I have come to that conclusion independently for a while now. I found the book through <a href="https://engineering.prezi.com/shifting-to-the-right-place-my-transition-back-from-em-to-engineer-d435acbabf2f">this post</a> which is one of several about people moving back from management to engineering.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Three Little Pigs</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-08-09-three-little-pigs.html"
    />
    <id>tag:blog.separateconcerns.com,2023-08-09:three-little-pigs</id>
    <published>2023-08-09T14:10:00Z</published>
    <updated>2023-08-09T14:10:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>The Three Little Pigs is a popular bedtime story, but it strikes me as unrealistic and not teaching the right lesson. So I decided to revisit it.</p>
<p><img alt="Illustration: the Big Bad Wolf, Three Little Pigs and three houses" src="img/three-little-pigs.jpg"/></p>
<p>Image by <a href="https://www.freepik.com/free-vector/three-little-pigs-illustration_33805483.htm">Freepik</a></p>
<hr/>
<blockquote>
<p>The Three Little Pigs — A Cautionary Tale about Over-Engineering</p>
<p>Once upon a time, there were three Little Pigs who lived in the forest. One day, they learned that a Big Bad Wolf would soon come to the forest. They decided to build houses to ensure their safety. The first Little Pig decided to build a straw house, the second one a wooden house. As for the third one he elected to build his home out of stone.</p>
<p>A few days later, the Big Bad Wolf arrived in the forest. He saw the straw house of the first Little Pig. He knocked on the door, asking to come in. The Little Pig refused, so the Big Bad Wolf huffed and puffed and blew the house down. Scared, the Little Pig ran off. Thankfully, the Big Bad Wolf was too exhausted from blowing so hard to catch him. The Little Pig sought refuge in the wooden house of the second Little Pig.</p>
<p>Once rested, the Big Bad Wolf followed the tracks of the Little Pig, and soon he arrived at the door of the wooden house. He knocked on the door, asking to come in, but the little pigs refused. So the Big Bad Wolf huffed and puffed and&#8230; nothing happened, because how the hell would a wolf blow down a wooden house?</p>
<p>Disappointed, the Big Bad Wolf gave up and walked down the road, giving up on a pork meal for the day. But as he was leaving, he saw the stone house of the third Little Pig. And he did not knock on the door. Because there was no door, no roof and no windows. The third Little Pig simply did not have the time to finish his house, and he was still there with his trowel, spreading mortar.</p>
<p>For the sake of the faint-hearted, this is where the story concludes. Let me just say it does not end well for the third Little Pig.</p>
</blockquote>
<p>Here it is, a much better twist on the classic.</p>
<p>Ah, and of course the moral:</p>
<blockquote>
<p>Trade-offs are everything, pick the right ones!</p>
</blockquote>

      </div>
    </content>
  </entry>
  <entry>
    <title>Disagreeing with "best practices"</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-08-06-disagreeing-best-practices.html"
    />
    <id>tag:blog.separateconcerns.com,2023-08-06:disagreeing-best-practices</id>
    <published>2023-08-06T16:35:00Z</published>
    <updated>2023-08-06T16:35:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>When I interview software developers, I usually ask some variation of the following questions:</p>
<blockquote>
<p>What Software Engineering practices do you consider critical to achieve your objectives? Are there &#8220;best practices&#8221; that do not matter, or which can be actively harmful?</p>
</blockquote>
<p>My goal in asking this is mainly to understand if the candidate is opinionated, and if so where those opinions come from. For the most part there is no right or wrong answer, but there are good and bad <strong>ways</strong> to answer.</p>
<p>I have already posted some of my answers to the first question <a href="https://blog.separateconcerns.com/2019-02-15-architecture-principles.html">here</a>. Some can be reversed to become answers to the second one too:</p>
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don&#8217;t Repeat Yourself</a> is easily one of the most abused principles. It leads to unnecessary over-abstraction and coupling. See &#8220;AHA&#8221; in the Alternatives section of the Wikipedia page.</p>
</li>
<li>
<p>&#8220;Don&#8217;t ship the Org Chart.&#8221; Conway&#8217;s Law is not something you can easily fight, so odds are you <strong>will</strong> ship the org chart. Instead, acknowledge Conway&#8217;s Law and architecture <strong>both</strong> your software and organization with that in mind.</p>
</li>
</ul>
<p>In addition, here are some of my other answers to that second question:</p>
<ul>
<li>
<p>Putting a limit on function sizes, and systematic <a href="https://refactoring.guru/extract-method">method / function extraction</a>. This appears to make code superficially more readable, but in reality it makes it less linear and harder to debug. Other posts sharing that opinion: <a href="https://250bpm.com/blog:36/">Martin Sústrik</a>, <a href="https://loup-vaillant.fr/articles/physics-of-readability">Loup Vaillant</a>.</p>
</li>
<li>
<p>Systematic <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test-driven development</a>. TDD is very useful when the problem is well-defined and the implementation error-prone, for instance when implementing precise specs or an RFC. It is harmful when you do exploratory programming. In some code bases, I go as far as having no unit tests — only end-to-end and regression ones, in addition to plenty of inline assertions in the code.</p>
</li>
<li>
<p>Trying to achieve strict typing of dynamic languages. Don&#8217;t get me wrong, type-checking is helpful as a tool to catch bugs and guide development. But trying to adhere to some theoretical principles too strictly can make you lose all the benefits of the dynamic language underneath. If you want to make that trade-off, great, but then use a statically typed language instead! There are good reasons why <a href="https://www.typescriptlang.org/docs/handbook/type-compatibility.html#a-note-on-soundness">TypeScript is unsound</a>.</p>
</li>
<li>
<p>Writing extensive documentation. Some people tend to think documentation is a silver bullet, and it is often because they have a bad mental model of how users behave. There are two main ways users — including other developers — will possibly consume your documentation: they will read the Getting Started / tutorials, and then they will look for solutions when they encounter problems. Optimize your docs for that.</p>
</li>
<li>
<p>&#8220;Elegance&#8221; is overrated when writing software for production. It should usually be traded off for robustness first — i.e. lower MTBF and MTTR, which implies understandability — and performance second. &#8220;Elegant&#8221; is great if it means &#8220;straightforward&#8221;, harmful <a href="https://blog.separateconcerns.com/2014-05-27-magic.html">if it means magic</a>.</p>
</li>
</ul>
<p>To end this post with something related, <a href="https://www.onebigfluke.com">Brett Slatkin</a> is hosting <a href="https://www.youtube.com/@WorstPractices">a podcast called Worst Practices</a> where developers talk about something terrible they do. I am sure you will recognize yourself in some of those. For instance I have only used a simple editor for a long time like <a href="https://mitchellh.com">Mitchell Hashimoto</a> does, I debug with print statements like <a href="https://www.leahculver.com">Leah Culver</a> and I even sometimes put them in system libraries like <a href="https://sedimental.org">Mahmoud Hashemi</a>!</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Goodbye luafr.org</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-07-25-bye-luafr.html"
    />
    <id>tag:blog.separateconcerns.com,2023-07-25:bye-luafr</id>
    <published>2023-07-25T21:30:00Z</published>
    <updated>2023-07-25T21:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Ten years ago, I started a French-speaking mailing list about Lua. It was somehow active for around two years, but there was never really enough of an active community for it to keep going. To accompany that mailing list, I bought the domain <a href="https://luafr.org">luafr.org</a> and set up a small static webpage with a few links about Lua in French.</p>
<p>Recently, my registrar Gandi was acquired by Total Web Solutions. Prices went up, service went down, so I will be migrating my domains elsewhere when they renew. I am also using the opportunity to let go of a few unnecessary domains, and luafr.org will be one of them. It will expire on October 9, 2023.</p>
<p>Nobody should miss the static webpage, but there is one important thing hosted on that domain, and that is the only <a href="https://luarocks.org">LuaRocks</a> mirror enabled by default besides the official website and GitHub.</p>
<p>I have opened <a href="https://github.com/luarocks/luarocks/pull/1517">a pull request</a> to change the URL to <a href="https://loadk.com/luarocks/">loadk.com</a>, which points to the same IP, but if you have somehow hardcoded it in your configuration file please change <code>luafr.org</code> to <code>loadk.com</code> to avoid disruption.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Locking down the GCP VPC firewall</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-04-15-gcp-firewall.html"
    />
    <id>tag:blog.separateconcerns.com,2023-04-15:gcp-firewall</id>
    <published>2023-04-15T15:45:00Z</published>
    <updated>2023-04-15T15:45:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I have done that three times now, so it is time to make a quick blog post about it.</p>
<p>When you create a new Google Cloud Platform account, its VPC firewall comes configured like this:</p>
<p><img alt="default rules" src="img/gcp-vpc-firewall-default.jpg"/></p>
<p>The first two rules, <code>default-allow-http</code> and <code>default-allow-https</code>, only apply to machines with the <code>http-server</code> and <code>https-server</code> network tags and they are fine. The third one, <code>default-allow-icmp</code>, allows ICMP which is the protocol used by <code>ping</code>; some people do not want that but I typically keep it on. The three last rules, though, are too lax for my taste.</p>
<p>We start with <code>default-allow-rdp</code>. The Remote Desktop Protocol is typically used to access remote Windows servers, even though it is now <a href="https://gitlab.gnome.org/GNOME/gnome-remote-desktop">also supported by Gnome</a>. You are probably not a Windows shop and you certainly do not want that open on all your instances, so disable it.</p>
<p>Now, <code>default-allow-ssh</code>. It is the same thing for the Secure Shell Protocol. I typically do not want to allow SSH access to instances from the outside; instead, I enforce the use of <a href="https://cloud.google.com/iap">Identity-Aware Proxy</a> through <code>gcloud</code> like this:</p>
<pre><code class="language-shell">gcloud compute ssh --tunnel-through-iap my-instance-name
</code></pre>
<p>So you can disable that rule, but you also need to create one which is exactly the same with the source set to the IAP IP range i.e. <code>35.235.240.0/20</code>. I call it <code>iap-allow-ssh</code>.</p>
<p>You may also still want to allow SSH access from anywhere on <strong>some</strong> machines such as SFTP servers, so I create a rule with source <code>0.0.0.0/0</code> that only applies to machines with the <code>sshable</code> network tag.</p>
<p>I also enable logs on both SSH rules so I can easily know exactly who connects to instances and when.</p>
<p>Finally, the <code>default-allow-internal</code> rule allows all traffic between machines in your VPC. For some of you it may be fine, but I prefer configuring all flows explicitly using tags, so I disable it as well.</p>
<p>This is how it all should look eventually:</p>
<p><img alt="secure rules" src="img/gcp-vpc-firewall-secure.jpg"/></p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Thoughts 6 — Unpredictability, AI and Education</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-04-10-thoughts-6.html"
    />
    <id>tag:blog.separateconcerns.com,2023-04-10:thoughts-6</id>
    <published>2023-04-10T17:20:00Z</published>
    <updated>2023-04-10T17:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <blockquote>
<p>&#8220;Thoughts&#8221; are posts about what has been on my mind. Sometimes practical, sometimes not; often just things I read recently. Less thought out than regular posts.</p>
</blockquote>
<section id="Navigating-the-unpredictability-of-everything">
<h2>Navigating the unpredictability of everything</h2>
<p>Jason Cohen posted <a href="https://longform.asmartbear.com/predict-the-future/">this long article</a> on his blog A Smart Bear. It is about how despite - and really because of - us being bad at predicting anything, the best way to move forward is still to have a strategy.</p>
<blockquote>
<p>Making a decision and moving forward is often more effective than extended deliberation about the decision. Deliberation assumes we know how to reason about the future, but even experts aren’t good at that. Making decisions and gaining experience is how to find the right answers, if the organization is introspective enough to also face the truth when it turns out the original strategy is incorrect.</p>
</blockquote>
<p>Still, some strategies are better than others. One is having several ways to succeed to reduce unpredictability. Perhaps less obviously, doing something seemingly impossible with a very high upside is also a good strategy.</p>
<p>Go read the whole post when you have 30 minutes, it has other motivated advice seen elsewhere such as <a href="https://blog.separateconcerns.com/2023-03-02-thoughts-5.html#Invest-in-things-that-don't-change">betting on things that don&#8217;t change</a>, <a href="https://blog.separateconcerns.com/2016-01-03-five-books-2015.html#The-Four-Steps-to-the-Epiphany---Steve-Blank">looking at what customers do</a>, and keeping things simple. It also features an interesting history of Flickr and Slack.</p>
</section>
<section id="Growth-of-AI-Through-a-Cloud-Lens">
<h2>Growth of AI Through a Cloud Lens</h2>
<p>Mitchell Hashimoto <a href="https://mitchellh.com/writing/ai-through-a-cloud-lens">compares</a> the growth of AI today to what happened with Cloud Computing and finds many similarities. He also points how that was not the case for Web3 (cryptocurrencies).</p>
</section>
<section id="Duct-Tape-Removal-Engineer">
<h2>Duct Tape Removal Engineer</h2>
<p>I love creative job titles and Jaana Dogan found <a href="https://twitter.com/rakyll/status/1592583835950383105">a great one</a>. When you have the experience, you immediately understand what it means.</p>
<p>At Lima my &#8220;unofficial&#8221; job title was VP of Data Corruption, and <a href="https://twitter.com/denisleroy">Denis</a> was Chief Packet Loss Officer. I never went as far as putting it on my LinkedIn though ;)</p>
</section>
<section id="The-Diamond-Age">
<h2>The Diamond Age</h2>
<p>Scott Chacon <a href="https://twitter.com/chacon/status/1645341107981631491">tweeted</a> about how he thinks that personalized AI-based tools will change education and his concern that some countries will not adapt fast enough. I share both parts of this opinion.</p>
<p>I have had my own issues with how education works in France and I have been thinking about this for a long time. Neal Stephenson&#8217;s book The Diamond Age is a must-read about that topic, and also yet another warning to make sure AI does not end up ossifying the privileges of an elite class.</p>
<p>I <strong>want</strong> the Primer, but IMO the current breed of foundational models is poorly adapted to the task. We need online training and scalable user personalization. I am hopeful that will get there though, because there are <a href="https://arxiv.org/abs/2209.07663">other lucrative use cases</a> with similar requirements.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Porting this blog to djot</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-04-09-djot.html"
    />
    <id>tag:blog.separateconcerns.com,2023-04-09:djot</id>
    <published>2023-04-09T11:20:00Z</published>
    <updated>2023-04-09T11:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p><a href="https://blog.separateconcerns.com/2013-01-02-hello-world.html">Over 10 years ago</a>, I created this blog and wrote the static generator that powers it. I used Markdown for the articles and <a href="https://github.com/jgm/lunamark">lunamark</a>, a library written by John MacFarlane of <a href="https://commonmark.org">CommonMark</a> and <a href="https://pandoc.org">Pandoc</a> fame.</p>
<p>Recently, John created <a href="https://djot.net">djot</a>, a markup syntax intended to be an evolution of Markdown. The <a href="https://github.com/jgm/djot.lua">initial reference implementation</a> was written in Lua and I decided to port my static generator to it.</p>
<p>Converting the Markdown parts of the post themselves was not very hard, the main think I can think of was switching my old posts from intented code blocks - which are not supported by djot - to fenced code blocks. However, my posts were not pure vanilla Markdown. I used two specific features from lunamark and a few extensions of my own.</p>
<p>The first lunamark feature I had to find a replacement for was Lua metadata. djot <a href="https://github.com/jgm/djot/issues/35">does not support metadata</a> yet but it does support <a href="https://htmlpreview.github.io/?https://github.com/jgm/djot/blob/master/doc/syntax.html#raw-block">raw blocks with a format</a> which I could easily abuse.</p>
<p>The second feature is Pandoc-style title blocks, which I could just <a href="https://github.com/catwell/cw-web/commit/6518e8284880d6e64ec769ed47517c9dcbba6373">move to the metadata section</a> so I did that.</p>
<p>I also had a custom block format syntax that I used for three things: raw blocks, syntax highlighting language choice and post descriptions. The first two are natively supported by djot, and I moved the description to the metadata as well.</p>
<p>For those transformations I used Perl one-liners such as this one which converts the metadata format:</p>
<pre><code class="language-shell">for i in separateconcerns/blog/articles/*.md; do
    perl -0pe 's/&lt;!\-\-@(.*)\-\-&gt;/"```=lua-meta". join("\n", split(\/\n  \/, $1)) ."```"/es' \
        $i &gt; "$(dirname $i)/$(basename $i .md).dj"
done
</code></pre>
<p>Once that was done, it was time to port the generator itself. I started with the HTML part. As I said some of the things I was doing manually in lunamark are supported natively in djot, there were two things left to do: support my metadata blocks and detect posts with code in them so I can include the JavaScript syntax highlighting library only when needed.</p>
<p>Djot has a step when you can get the AST and I could have used it to extract this information, but I decided to use the same method I used with lunamark instead, which is <a href="https://github.com/catwell/cw-web/blob/93fa373949b16ec30950877bd817a72e8a6f7bf8/separateconcerns/blog/generate.lua#L45-L66">overriding parts of the renderer</a>. To do that I created <a href="https://github.com/catwell/cw-web/blob/master/separateconcerns/blog/cwdjot/init.lua">a small helper library</a> which mostly exposes the StringHandle used internally in djot.lua. I would need it for the next part anyway.</p>
<p>All in all, it was pretty smooth. I just hit a small <a href="https://github.com/jgm/djot/issues/101#issuecomment-1500966800">issue with URL parsing</a> which I worked around for now by using URL encoding in my .dj source files.</p>
<p>Since I did not change my output format much and kept exactly the same metadata, my index and Atom feed generation worked out of the box. But there was still one last thing to do: because this blog is also <a href="https://blog.separateconcerns.com/2022-02-05-gemini.html">available on Gemini</a>, I had to implement a <a href="https://gemini.circumlunar.space/docs/gemtext.gmi">Gemtext</a> renderer.</p>
<p>In lunamark, there was a generic writer which I overloaded for that purpose. As djot.lua only supports HTML output natively for now, this time I just <a href="https://github.com/catwell/cw-web/blob/master/separateconcerns/blog/cwdjot/gemini.lua">wrote a renderer</a> from scratch. I could also have gone the Pandoc route as djot includes a custom writer and reader, but I wanted to avoid it and Pandoc does not natively support Gemtext anyway.</p>
<p>All in all, this took a few hours to do, and the blog post you are reading now has been published with this new stack. I like djot, it is an improvement over CommonMark even though it is still has a few rough edges. I like parts of the djot.lua library a bit less, especially <a href="https://github.com/jgm/djot.lua/blob/5970f1cff2fe6b5905ec1cdeab795d5b5b3b8b97/djot/inline.lua">the parser</a>. lunamark <a href="https://github.com/jgm/lunamark/blob/master/lunamark/reader/markdown.lua">uses LPeg</a> instead and I find it simpler, but it&#8217;s still fine.</p>
<p>This experience also conforts me in the choice I made 10 years ago to write my own static generator using a language I know well with few dependencies. It is very low maintenance most of the time compared to the likes of Hugo, Pelican or Jekyll, and it lets me do changes like this easily when I want to.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Joining Finegrain</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-03-31-joining-finegrain.html"
    />
    <id>tag:blog.separateconcerns.com,2023-03-31:joining-finegrain</id>
    <published>2023-03-31T22:15:00Z</published>
    <updated>2023-03-31T22:15:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>It&#8217;s been a week since I <a href="https://blog.separateconcerns.com/2023-03-11-leaving-inch.html">left Inch</a>, and now it is time to disclose what I am up to.</p>
<p>Last Monday <a href="https://twitter.com/pchapuis/status/1640254206148767745">I joined</a> a very early-stage startup called <a href="https://finegrain.ai">Finegrain</a>. We&#8217;re working on improving online images using AI with no humans in the loop. The founders of the company are the <a href="https://blog.separateconcerns.com/2013-06-20-three-years-proprietary-projects.html">Moodstocks</a> founders Denis and Cédric, so we get to work together again after 10 years.</p>
<p>I won&#8217;t hide it, I am not an AI specialist. Even though I keep informed on advances in the field, I have read <a href="https://www.manning.com/books/deep-learning-with-python-second-edition">books</a> and written some deep learning code, I am far from the level required at a company like that.</p>
<p>I do intend to learn more, but it turns out we <strong>may</strong> also need the things I do have experience with, such as building scalable and resilient systems with few resources, designing simple APIs to do complex things, integrating with customers and more generally being a technical jack-of-all-trades at a small company :)</p>
<p>If <strong>you</strong> know about AI though, <a href="https://finegrain.ai/jobs/openings/">we are hiring</a>!</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Leaving Inch</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-03-11-leaving-inch.html"
    />
    <id>tag:blog.separateconcerns.com,2023-03-11:leaving-inch</id>
    <published>2023-03-11T11:55:00Z</published>
    <updated>2023-03-11T11:55:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>In two weeks, I will no longer be an <a href="https://inch.fr">Inch</a> employee. I <a href="https://blog.separateconcerns.com/2020-12-16-personal-news.html#joining-inch">joined the company</a> a bit over three years ago, but it feels like much longer. Back then I had no child, and the first thing the word &#8220;Pandemic&#8221; brought to mind was a good board game.</p>
<p>Three years later, Inch is not so different from the company I joined, and yet much better in many ways. As for me, I did what I came for initially, and then more. Now I have an opportunity I could not pass. It is too early to talk about it except <a href="https://framapiaf.org/@catwell/109904487542868111">in cryptic form</a>, but when I do you will understand.</p>
<p>So I close this chapter of my professional life, leaving Inch and its team. Which is the hardest part, because they&#8217;re a fun and endearing bunch, and we&#8217;ve been through those not-so-great years together, and we&#8217;ve made so many memories. And now <a href="https://blog.separateconcerns.com/2023-03-02-thoughts-5.html#using-the-word-we">we&#8217;re friends</a>. But well, I am not leaving Paris, so it&#8217;s not like we won&#8217;t see each other again. :)</p>
<p>And by the way, Inch is hiring a software engineer! It is a French-speaking, semi-remote position. Get in touch if you are interested.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Thoughts 5 — Being a good engineer; using the word We</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-03-02-thoughts-5.html"
    />
    <id>tag:blog.separateconcerns.com,2023-03-02:thoughts-5</id>
    <published>2023-03-02T11:45:00Z</published>
    <updated>2023-03-02T11:45:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <blockquote>
<p>&#8220;Thoughts&#8221; are posts about what has been on my mind. Sometimes practical, sometimes not; often just things I read recently. Less thought out than regular posts.</p>
</blockquote>
<section id="What-is-a-good-engineer">
<h2>What is a good engineer?</h2>
<p>When I was a student at <a href="https://www.imt-atlantique.fr/en">IMT Atlantique</a> (back when it was still called Telecom Bretagne) I took an optional class about the history of telecommunication systems. It was mostly taught by retired engineers from the field.</p>
<p>It was a fascinating class. A recurring theme was what an engineer&#8217;s job was about. One of the teachers, who had been instrumental in the development of <a href="https://en.wikipedia.org/wiki/Electronic_switching_system">electronic switching</a> in Europe, said something among those lines: &#8220;a good engineer delivers systems that are scalable, cheaper, and ship faster&#8221;.</p>
<p>I have been thinking about that topic lately, and even though I will not deny the &#8220;it&#8217;s all about trade-offs&#8221; line I have been using for years, it is good to remember that those trade-offs should be made only on the optimum curve.</p>
<p>Add to that the idea that engineers should know what systems <strong>not</strong> to build, and you have my definition of what makes a good engineer.</p>
</section>
<section id="Using-the-word-We">
<h2>Using the word We</h2>
<p><a href="https://www.la-grange.net/karl/">Karl</a> wrote <a href="https://www.la-grange.net/2023/01/23/reveur">something interesting</a> about using the word We to talk about a company or a team. He wrote it in French so here is a rough translation:</p>
<blockquote>
<p>I often see a company&#8217;s employees use the word We (&#8220;nous&#8221; in French). For a very long time I have been trying to avoid using this turn of phrase in my mail, bugs, etc. For instance, at Mozilla, I used to say &#8220;the Webcompat team&#8221; or &#8220;Mozilla&#8221;, or to change the sentence to focus on the product itself.</p>
</blockquote>
<blockquote>
<p>Instead of &#8220;We should add feature H to solve this bug&#8221;, I would say &#8220;Product A needs feature H to solve this bug&#8221;.</p>
</blockquote>
<blockquote>
<p>When I notice myself unconsciously using &#8220;we&#8221;, I correct it immediately. But why? To preserve the emotional distance between work and pseudo-belonging to a company.</p>
</blockquote>
<blockquote>
<p>&#8220;We&#8221; has a very inclusive meaning of identity for me, and so I avoid it in contractual relationships. The company no longer has a &#8220;we&#8221; when the time to reduce its workforce for financial gain comes. It is one of my struggle techniques, a small resistance.</p>
</blockquote>
<p>I understand what he is saying and it makes a lot of sense, yet I make a different choice. In fact, I cannot fathom working for a company or at least a team where I would not feel comfortable saying &#8220;we&#8221;.</p>
<p>It&#8217;s the same uneasy feeling I have when I see people say that small startups branding themselves as family is a red flag. I understand why they would say that. And sure, we are not family, but when you work that closely with people for years, I think there should be some sense of belonging. Maybe &#8220;friends&#8221; is a better word.</p>
<p>Also, I am never going to work for a company if I am not aligned with its mission. If I start trying to distance myself from it and notice it, things will have to change one way or another.</p>
</section>
<section id="Opportunity-Cost">
<h2>Opportunity Cost</h2>
<p><a href="https://twitter.com/rakyll/status/1631032634779525122">This tweet by Jaana Dogan</a> made me remember <a href="https://erikbern.com/2020/03/10/never-attribute-to-stupidity-that-which-is-adequately-explained-by-opportunity-cost.html">this blog post by Erik Bernhardsson</a>, which I often find to be true, especially when dealing with startups.</p>
<blockquote>
<p>Never attribute to stupidity that which is adequately explained by opportunity cost.</p>
</blockquote>
</section>
<section id="Theory-of-Mind">
<h2>Theory of Mind</h2>
<p><a href="https://boz.com/articles/theory-mind">A great post by Andrew Bosworth</a> (CTO of Meta) about how some people such as John Carmack can have an influence even after they&#8217;re gone.</p>
</section>
<section id="Chrome-10-years-later">
<h2>Chrome, 10 years later</h2>
<p><a href="https://neugierig.org/software/blog/2022/12/chrome.html">A long post by Evan Martin</a> about his experience working on Chrome from 2007 to 2012. Toward the end, he turns to the state of Chrome and the Web today.</p>
<p>I love this kind of retrospective post, which are full of anecdotes, deeper insight, and food for thought.</p>
<p>By the way, Evan posts interesting things on a variety of topics. I have been subscribing to his feed for a very long time, I think for Arch-related content initially. You may want to look at his other posts as well.</p>
</section>
<section id="Invest-in-things-that-don't-change">
<h2>Invest in things that don&#8217;t change</h2>
<p>Here is <a href="https://world.hey.com/dhh/invest-in-things-that-don-t-change-6f7f19e1">DHH saying something</a> I&#8217;ve been saying for a very long time as well, but it bears repeating. There is way too much stuff happening to follow it all. If you want to last in this job, especially as a generalist, you must figure out the fundamental things that will matter even more in 10 years than today, and ignore most of the rest unless it&#8217;s a deliberate strategy.</p>
</section>
<section id="CRDTs-Automerge-and-Braid">
<h2>CRDTs, Automerge and Braid</h2>
<p>Even though it&#8217;s not my main focus anymore, I am still following CRDT-based state synchronization systems attentively. Two projects have caught my attention recently. The first one is <a href="https://braid.org">Braid</a> which has been progressing steadily, and the second is Automerge which has announced <a href="https://automerge.org/blog/automerge-2/">a major 2.0 release</a>.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>The Staff Software Engineer role at small companies</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2023-02-03-staff-engineer-inch.html"
    />
    <id>tag:blog.separateconcerns.com,2023-02-03:staff-engineer-inch</id>
    <published>2023-02-03T12:20:00Z</published>
    <updated>2023-02-03T12:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>When I was <a href="https://blog.separateconcerns.com/2021-05-01-inch.html">hired at Inch</a> my &#8220;official&#8221; position quickly became an issue. For various reasons neither the title they wanted to give me initially (Engineering Manager) nor the one I would be given externally (CTO) nor the obvious Senior Software Engineer worked. So I proposed to help them define the next position on the technical ladder.</p>
<p>What follows is a translation of a document I wrote in French, slightly edited to remove Inch-specific details. It is still written from a European - and more specifically French - point of view. That document was later used to promote a 2nd engineer to Staff. I publish it here so it can help people needing to do something similar elsewhere.</p>
<section id="General-information-on-technical-ladders">
<h2>General information on technical ladders</h2>
<p>Typical early career levels for software engineers (or developers) are relatively well-known:</p>
<ul>
<li>
Junior Software Engineer
</li>
<li>
(Mid-level) Software Engineer
</li>
<li>
Senior Software Engineer
</li>
</ul>
<p>Progression is based on experience and it is expected that a good engineer will reach mid-level after 2 to 5 years of experience and senior between 5 to 10.</p>
<p>Senior developers have two ways to evolve: branch into management or stay on the technical track. This document describes the second option.</p>
<p>Let&#8217;s start with a few key things to understand regarding management. A development &#8220;team&#8221; (project or run) is typically 3 to 10 people. It has a &#8220;lead&#8221;, which is not a level or a management position. It is a technico-organizational role assumed by a Senior+ developer at a point in time.</p>
<p>The names of levels after Senior differ depending on companies but can be for instance:</p>
<ul>
<li>
Staff Software Engineer
</li>
<li>
Senior Staff Software Engineer
</li>
<li>
Principal Software Engineer
</li>
<li>
Distinguished Software Engineer
</li>
<li>
Fellow
</li>
</ul>
<p>At some large tech companies the &#8220;Distinguished&#8221; level is equivalent to VP and Fellow to SVP or CXO. At Inch, Staff corresponds to level F. The difference between Staff+ levels is often defined by impact:</p>
<ul>
<li>
Staff / Senior Staff -&gt; impact at team level
</li>
<li>
Principal -&gt; impact at company level (strategy)
</li>
<li>
Distinguished -&gt; external impact (aura)
</li>
</ul>
<p>Those levels constitute a pyramid where each stage must be much smaller than the one below (e.g. by a factor of 5 at least) otherwise they stop making sense.</p>
<p>Given the size of Inch, only the Staff level makes sense. A Principal level may not be created until the company is large enough to have several independent technical teams (at least 12 developers, ideally around 30). Consequently, some things relating to strategy and aura are expected from the Staff level at Inch.</p>
</section>
<section id="Becoming-a-Staff-Engineer">
<h2>Becoming a Staff Engineer</h2>
<section id="Not-mandatory">
<h3>Not mandatory</h3>
<p>A key point is that Senior is a &#8220;terminal level&#8221;, which means it is not expected that all Senior engineers will become Staff at some point. An engineer may very well remain at the Senior level for their whole career.</p>
</section>
<section id="The-end-of-experience">
<h3>The end of &#8220;experience&#8221;</h3>
<p>Progression from Junior to Mid to Senior is very related to experience and hard skills (soft as well, especially for Senior). But the value of marginal experience goes down with the years and is harder and harder to measure.</p>
<p>The Staff level is still partially related to experience - at least 8 years are expected in general - but more importantly to impact within the company. This means hiring at this level is rare, and it is not unusual for a Staff Engineer to go back to Senior for a few years after a job change.</p>
<p>Important note: Staff is not a management level but it <strong>does</strong> require more soft skills than previous levels (more on that later).</p>
</section>
<section id="A-polymorphic-job">
<h3>A polymorphic job</h3>
<p>Staff is a technical specialization level, hence not all Staff engineers look the same. To understand the differences, here are a few axes.</p>
<p>A developer can specialize in one or several fields or technologies and become a true technical expert. For instance, they can be a master of their language and framework and contribute to their core or ecosystem. They can also become experts in a business domain. Those are depth-first approaches.</p>
<p>Others, on the other hand, expand their knowledge horizontally and know about numerous domains, technologies and parts of the stack. This is the generalist, breadth-first approach.</p>
<p>In general it is rather a mix of both approaches: developers with a very wide background and a few specialty topics they master. We talk about <a href="https://en.wikipedia.org/wiki/T-shaped_skills">T-Shaped</a> people.</p>
<p>Will Larson defines <a href="https://staffeng.com/guides/staff-archetypes">4 Staff+ archetypes</a>: tech leads, architects, solvers and right hands.</p>
</section>
</section>
<section id="Expectations">
<h2>Expectations</h2>
<section id="Competences">
<h3>Competences</h3>
<p>A Staff Engineer should be able to:</p>
<ul>
<li>
<p>Grapple with a complex, poorly documented system quickly. For instance, identify the root cause of a bug in a code base they do not know well.</p>
</li>
<li>
<p>Understand what limits a system, anticipate problems and propose realistic and pragmatic architectural changes while taking existing assets and resources into account.</p>
</li>
<li>
<p>Know and understand high-level software and system architecture principles (Conway&#8217;s Law, Gall&#8217;s Law, permission models, different kinds of data flows&#8230;)</p>
</li>
<li>
<p>Communicate with their team as a Lead, organize a project, implement new processes.</p>
</li>
<li>
<p>Communicate with their management: report their results and those of their team, give visibility on load and work in progress.</p>
</li>
<li>
<p>Communicate outside the company, for instance: with customers, with prospects, with candidates, with investors, with Open Source communities&#8230;</p>
</li>
<li>
<p>Deal with a crisis, for instance organize production incident response.</p>
</li>
<li>
<p>Analyze a development opportunity while taking all company-level parameters into account (cash flow, strategy and positioning, long-term vision). Think ahead 2 / 6 / 18 months.</p>
</li>
<li>
<p>Understand the concepts of backlog, velocity / capacity / pressure. Know how to prioritize, understand when to say yes and when to say no. Know how and when they should defend their opinion depending on the topic (when to &#8220;be right&#8221;).</p>
</li>
<li>
<p>Think ahead developments and choices, considering impact on maintainability, stability, evolutivity, complexity and overall performance.</p>
</li>
<li>
<p>Anticipate hiring needs and departure risks. Understand hiring may take 6 months, plus 6 extra months to become really efficient. Understand that at Inch scale not everyone is replaceable, but still reduce risk for the company in the event of a departure, including their own.</p>
</li>
<li>
<p>Do technical watch, implement new tools and processes when it is necessary - and not when it is not. Retiring tools and processes whose benefits are dubious. Tech watch channels available include HN / Lobste.rs / Tilde, blogs, podcasts, meetups, the GitHub feed, social networks&#8230;</p>
</li>
<li>
<p>Be visible. Communicate internally on their progress and that of their team, in spoken and written form.</p>
</li>
<li>
<p>Develop their own network. At this stage of their career, an engineer must know people to get in touch with regarding specific topics, recruiting, etc. This kind of network is developed through previous experiences, participation in meetups and conferences, Open Source contribution and so on.</p>
</li>
</ul>
</section>
<section id="Achievements">
<h3>Achievements</h3>
<p>A Staff Engineer should tick several (not all) of those boxes:</p>
<ul>
<li>
<p>Be the designated expert of one or several significant parts of the technical stack or technical topics (e.g frontend, backend, infra / deployment, security&#8230;)</p>
</li>
<li>
<p>Be the designated expert of one or several significant parts of the product&#8217;s code base.</p>
</li>
<li>
<p>Have realized or led a development or technical evolution which is undoubtedly an important achievement at company level, recognized outside the bonds of the technical team. This kind of very visible project can be handed to a Senior engineer ready to evolve to Staff as a Staff Project.</p>
</li>
<li>
<p>Mentor one or several junior developers. This is in &#8220;achievements&#8221; and not &#8220;competences&#8221;: any Staff - and even Senior - developer should be able to help a junior get better or understand something, but some can be true career accelerators for the juniors they work with.</p>
</li>
</ul>
</section>
</section>
<section id="References">
<h2>References</h2>
<section id="Bedrock">
<h3>Bedrock</h3>
<ul>
<li>
StaffEng (Will Larson) - <a href="https://staffeng.com/">the website</a> and <a href="https://staffeng.com/book">the book</a>
</li>
<li>
<a href="https://www.levels.fyi/?compare=Google,Facebook,Microsoft&amp;track=Software%20Engineer">Levels.fyi</a>
</li>
<li>
<a href="https://career-ladders.dev">Career Ladders</a>
</li>
<li>
<a href="http://www.engineeringladders.com">Engineering Ladders framework</a>
</li>
</ul>
</section>
<section id="Ladder-examples">
<h3>Ladder examples</h3>
<ul>
<li>
<a href="https://basecamp.com/handbook/appendix-05-titles-for-programmers">Basecamp&#8217;s Handbook</a>
</li>
<li>
<a href="https://twitter.com/Gankra_/status/1046438955439271936">Ladder at Mozilla</a>
</li>
<li>
<a href="https://dresscode.renttherunway.com/blog/ladder">Ladder at Rent The Runway</a>
</li>
<li>
<a href="https://gist.github.com/jamtur01/aef437a79fee5a9cefdc">Ladder at Kickstarter</a>
</li>
<li>
<a href="https://labs.criteo.com/2019/02/criteo-engineering-career-tracks-and-leveling/">Ladder at Criteo</a>
</li>
<li>
<a href="https://about.gitlab.com/handbook/engineering/career-development/">How GitLab works</a>
</li>
<li>
<a href="https://engineering.atspotify.com/2016/02/15/spotify-technology-career-steps/">How Spotify works</a>
</li>
<li>
<a href="https://developer.squareup.com/blog/squares-growth-framework-for-engineers-and-engineering-managers/">Square&#8217;s Growth Framework</a>
</li>
<li>
<a href="https://dropbox.github.io/dbx-career-framework/">Dropbox Engineering Career Framework</a>
</li>
<li>
<a href="https://goomics.net/59/">Google =)</a>
</li>
</ul>
</section>
<section id="More-reading">
<h3>More reading</h3>
<ul>
<li>
<a href="https://eventuallycoding.com/2021/06/24/senior-avec-6-ans-dexperience-et-apres/">Hugo Lassiège at Malt</a> (French)
</li>
<li>
<a href="https://www.touilleur-express.fr/2021/04/11/premier-mois-chez-doctolib/">Nicolas Martignole on being Principal Engineer at Doctolib</a> (French)
</li>
<li>
<a href="https://blog.danielna.com/understanding-project-management-will-improve-your-developer-job/">Understanding Project Management Will Improve Your Developer Job</a>
</li>
<li>
<a href="https://sparktoro.com/blog/if-management-is-the-only-way-up-were-all-fd/">If Management is the Only Way Up, We’re All F’d</a>
</li>
<li>
<a href="https://frontside.com/blog/2016-07-07-the-conjoined-triangles-of-senior-level-development/">The Conjoined Triangles of Senior-Level Development</a>
</li>
<li>
<a href="https://blog.separateconcerns.com/2013-03-24-vogels-skills.html">Werner Vogels on skills</a>
</li>
<li>
<a href="https://spin.atomicobject.com/2015/02/19/software-architect-role/">Software Architect – A Role, Not a Job</a>
</li>
<li>
<a href="https://touilleur-express.fr/2022/07/17/devenir-staff-engineer/">Becoming Staff Engineer: how and why?</a> (French)
</li>
</ul>
</section>
<section id="See-also">
<h3>See also</h3>
<ul>
<li>
<a href="https://progressionapp.com">Progression app</a>
</li>
</ul>
</section>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Thoughts 4 — SSO Tax and various links</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2022-12-11-thoughts-4-sso-tax.html"
    />
    <id>tag:blog.separateconcerns.com,2022-12-11:thoughts-4-sso-tax</id>
    <published>2022-12-11T18:20:00Z</published>
    <updated>2022-12-11T18:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <blockquote>
<p>&#8220;Thoughts&#8221; are posts about what has been on my mind. Sometimes practical, sometimes not; often just things I read recently. Less thought out than regular posts.</p>
</blockquote>
<section id="The-SSO-Tax">
<h2>The SSO Tax</h2>
<p>I have had several discussions about how SSO should be priced by SaaS providers. On the one hand, making it prohibitively expensive weakens security for everyone, and there is <a href="https://sso.tax">a website about that</a>. On the other hand, features that distinguish between business categories are often related to security and compliance (audit logs, SLAs, etc).</p>
<p>My personal position - and I do not speak for anyone here including my employer - is the following:</p>
<ul>
<li>
not having any SSO for free plans is fine;
</li>
<li>
any paying customer should be able to use protocols such as OpenID Connect;
</li>
<li>
charging extra for SAML support is fair.
</li>
</ul>
</section>
<section id="Amazon's-Distributed-Computing-Manifesto">
<h2>Amazon&#8217;s Distributed Computing Manifesto</h2>
<p>I often say SOA started to become mainstream when Jeff Bezos mandated it at Amazon around 2002, a story famously told by Steve Yegge. But Werner Vogels has <a href="https://www.allthingsdistributed.com/2022/11/amazon-1998-distributed-computing-manifesto.html">shared a document</a> that shows the move began in 1998 and was advocated by engineers.</p>
<p>The Manifesto already emphasized moving data to the process, hiding data models from clients, data consistency issues&#8230; A fascinated read, almost 25 years later.</p>
</section>
<section id="Fix-the-machine-not-the-person">
<h2>Fix the machine, not the person</h2>
<p><a href="http://www.aaronsw.com/weblog/nummi">This essay by Aaron Swartz</a> is ten years old. A good time to read it again.</p>
<blockquote>
<p>An organization is not just a pile of people, it’s also a set of structures. It’s almost like a machine made of men and women. [&#8230;] True, sometimes you have the wrong gears and need to replace them, but more often you’re just using them in the wrong way. When there’s a problem, you shouldn’t get angry with the gears — you should fix the machine. [&#8230;] You can’t force other people to change. You can, however, change just about everything else. And usually, that’s enough.</p>
</blockquote>
</section>
<section id="Journal-of-Comprehensible-Explanations">
<h2>Journal of Comprehensible Explanations</h2>
<p><a href="https://third-bit.com/2022/11/20/journal-of-comprehensible-explanations/">Greg Wilson would like a journal of peer-reviewed summaries of research findings</a>. No new results, just good explanations. Me too!</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Thoughts 3 — The end of Twitter?</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2022-11-18-thoughts-3-twitter.html"
    />
    <id>tag:blog.separateconcerns.com,2022-11-18:thoughts-3-twitter</id>
    <published>2022-11-18T22:45:00Z</published>
    <updated>2022-11-18T22:45:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <blockquote>
<p>&#8220;Thoughts&#8221; are posts that relate to things that have been on my mind recently. Some are practical and some are just reflections on a given topic. They are less thought out than regular posts.</p>
</blockquote>
<p>So, <a href="https://twitter.com/pchapuis">the Bird</a>, of course. Not sure if or when it will collapse. Better safe than sorry so I am planning my retreat to <a href="https://framapiaf.org/@catwell">the Pachyderm</a>, but I do not really believe in the Fediverse model.</p>
<p><a href="https://eric.daspet.name">Eric</a> said on Twitter - where he deletes his tweets so I won&#8217;t link it - that it might be time to bring back RSS/Atom feeds. I agree, especially since I finally found <a href="https://github.com/nkanaev/yarr">a feed reader I like</a>. I know I won&#8217;t have the discipline to post as frequently as him, <a href="https://www.la-grange.net">Karl</a> or <a href="http://www.landley.net/notes.html">Rob</a>, still that&#8217;s what those &#8220;Thoughts&#8221; posts were supposed to be for initially.</p>
<p>But feeds by themselves are not enough. The value is in the graph and the discovery that comes with it. I follow about 450 feeds, and you cannot see which ones. I won&#8217;t publish my raw <a href="https://en.wikipedia.org/wiki/OPML">OPML</a> though. It&#8217;s not properly categorized so it wouldn&#8217;t be very useful anyway. It&#8217;s like my <a href="https://catwell.info/booklist/">booklist</a>, which I consider deprecating soon: too many items, not enough value.</p>
<p>Maybe the solution is to publish lists of links here from time to time like <a href="https://lemire.me/blog/2022/10/16/science-and-technology-links-october-16-2022/">Daniel</a>. You can also follow <a href="https://pinboard.in/u:catwell">my Pinboard</a>, which has feeds. <a href="https://lobste.rs">Lobsters</a> is great too.</p>
<p>Something else feeds don&#8217;t do is discussion / debate. But maybe that&#8217;s a good thing; I was growing tired of that aspect of Twitter lately. I think I prefer topic-specific spaces to social networks. I&#8217;m on a bunch of Slacks, Google Groups and mailing lists already. I liked forums but they&#8217;re out of fashion.</p>
<p>Oh, and for private messages, well&#8230; just send me an email, I guess.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Pallene support in localua</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2022-10-10-localua-pallene.html"
    />
    <id>tag:blog.separateconcerns.com,2022-10-10:localua-pallene</id>
    <published>2022-10-10T17:50:00Z</published>
    <updated>2022-10-10T17:50:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Today I attended Lua Workshop, and Roberto Ierusalimschy&#8217;s keynote was about <a href="https://github.com/pallene-lang/pallene">Pallene</a>, a language designed as a system counterpart to Lua in a scripting architecture. The language is a typed subset of Lua and can be used to replace C or as an interface between Lua and C. It is still a work in progress, there is no stable release yet.</p>
<p>Pallene works by accessing the internals of the Lua VM, so it requires <a href="https://github.com/pallene-lang/lua-internals">a patched version of Lua</a>. I wanted to try it so I added support for it to <a href="https://loadk.com">localua</a>. You can just use &#8220;pallene&#8221; instead of the Lua version and it will pull the latest sources of Pallene and its Lua fork and install them in a self-contained directory.</p>
<p>The Pallene compiler does not have an easy way to specify a local Lua directory and I decided against hacking it so you will have to pass <code>CFLAGS</code> as an environment variable for it to work.</p>
<p>I have just pushed a localua version that supports this so you too can try Pallene now. Be aware that I have only tested this on Linux, and that it is an undocumented feature which means I do not guarantee I will support it forever. That being said, this works now:</p>
<pre><code class="language-shell">curl "https://loadk.com/localua.sh" -O
chmod +x localua.sh
./localua.sh .lua pallene
curl -O "https://raw.githubusercontent.com/pallene-lang/pallene/master/examples/fibonacci/fibonacci.pln"
CFLAGS="-I $(pwd)/.lua/include -O2" ./.lua/bin/pallenec fibonacci.pln
./.lua/bin/lua -e 'print((require "fibonacci").fibonacci(10)[8])' # prints 13
</code></pre>

      </div>
    </content>
  </entry>
  <entry>
    <title>Dependency Injection</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2022-08-15-dependency-injection.html"
    />
    <id>tag:blog.separateconcerns.com,2022-08-15:dependency-injection</id>
    <published>2022-08-15T21:20:00Z</published>
    <updated>2022-08-15T21:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>In the list of application architecture patterns I like to use, <a href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency Injection</a> comes rather high. Here is how and why I use it.</p>
<section id="How-I-use-Dependency-Injection">
<h2>How I use Dependency Injection</h2>
<p>If you have already seen dependency injection used in practice, you may believe it requires the use of a framework such as <a href="https://dagger.dev">Dagger</a>. Although I did use such frameworks - especially in Angular where <a href="https://angular.io/guide/dependency-injection">it is native</a> - most of the time I use a simpler form of DI where I just pass dependencies to functions or constructors.</p>
<p>For instance, in Lua object-oriented code, instead of writing this:</p>
<pre><code class="language-lua">local json = require "dkjson"

local obj_mt = {
    __index = {
        as_json = function(self)
            return json.encode(self.data)
        end
    }
}

local function new_obj(data)
    return setmetatable({data = data}, obj_mt)
end

local o = new_obj({foo = 5})
o:as_json()
</code></pre>
<p>I could write something like this:</p>
<pre><code class="language-lua">local obj_mt = {
    __index = {
        as_json = function(self)
            return self.json_encoder(self.data)
        end
    }
}

local function new_obj(data, json_encoder)
    return setmetatable(
        {data = data, json_encoder = json_encoder},
        obj_mt
    )
end

local json = require "dkjson"
local o = new_obj({foo = 5}, json.encode)
o:as_json()
</code></pre>
<p>Note that this follows the <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency Inversion principle</a>, which is often confused with dependency injection but not exactly the same thing. It may not be obvious in a dynamic language such as Lua but the implementation of <code>obj</code> implicitly defines the signature of the JSON encoder it expects, and you may substitute the encoder for something else.</p>
<p>Also, on a stylistic note, in a larger program I would probably not pass every injected dependency as a different parameter, instead I would use a single container for this.</p>
<p>In case you&#8217;re interested, here is the same example closer to how I&#8217;d write it in practice in <a href="https://github.com/teal-language/tl">Teal</a>:</p>
<pre><code class="language-lua">local type JsonAble = {string: any}
local type JsonEncoder = function(JsonAble): string

local record ObjDeps
    json_encoder: JsonEncoder
end

local record Obj
    data: JsonAble
    as_json: function(Obj): string
    _deps: ObjDeps
end

local obj_mt = {
    __index = {
        as_json = function(self: Obj): string
            return self._deps.json_encoder(self.data)
        end
    }
}

local function new_obj(data: JsonAble, deps: ObjDeps): Obj
    return setmetatable({data = data, _deps = deps}, obj_mt)
end

local json = require "dkjson"
local o = new_obj(
    {foo = 5},
    {json_encoder = json.encode as JsonEncoder}
)
o:as_json()
</code></pre>
<p>Now let us see a few use cases for this.</p>
</section>
<section id="Testing-IO">
<h2>Testing I/O</h2>
<p>Probably the most well-known use case for DI is simplifying testing of code that does I/O, for instance code that makes network requests or interacts with a database. It makes it easy to replace the problematic part with a mock. You can mock just what you need or the entire dependency, for instance you can replace Redis with <a href="https://luarocks.org/modules/catwell/fakeredis">fakeredis</a>.</p>
</section>
<section id="Supporting-different-implementations-of-dependencies">
<h2>Supporting different implementations of dependencies</h2>
<p>This is a less well-known but very good use-case, especially in Lua. Let us consider my JSON example above. Users of this code may want to use <a href="https://luarocks.org/modules/dhkolf/dkjson">dkjson</a>, but maybe they want to use a faster, pure C module, or maybe they are running in OpenResty and have <a href="https://openresty.org/en/lua-cjson-library.html">cjson</a> available. With dependency injection, it&#8217;s easy to just use it.</p>
</section>
<section id="Eliminating-randomness">
<h2>Eliminating randomness</h2>
<p>This is in fact the use case that prompted me to write this blog post. I was writing some algorithmic code in Teal for which I had a reference in Python, and I wanted to apply <a href="https://blog.separateconcerns.com/2013-06-20-three-years-proprietary-projects.html#seed">the dual-implementation comparison technique I like</a>. However, this was AI code that had random parts.</p>
<p>What I did was that I refactored the code in both languages so that all sources of randomness were injected, and then I injected deterministic pseudo-random values instead, which meant I could now compare the state of both implementations at all times and easily debug things such as numerical problems.</p>
</section>
<section id="When-not-to-use-DI">
<h2>When not to use DI</h2>
<p>DI is a great tool, but it tends to make code a bit more complicated, so for instance I do not use it to inject pure functions or libraries from the same codebase.</p>
<p>If you have used Angular with <a href="https://storybook.js.org">Storybook</a>, you may know what abuse of DI looks like. It can be super verbose because sometimes you need to inject a lot of things you do not really care about for it to work.</p>
<p>A way to work around that if you still want to use DI may be to have sensible defaults for some injected objects. That way you can still override them if needed, but you can still have simple sample code.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>The push-to-poll pattern</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2022-03-05-push-to-poll.html"
    />
    <id>tag:blog.separateconcerns.com,2022-03-05:push-to-poll</id>
    <published>2022-03-05T13:00:00Z</published>
    <updated>2022-04-04T09:45:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Here I want to discuss a system design pattern that I call &#8220;push-to-poll&#8221;; if it has another name I am not aware of it. I have applied that pattern successfully a few times, and used systems that did not but should have way too often.</p>
<section id="Polling">
<h2>Polling</h2>
<p>Suppose you are responsible for a &#8220;server&#8221; system. That system generates events (messages), and authenticated &#8220;clients&#8221; need to receive those messages.</p>
<p>A simple solution is to provide some kind of feed: the client authenticates and provides a small piece of state (a timestamp or a cursor) which allows the server to return the messages they haven&#8217;t processed yet. Ideally individual messages also have properties which allow the client to process them in an idempotent way, e.g. skip messages it has already processed.</p>
<blockquote>
<p>EDIT (2022-04-04): I was made aware <a href="https://news.ycombinator.com/item?id=30904220">through HN</a> of a spec called <a href="https://www.http-feeds.org">HTTP Feeds</a> which looks like a very good format for those feeds. Something like Atom can still work too.</p>
</blockquote>
<p>The client can then just process the feed in a loop, in pseudocode:</p>
<pre><code>cursor = INCEPTION

loop do
    messages, new_cursor = fetch_messages_since(cursor)
    for message in messages do
        if not processed(message)
            process(message)
        end
    end
    cursor = new_cursor
    sleep(DELAY)
end
</code></pre>
<p>This solution is called polling, but the main problem with it is the <code>DELAY</code> variable. If it is set too low, both the server and the client will keep doing work and exchanging data for nothing, but if it is too high messages won&#8217;t be received by the client in a timely fashion.</p>
</section>
<section id="Server-Push">
<h2>Server Push</h2>
<p>If we want message reception to be realtime, we may use a push-based design instead. In that model, the client starts by registering with the server. The server will then send the messages to the client as they arrive.</p>
<p>In practice you might not really want to send each message on its own so you will send message batches instead and client code looks like that:</p>
<pre><code>def messages_handler(messages)
    for message in messages do
        process(message)
    end
end

register_with_server(messages_handler)
</code></pre>
<p>This design, however, has a few issues as well.</p>
<p>First, there is the bootstrap problem. The client might need messages that arrived before they registered. The server could theoretically just send all the previous messages to every client on connection, but in practice this is almost never what you want because of volume, performance, etc.</p>
<p>Even if you don&#8217;t need to bootstrap, what should the server do when it tries to send a message to the client and it doesn&#8217;t work? It could be that the client has gone down, or it could just be a network issue. In some systems the server keeps the failed messages for a while and retries, but that complexifies the design because it means the server needs to keep per-client state.</p>
<p>Finally, in practice, authentication is often more complicated that way. The server needs to authenticate the client, of course, but the client also needs a way to make sure the data it receives comes from the server. Here we might need to take a few real-life examples: the client could be a single-page app, in which case the push channel would be something like SSE or websockets; it could also be two HTTP servers communicating in which case we are talking webhooks and might need some ad hoc <a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/securing-your-webhooks">signature scheme</a>. And by the way, the GitHub scheme does not have any form of protection against replay attacks, which might or might not be a problem for your use case&#8230;</p>
</section>
<section id="Push-to-poll">
<h2>Push-to-poll</h2>
<p>The push-to-poll pattern combines the best of both worlds. The idea is simple: start with the same feed as polling, but instead of using a delayed loop to decide when to fetch it let the server tell you like with the push pattern.</p>
<p>It looks like this:</p>
<pre><code>cursor = INCEPTION

def poll_now()
    messages, new_cursor = fetch_messages_since(cursor)
    for message in messages do
        if not processed(message)
            process(message)
        end
    end
    cursor = new_cursor
end

poll_now()
register_with_server(poll_now)
</code></pre>
<p>It solves the problems from the poll design, because there is no more arbitrary delay. The server tells clients when to poll, which might be every time a new message comes, or with a slight delay to optimize the number of requests and ensure messages are processed in batch. Clients might decide not to poll immediately when they receive a server push as well.</p>
<p>There is no more bootstrap problem or reliability problem since it is built on the poll design: every time you poll, you catch everything up. If you want to be extra safe and messages are very rare, you can decide to poll even if you didn&#8217;t receive any message after a reasonably long delay.</p>
<p>The authentication story is better than in the push case, because pushes contain no data. All data access uses regular, client-calls-server authentication. It is still a good thing to authenticate server pushes (for various reasons I won&#8217;t go into) but mistakes there have less impact, especially if you have client-side rate-limiting.</p>
<p>There are many small tweaks that can be added on top of that design, for instance you can include a little bit of metadata in the push messages to let clients decide whether they should actually poll or not.</p>
<p>Finally, note that you get polling for free! Implementers who do not need realtime can just use the feed endpoint with the polling pattern.</p>
<p>The only drawback is that it takes an extra request for every exchange, but in practice I have seen very few cases where the server keeps message history where it would not have been an improvement over server push. So I hope you think about it next time you consider serializing data into websockets or webhooks.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Hello Gemini</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2022-02-05-gemini.html"
    />
    <id>tag:blog.separateconcerns.com,2022-02-05:gemini</id>
    <published>2022-02-05T19:45:00Z</published>
    <updated>2022-02-05T19:45:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I have wanted to play with <a href="https://gemini.circumlunar.space">Gemini</a> for while now, so today being <a href="https://fosdem.org/2022/">the first day of FOSDEM</a> I decided to do what I would have done if I was in Brussels and hack on something between two talks.</p>
<p>I ended up adding Gemini support to <a href="https://github.com/catwell/cw-web/tree/master/separateconcerns/blog">the static generator I use for this blog</a>, which meant implementing a Gemini writer for <a href="https://github.com/jgm/lunamark">Lunamark</a>, plus a small trick to display links in the right place.</p>
<p>To host it, I went with <a href="https://github.com/mbrubeck/agate">Agate</a> which is a simple static content server; I will revisit this choice if I ever need dynamic content.</p>
<p>If you want to check it out, point a Gemini browser - I use <a href="https://gmi.skyjake.fi/lagrange/">Lagrange</a> - to <a href="gemini://separateconcerns.com">separateconcerns.com</a>.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Blog posts for founders (and early employees)</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2021-10-31-blog-posts-founders.html"
    />
    <id>tag:blog.separateconcerns.com,2021-10-31:blog-posts-founders</id>
    <published>2021-10-31T15:45:00Z</published>
    <updated>2021-10-31T15:45:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Over the years, I have accumulated links to blog posts I intend to re-read every time find myself in a position to influence the early stage of a company.</p>
<p>I thought it might be helpful to someone if I published part of that list here. I will avoid links which are too technical and focus on links that can be interest non-technical founders as well.</p>
<p>Note that I haven&#8217;t included books. There are many good books for founders, but if you must read only one make it <a href="https://www.amazon.com/Four-Steps-Epiphany-Steve-Blank/dp/0989200507">The Four Steps to the Epiphany</a>.</p>
<p>If this isn&#8217;t enough for you, you&#8217;re always welcome to explore <a href="https://pinboard.in/u:catwell/">my Pinboard account</a>.</p>
<section id="My-own-posts">
<h2>My own posts</h2>
<p>Let&#8217;s get started by mentioning posts from this blog which transcribe the opinions of two influential people, which I share (on those topics).</p>
<ul>
<li>
<p><a href="https://blog.separateconcerns.com/2013-03-24-vogels-skills.html">Werner Vogels on Skills</a>, where the CTO of Amazon.com describes the qualities he is looking for in leaders at Amazon, in particular Ownership and the willingness to get their hands dirty doing operations.</p>
</li>
<li>
<p><a href="https://blog.separateconcerns.com/2014-05-28-hacker-founders.html">Hacker Founders</a>, where Paul Graham, founder of Y Combinator, explains how programmers have an edge as company founders, including as CEOs.</p>
</li>
</ul>
</section>
<section id="Titles-are-Toxic">
<h2><a href="https://randsinrepose.com/archives/titles-are-toxic/">Titles are Toxic</a></h2>
<p>Michael Lopp (Rands) on issues with giving people titles. Personally I have never liked titles, which can be a source of conflicts and bad decisions. I have also often held titles that didn&#8217;t really correspond to the job I did - which was almost always multi-faceted. Yet, titles are a proxy used by people who don&#8217;t know you to understand what you do at work.</p>
<p>Like Rands I don&#8217;t have a good solution to that. I write <a href="https://blog.separateconcerns.com/2013-06-20-three-years-proprietary-projects.html">some</a> <a href="https://blog.separateconcerns.com/2018-01-06-four-years.html">blog</a> <a href="https://blog.separateconcerns.com/2021-05-01-inch.html">posts</a> explaining what I do in more details that a title ever could, for people who care.</p>
<p>In any case I always suggest avoiding giving some titles to people too early, including to founders: having a &#8220;technical co-founder&#8221; instead of a CTO will make things easier if you grow fast and need to hire someone later on.</p>
</section>
<section id="Creating-a-Software-Company-9-Decisions-You-Have-to-Make">
<h2><a href="https://spin.atomicobject.com/2014/06/02/software-company-decisions/">Creating a Software Company? 9 Decisions You Have to Make</a></h2>
<p>A list of questions to ask yourself when founding a software company, by Michael Marsiglia, CEO of Atomic Object. It can also be a good idea to ask them before joining one.</p>
</section>
<section id="The-40%-rule">
<h2><a href="https://avc.com/2015/02/the-40-rule/">The 40% rule</a></h2>
<p>A simple but powerful rule of thumb for SaaS companies by Brad Feld, relayed by Fred Wilson:</p>
<blockquote>
<p>annual revenue growth rate + operating margin should equal 40%</p>
</blockquote>
</section>
<section id="Why-it’s-nice-to-compete-against-a-large-profitable-company">
<h2><a href="https://blog.asmartbear.com/compete-on-profit.html">Why it’s nice to compete against a large, profitable company</a></h2>
<p>Jason Cohen explains how a startup can disrupt a large competitor by making a part of their business unprofitable and forcing them to abandon it. It&#8217;s not as simple as this summary makes it sound, and it&#8217;s not the Innovator&#8217;s Dilemma. Read the article :)</p>
</section>
<section id="Product-design-at-GitHub">
<h2><a href="https://warpspire.com/posts/product-design">Product design at GitHub</a></h2>
<p>Kyle Neath on how, in the early days of GitHub, everyone was a &#8220;product designer&#8221;. Many successful SaaS products started with the same concept:</p>
<blockquote>
<p>We only hire smart people we trust to make our product better. We don’t have managers dictating what to work on. We don’t require executive signoff to ship features. Executives, system administrators, developers, and designers concieve, ship, and remove features alike.</p>
</blockquote>
<p>Actually, I think I have never seen a company ship good product fast without doing some version of this.</p>
</section>
<section id="Joel-Spolsky's-Strategy-Letters">
<h2>Joel Spolsky&#8217;s Strategy Letters</h2>
<p>If you don&#8217;t know that series of blog posts, you are missing something. They are super insightful essays by a multi-successful founder about building companies.</p>
<ul>
<li>
<p><a href="https://www.joelonsoftware.com/2000/05/12/strategy-letter-i-ben-and-jerrys-vs-amazon/">Ben and Jerry’s vs. Amazon</a> - How to decide between slow profitable growth or fast VC-funded growth.</p>
</li>
<li>
<p><a href="https://www.joelonsoftware.com/2000/05/24/strategy-letter-ii-chicken-and-egg-problems/">Chicken and Egg Problems</a> - Understanding the Chicken and Egg problem and some ways to solve it.</p>
</li>
<li>
<p><a href="https://www.joelonsoftware.com/2000/06/03/strategy-letter-iii-let-me-go-back/">Let Me Go Back!</a> - On barriers to entry, and how letting customers understand they can easily move <strong>out</strong> of your product (maybe back to what they used before) is important.</p>
</li>
<li>
<p><a href="https://www.joelonsoftware.com/2001/03/23/strategy-letter-iv-bloatware-and-the-8020-myth/">Bloatware and the 80/20 Myth</a> - 80% of software users use 20% of features, so you can win the market with just 20% of the features, right? No, because not everyone uses the <strong>same</strong> 20%! I can&#8217;t state how often I meet founders who don&#8217;t understand this.</p>
</li>
<li>
<p><a href="https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/">Strategy Letter V</a> - How companies have an advantage in commoditizing their complements, and how this can explain some investments in Open Source software.</p>
</li>
</ul>
<p>(There is at least a <a href="https://www.joelonsoftware.com/2007/09/18/strategy-letter-vi/">sixth strategy letter</a>, but it is less interesting IMO.)</p>
</section>
<section id="Ev-William's-10-rules-for-Web-Startups">
<h2>Ev William&#8217;s 10 rules for Web Startups</h2>
<p>This post used to be on Ev William&#8217;s blog which went offline some time ago, thankfully I <a href="http://files.catwell.info/misc/mirror/evan-williams-10-rules-startups.txt">mirror articles that interest me that much</a>.</p>
</section>
<section id="Your-company's-most-valuable-resource">
<h2><a href="https://twitter.com/williampietri/status/732602463082188801">Your company&#8217;s most valuable resource</a></h2>
<p>Just a tweet, but an important one, by William Pietri:</p>
<blockquote>
<p>Your company&#8217;s most valuable resource is people giving a shit. Ask yourself: does your system encourage or discourage that?</p>
</blockquote>
</section>
<section id="Wants-needs-and-chasm-crossing">
<h2><a href="https://apenwarr.ca/log/20211024">Wants, needs, and chasm-crossing</a></h2>
<p>A recent post by Avery Pennarun, Tailscale CEO. It shows how the best strategy to acquire customers is often to solve a single <strong>Want</strong> - something their current solution doesn&#8217;t provide - and then to resolve all their <strong>Needs</strong> (blockers) so they can actually flock to your product instead of attempting to implement any more <strong>Wants</strong>.</p>
</section>
<section id="Financial-modeling-for-startups">
<h2><a href="https://www.slideshare.net/rodrigo1971/financial-modeling-for-startups">Financial modeling for startups</a></h2>
<p>A slide deck by Rodrigo Sepulveda with a simple and effective approach to business models and PnLs for startups.</p>
</section>
<section id="Startup-Therapy:-Ten-questions-to-ask-yourself-every-month">
<h2><a href="https://blog.asmartbear.com/startup-business-plan.html">Startup Therapy: Ten questions to ask yourself every month</a></h2>
<p>Jason Cohen (again) shares his alternative to business plans: a list of 10 questions to help you figure out where you are and where to go next.</p>
</section>
<section id="The-Small-Teams-Manifesto">
<h2><a href="http://codemanship.co.uk/parlezuml/blog/?postid=1322">The Small Teams Manifesto</a></h2>
<p>Jason Gorman says small teams win because:</p>
<ul>
<li>
the probability that a project fails increases rapidly with size;
</li>
<li>
small teams interact more effectively with the customer and/or end users;
</li>
<li>
small teams are easier to build (hiring good people is hard).
</li>
</ul>
</section>
<section id="Innovating-with-purposeful-anger">
<h2><a href="https://www.icopilots.com/innovation-mindset/innovating-purposeful-anger-12965">Innovating with purposeful anger</a></h2>
<blockquote>
<p>One of the very interesting tools using anger as a driver to innovate is the “You Got Fired!” game.</p>
<p>Get a bunch of managers in a business unit and role-play that their whole team is fired. Indicate also that as a cockup from legal their non-compete clause isn’t applicable.</p>
<p>Then, give them an hour to build a competitor startup that will take revenge on their company on a “That’ll teach them!” mode.</p>
</blockquote>
</section>
<section id="How-To-Decide-What-To-Build">
<h2><a href="https://dcgross.com/decide-what-to-build/">How To Decide What To Build</a></h2>
<p>Daniel Gross (a founder I have been following since his first YC startup, Greplin) on ways to decide what company to build on a personal level. I wish he had published that before my last attempt.</p>
</section>
<section id="Qu’est-ce-qu’un-projet-entrepreneurial-viable">
<h2><a href="https://philippesilberzahn.com/2011/10/03/projet-entrepreneurial-viable/">Qu’est-ce qu’un projet entrepreneurial viable?</a></h2>
<p>A blog post in French by Philippe Silberzahn. A viable project stems from an individual acting on an idea and convincing people.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>What I do at Inch</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2021-05-01-inch.html"
    />
    <id>tag:blog.separateconcerns.com,2021-05-01:inch</id>
    <published>2021-05-01T18:00:00Z</published>
    <updated>2021-05-01T18:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I have been working at <a href="https://inch.fr">Inch</a> for about a year and a half now, so I thought it was a good time to write a bit about what I do there.</p>
<p>First, a bit of context: Inch is SaaS software for property managers that operates in the French (and Belgian) market. Many of our customers are <a href="https://fr.wikipedia.org/wiki/Syndic_de_copropriété">co-ownership trustees</a>, which is a much bigger deal in France than in most countries, but we also serve other professionals such as rental managers and social housing landlords.</p>
<p>The software can be seen as a mix between a CRM and a ticketing solution. The code base dates back to 2013. The backend is a Rails monolith and the frontend is a React application. There were two other developers on the team when I joined, now we are five, of which I am the most senior. We all directly report to the founder responsible for product, but I am sometimes presented as the CTO to customers because from their point of view I act as such (more on that later).</p>
<p>Now, what do I do there in practice? As you may guess if you know me, a few different things.</p>
<section id="Dealing-with-integrations">
<h2>Dealing with integrations</h2>
<p>That is my main role, and the reason I was hired in the first place. See, our software is used by our customers to manage the relationship with their own customers and suppliers, but they invariably already have pre-existing sotware with overlapping data: their accounting software or ERPs. Some have built them in-house, but most picked from a very fragmented market of industry-specific software which we have to integrate with. So I maintain somewhere between 20 and 30 different integrations with those pieces of software you have probably never heard about.</p>
<p>You may not understand the complexity until you realize that none of those integrations looks the same, because the software itself doesn&#8217;t. Some is cloud-based, some is on-prem. In some cases they provide APIs or flat-file data export mechanisms, but sometimes we have to go get the data directly in their database. Of course, we almost never have technical documentation for their data model, and the databases themselves are all different. I have code for over 10 different major DBMS, not all of them using SQL, and not all of them running on typical OSs (hello AS400, hello SCO&#8230;).</p>
<p>Add to that integration with a few APIs we use, the maintenance of our own APIs so others can integrate with <strong>us</strong> and a few custom features for large customers, and you will have an idea of the scope. It is a role that requires domain knowledge, technical insight about many systems and the ability to understand new ones quickly. And maybe most importantly, I have to model our own software and systems so that they can support all of this. If you think about it it&#8217;s all about synchronizing data between systems, so I am not all that far from my specialty after all. :)</p>
<p>This role means that when we talk to large customers or prospects I am often the person representing the technical side of the company (hence the CTO thing).</p>
</section>
<section id="Operations-and-security">
<h2>Operations and security</h2>
<p>You know the pattern now: I arrive at a startup with a small team of developers where nobody has significant operations experience and I end up becoming responsible for them. It never bothered me, quite the opposite actually: I have been doing systems administration for 20 years and I have always liked it.</p>
<p>In this case, there had been some people who knew what they were doing on the team before, so it was not that bad. For instance, they had a reasonable backup strategy already (yay!).</p>
<p>One of the first initiatives I took was look at spending, which was too high, rationalize a few things and get the hosting bills down. Also, Inch had four main hosting providers for historical reasons: AWS, GCP, Digital Ocean and OVH. The plan was to move everything to GCP, for simplification and compliance reasons. I&#8217;m still not done but I got out of Digital Ocean and reduced our usage of AWS by a lot.</p>
<p>We still had three servers left at OVH when <a href="https://www.reuters.com/article/us-france-ovh-fire-idUSKBN2B20NU">their DCs burned</a> last March. We lost two which served as integration gateways, and I took the opportunity to move them to GCP. Losing those servers has made me very busy in the last two months because their IP adresses were all over our customers&#8217; and partners&#8217; config, so I had to get in touch with them all to fix it, since there was sadly no way we could get back the IPs from OVH in time. That won&#8217;t happen again now, I used reallocatable IPs this time. The third server will remain at OVH for the time being because it is a very special machine with very specific hardware hosting needs.</p>
<p>At small companies like this, operations also come with a lot of security-related responsibilities. Security is pretty important for Inch, which deals with a lot of personal data. So far, I have worked on improving our operational practices, added a team password manager, rationalized internal auth{n,z} around the GCP tools, and written some documentation. I have also upgraded several important software components and reviewed / fixed all the usual configuration (systems, TLS, CORS, CSP&#8230;). I have also started working on the Web application security itself, I have less experience in that space - especially regarding the frontend - than in systems security but I am learning and we have a few experienced Web developers on the team to help.</p>
<p>As usual, nothing is ever done in that space and I still have a lot of work coming up, but at least I believe we&#8217;ve significantly improved since I joined.</p>
</section>
<section id="Fullstack-Web-development">
<h2>Fullstack Web development</h2>
<p>Finally, the third leg of my role is the same as every developer at Inch: working on the product.</p>
<p>I know the &#8220;fullstack&#8221; wording makes some people cringe. Of course we all have our favorite part of the stack but I think its is extremely important, especially on small teams, that everyone be able to write or at least understand a feature in its entirety.</p>
<p>With the other two roles taking much of my time, I don&#8217;t do as much feature work as the rest of the team but I still try to implement features myself regularly. I had never done frontend stuff seriously before Chilli and it was a different stack so I learn a lot about React and its ecosystem. I do my share of performance and bug fixes too. On the backend especially, I also do quite a lot of architecture and code reviews.</p>
</section>
<section id="Other-things">
<h2>Other things</h2>
<p>Besides those three main parts of my role, there are of course other things I take part in. Inch encourages its employees to participate in many cross-cutting activities.</p>
<p>An important one is that we all do support in rotation, which means the whole team ends up knowing the customers and identifying the parts of the product that need improvement. This also means everyone can, and does, participate in product decisions.</p>
<p>But that doesn&#8217;t stop at product. Inch founders are very transparent about the business, our finances and future plans. Everyone is also encouraged to chime in on strategic decisions for the company.</p>
<p>This article is already long enough so I&#8217;ll stop here. I hope that gives you an idea of what I&#8217;ve been doing at work since November 2019. If any of this interests you in any way, don&#8217;t be shy, get in touch. :)</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Booting GDM on my XPS with kernel 5.11</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2021-03-27-archlinux-boot-xps-511.html"
    />
    <id>tag:blog.separateconcerns.com,2021-03-27:archlinux-boot-xps-511</id>
    <published>2021-03-27T20:15:00Z</published>
    <updated>2021-03-27T20:15:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>When I updated my Linux kernel to 5.11 I had the bad surprise to end up with a blinking underscore on reboot. It had been many years since an update had broken my system like that. I fixed it rather easily by booting in rescue mode and downgrading the kernel. I had no time to investigate so I just added <code>linux</code> to <code>IgnorePkg</code> at the time, But I don&#8217;t use Arch to run old kernels so today I took the time to fix it &#8220;properly&#8221;.</p>
<p>To do so, I reproduced the issue, then downgraded again and looked at the logs with <code>journalctl -b --boot=-1</code>. It quickly let me understand that it was GDM that was failing due to something wrong with graphics initialization.</p>
<p>To keep things short, let me skip to the conclusion: if you run into this issue on an old-ish Dell XPS with an Intel Iris Plus 640 graphics card like mine with GDM, Arch and Wayland (or something similar), try <a href="https://wiki.archlinux.org/index.php/kernel_mode_setting#Early_KMS_start">enabling early KMS</a> by adding <code>i915</code> to the <code>MODULES</code> array in <code>mkinitcpio.conf</code> and rebuilding the initramfs, that fixed it for me.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Personal news, 2020 edition</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2020-12-16-personal-news.html"
    />
    <id>tag:blog.separateconcerns.com,2020-12-16:personal-news</id>
    <published>2020-12-16T13:50:00Z</published>
    <updated>2020-12-16T13:50:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I haven&#8217;t posted anything here for 6 months so I thought it would be a good idea to post a personal news update before the end of 2020.</p>
<section id="Shutting-down-Chilli">
<h2>Shutting down Chilli</h2>
<p>I haven&#8217;t posted about it here yet, but my co-founder Julien and me decided to shut down <a href="https://blog.separateconcerns.com/2019-04-23-spicing-things-up.html">Chilli</a> at the end of last year, in agreement with eFounders. Basically, some of our initial hypotheses about the state of the market we were in (french SMBs) were wrong and the business couldn&#8217;t be profitable enough.</p>
<p>In retrospect, it was an interesting experience. I really appreciated being part of <a href="https://www.efounders.com">eFounders</a>, I do recommend it for people who want to start a B2B SaaS company.</p>
<p>However, I wanted to get out of my comfort bubble too much with this one, by tackling a problem in a market I didn&#8217;t know. Because of that, I had to rely on others regarding core business choices, and while that was fine with me initially it ended up being frustrating in the end when things didn&#8217;t work well and I couldn&#8217;t help much. So if I start another company someday, it will be one where I know the problem domain better.</p>
</section>
<section id="Joining-Inch">
<h2>Joining Inch</h2>
<p>After we shut down Chilli, I decided to join a small startup editing a SaaS CRM and ticketing solution for property managers called <a href="https://inch.fr">Inch</a>, only available in the French market for now.</p>
<p>I didn&#8217;t pick Inch randomly, I have known one of the founders for years since he was a <a href="https://blog.separateconcerns.com/2013-06-20-three-years-proprietary-projects.html">Moodstocks</a> user! Fun fact: at the time, I had met him and he was looking for a technical co-founder for <a href="https://fr-fr.facebook.com/Qrators/">his project</a>. I told him he should learn to code instead and gave him Ruby sample code&#8230; and this is why I am back to Rails today. Karma? :)</p>
<p>Anyway, I had been following Inch with interest since its creation, because it is the company I like: solving a real need in a market where tools were either terrible or non-existent. Now they have a unique place in the market and some interesting technical challenges to solve, so I decided to join and help.</p>
</section>
<section id="Starting-a-family">
<h2>Starting a family</h2>
<p>And here comes the last piece of news: despite all the madness that happened this year, the biggest change for me is that I am now a father! My son was born last week, and I took a holiday until the end of the year to spend time with him and his mother. I don&#8217;t intend to post too much personal news here, but this one deserved it. =)</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>[Quora] Transparency in distributed systems UX</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2020-06-19-quora-transparency-distributed.html"
    />
    <id>tag:blog.separateconcerns.com,2020-06-19:quora-transparency-distributed</id>
    <published>2020-06-19T18:52:00Z</published>
    <updated>2020-06-19T18:52:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Yet another <a href="https://blog.separateconcerns.com/2020-04-09-quora-lua-call.html">Quora answer</a>, this time to with <a href="https://www.quora.com/Why-is-Transparency-a-major-issue-in-distributed-databases">this question</a> which I answered on August 24, 2016:</p>
<blockquote>
<p>Why is Transparency a major issue in distributed databases?</p>
</blockquote>
<hr/>
<p>First, a few words about what &#8220;transparency&#8221; is. Transparency is a <a href="https://en.wikipedia.org/wiki/Transparency_%28human%E2%80%93computer_interaction%29">UX term</a> about the user not noticing that they are using a distributed system. We actually talk about transparencies in the plural, because there are several kinds of transparencies: fault transparency, location transparency, concurrency transparency, access transparency, etc. In my opinion, the choice of wording is not so good: when we talk about &#8220;transparency&#8221; we actually mean we hide things from the user, so &#8220;opacity&#8221; would be more logical. (The name comes from the fact that, if we replace a single node system by a distributed system, it will be transparent for the user, i.e. then will not notice it.)</p>
<p>The reason why transparency is important is usability. The more transparencies our system has, the less cognitive burden there is on the user. In other words: <strong>transparencies simplify the API of the system</strong>.</p>
<p>However, what transparencies we implement or not is a trade-off between that simplicity of API and things like flexibility, performance, and sometimes correctness. Years ago (when Object Oriented programming à la Java was booming) it was fashionable to abstract everything and make the user forget that they were using an actual distributed system. For instance, we had RPC everywhere, which kind of hid the network from the user. Since then we learnt that <a href="http://www.rgoarchitects.com/Files/fallacies.pdf">abstracting the network entirely is a bad idea</a>.</p>
<p>On the other hand, exposing too many knobs to the user is dangerous as well: they might turn them without really understanding what they do and set the system on fire.</p>
<p>So, determining what to expose to the user and what to implement &#8220;transparently&#8221; is a crucial point in all distributed systems work, not only databases.</p>
<p>In databases in particular, conflict resolution is a contention point. Do we only provide the user with databases that are consistent, knowing that this severly impacts performance and availability? Do we let them tweak the parameters (the R and W parameters in a quorum system, for instance)? Do we tolerate divergence, detect it, inform the user and let them reconcile (à la CouchDB)? Do we provide the user with constrained datastructures that resolve conflicts by themselves (CRDTs)?</p>
<p>Some people have gone as far as saying that <a href="https://bravenewgeek.com/distributed-systems-are-a-ux-problem/">Distributed Systems Are a UX Problem</a> and I tend to agree with this line of reasoning.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>[Quora] Explaining classes to a 10 year old</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2020-04-11-quora-class-concept.html"
    />
    <id>tag:blog.separateconcerns.com,2020-04-11:quora-class-concept</id>
    <published>2020-04-11T13:00:00Z</published>
    <updated>2020-04-11T13:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Continuing my <a href="https://blog.separateconcerns.com/2020-04-09-quora-lua-call.html">Quora answers series</a> with <a href="https://www.quora.com/How-would-you-explain-the-concept-of-a-class-in-Python-to-a-10-year-old">this question</a> which I answered on June 26, 2012:</p>
<blockquote>
<p>How would you explain the concept of a &#8220;class&#8221; in Python to a 10 year old?</p>
</blockquote>
<hr/>
<p>You cannot distinguish the concept of &#8220;class&#8221; from the concept of &#8220;instance&#8221;. I think OOP is often taught the wrong way around, paradoxically because it is taught with languages that have support for class-based Object Oriented Programming such as Python (or Java for that matter). So excuse me but I will use another language (Lua, but you don&#8217;t need to know to understand) to explain it. (Note: this will be <strong>bad</strong> Lua on purpose, but the point is not to teach Lua, it is to explain OOP).</p>
<p>Since you wrote &#8220;to a 10 year old&#8221; let&#8217;s proceed with examples.</p>
<p>Imagine you come from another planet and you do not know what cats are. You encounter something small that purrs. You decide to name it Sam. Later on, you see something else very similar, except it is bigger, and you name it Max.</p>
<p>Let us describe Sam and Max in Lua.</p>
<pre><code class="language-lua">sam = {
    name = "Sam",
    size = "small",
}

max = {
    name = "Max",
    size = "big",
}
</code></pre>
<p>Now we said that they purr, so let&#8217;s define purring:</p>
<pre><code class="language-lua">purr = function(self)
    print(self.name .. " purrs!")
end
</code></pre>
<p><code>purr</code> is a function that has its first argument called <code>self</code> and represents the thing that purrs. For instance you could make Max purr
like this:</p>
<pre><code class="language-lua">purr(max)
</code></pre>
<p>Now you could stop here, or you could see purring as a property of Sam and Max. To represent that we could make <code>purr</code> a &#8220;method&#8221; of the &#8220;objects&#8221; Sam and Max:</p>
<pre><code class="language-lua">sam.purr = purr
max.purr = purr
</code></pre>
<p>Now with the Lua syntax we cound also make Max purr like this:</p>
<pre><code class="language-lua">max:purr()
</code></pre>
<p>Which is a short way to write this:</p>
<pre><code class="language-lua">max.purr(max)
</code></pre>
<p>Since we said that <code>max.purr = purr</code> it works as expected.</p>
<p>After some time on Earth you realize there are lots of things like Sam and Max. Moreover there are lots of things Sam, Max and their friends do, such as sleep on keyboards. They also have things in common such as the fact they have two eyes.</p>
<p>You grow tired to say: &#8220;Max purrs. Max has two eyes. (&#8230;). Sam purrs. (&#8230;)&#8221;. It would be much simpler to say give a name to the set of Sam, Max and their friends (for instance &#8220;Cats&#8221;) and say &#8220;Cats purr. Cats have two eyes.&#8221;.</p>
<p>Note that &#8220;Cats&#8221; is nothing physical, it is an idea, a <strong>category</strong> you have created for Sam, Max and their friends in order to be able to express things about them in an easier way.</p>
<p>Let&#8217;s switch to Python to show how this is done now:</p>
<pre><code class="language-python">class Cat:
    eyes = 2

    def __init__(self, name, size):
        self.name = name
        self.size = size

    def purr(self):
        print(self.name + " purrs!")
</code></pre>
<p>And how you use it:</p>
<pre><code class="language-python">sam = Cat(name="Sam", size="small")
sam.purr()
</code></pre>
<p>Note that we have never said explicitly that Sam can purr. He can purr because he is a Cat.</p>
<p>In this example:</p>
<ul>
<li>
<p>Cat is a class, ie. a category of objects ;</p>
</li>
<li>
<p>Sam and Max are instances of the Cat class ;</p>
</li>
<li>
<p><code>purr</code> is a method of the Cat class, ie. not much more conceptually than a function that takes a Cat instance as its first argument and some syntactic sugar (ie. special notation) to call it.</p>
</li>
</ul>
<hr/>
<p>By the way, this answer got one of the best comments I ever got on a Quora answer:</p>
<blockquote>
<p>Sam and Max are not cats!</p>
</blockquote>
<p>;)</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>[Quora] What is the call metamethod in Lua?</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2020-04-09-quora-lua-call.html"
    />
    <id>tag:blog.separateconcerns.com,2020-04-09:quora-lua-call</id>
    <published>2020-04-09T08:40:00Z</published>
    <updated>2020-04-09T08:40:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>From 2011 to 2014, I used to post answers on <a href="https://www.quora.com/">Quora</a>. I don&#8217;t anymore, because I don&#8217;t really like what the website has become. I have a copy of some of my answers <a href="http://files.catwell.info/misc/mirror/quora-answers/">here</a> but someone <a href="https://www.quora.com/What-is-the-__call-metamethod-in-Lua-and-what-are-some-of-its-uses-and-basic-examples/all_comments/Pierre-Chapuis?__nsrc__=4&amp;__snid3__=7556751152&amp;comment_id=135057589&amp;comment_type=2">commented</a> on one of my answers that it should be available more prominently on the Web, so I decided to repost a few of my answers here, starting with this one.</p>
<p>The <a href="https://www.quora.com/What-is-the-__call-metamethod-in-Lua-and-what-are-some-of-its-uses-and-basic-examples/">original question</a> was:</p>
<blockquote>
<p>I&#8217;m really new to lua and relatively new to programming.,so kindly excuse if I say something stupid.</p>
<p>I have a table named x and its metatable named y.
When I have a <code>__call</code> method defined for the metatable <code>y</code>, then I can call <code>x()</code> but if I have a <code>__call</code> for <code>x</code> then I can not call <code>x()</code>.</p>
<p>What is <code>__call</code> used for? How does it work and what are some examples of usage</p>
</blockquote>
<p>I answered it on February 25, 2013.</p>
<hr/>
<p><code>__call</code> is a metamethod, that means it is meant to be defined in a
metatable. A <code>__call</code> field added to a regular table (<code>x</code> in your example)
does nothing.</p>
<p>The role of <code>__call</code> is to make something that is not a function (usually
a table) act like a function. There are a few reasons why you may want
to do that. Here are two examples.</p>
<p>The first one is a memoizing factorial function. In Lua you could write
a recursive factorial like this:</p>
<pre><code class="language-lua">local function fact(n)
    if n == 0 then
        return 1
    else
        return n * fact(n - 1)
    end
end
</code></pre>
<p>Note: this is not a good way to write a recursive factorial because you
are not taking advantage of tail calls, but it&#8217;s enough for what I want
to explain.</p>
<p>Now imagine your code uses that function to calculate the factorials of
numbers from 1 to <code>N</code>. This would be very wasteful since you would
calculate the factorial of <code>N</code> once, the factorial of <code>N-1</code> twice, and so
on. You would end up computing approximately <code>N²/2</code> factorials.</p>
<p>Instead you could write that:</p>
<pre><code class="language-lua">local fact
fact = setmetatable(
    {[0] = 1},
    {
        __call = function(t, n)
            if not t[n] then
                t[n] = n * fact(n - 1)
            end
            return t[n]
        end
    }
)
</code></pre>
<p>It is an implementation of factorial that memoizes the results it has
already computed, which you can call like a function. You can use it
exactly like the previous implementation of factorial and get linear
complexity.</p>
<p>Another use case for <code>__call</code> is matrices. Imagine you have a matrix
implementation that works like that:</p>
<pre><code class="language-lua">local methods = {
    get = function(self, i, j)
        return self[i + 1][j + 1]
    end
}

local mt = {__index = methods}

local new_matrix = function(t)
    return setmetatable(t, mt)
end
</code></pre>
<p>You can use it like that:</p>
<pre><code class="language-lua">local M = new_matrix({ {1, 2}, {3, 4} })
local v = M:get(0, 1)
assert(v == 2)
</code></pre>
<p>However scientists would probably expect something like this:</p>
<pre><code class="language-lua">local v = M(0, 1)
assert(v == 2)
</code></pre>
<p>You can achieve that thanks to <code>__call</code>:</p>
<pre><code class="language-lua">local mt = {
    __index = methods,
    __call = function(self, i, j)
        return self:get(i, j)
    end
}
</code></pre>
<p>I hope this gives you enough information to understand how you can use
<code>__call</code>. A word of warning though: like most other metamethods, it is
useful but it is important not to abuse it. Simple code is better :)</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Two-factor authentication with pass and oathtool</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2020-04-03-2fa-pass-oathtool.html"
    />
    <id>tag:blog.separateconcerns.com,2020-04-03:2fa-pass-oathtool</id>
    <published>2020-04-03T09:05:00Z</published>
    <updated>2020-04-03T16:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>If you&#8217;re like me, you don&#8217;t want to depend on your phone to log into a website, and you wish <a href="https://www.passwordstore.org">your favorite password manager</a> would support 2FA. Well, it can.</p>
<p>When asked to setup 2FA on a website, get a text code. If the website doesn&#8217;t give you that option, just use <a href="http://zbar.sourceforge.net">zbar</a>. For instance, with the QR code from the <a href="https://help.github.com/en/github/authenticating-to-github/configuring-two-factor-authentication">GitHub documentation</a>:</p>
<pre><code>$ zbarimg totp-click-enter-code.png
QR-Code:otpauth://totp/GitHub:LyaLya?secret=qmli3dwqm53vl7fy&amp;issuer=GitHub
scanned 1 barcode symbols from 1 images in 0.03 seconds
</code></pre>
<p>Once you get the secret, put the command line to generate a code using <a href="https://www.nongnu.org/oath-toolkit/oathtool.1.html">oathtool</a> in <code>2fa/github</code> in <code>pass</code> like this:</p>
<pre><code class="language-shell">oathtool --totp --base32 qmli3dwqm53vl7fy
</code></pre>
<p>Finally, add this to your <code>.bashrc</code> (or the equivalent for whatever shell you use):</p>
<pre><code class="language-shell">2fa () { eval $(pass 2fa/$1) ; }
</code></pre>
<p>You can now get your 2FA codes like this:</p>
<pre><code>$ 2fa github
795864
</code></pre>
<p>All the tools used in that article are <a href="https://www.archlinux.org/packages/community/any/pass/">available</a> <a href="https://www.archlinux.org/packages/community/x86_64/oath-toolkit/">as</a> <a href="https://www.archlinux.org/packages/extra/x86_64/zbar/">packages</a> in the Arch Linux repositories.</p>
<section id="Complements">
<h2>Complements</h2>
<p>It was <a href="https://lobste.rs/s/abmkdz/2fa_2_factor_authentication_terminal_app">a post on Lobsters</a> that prompted me to post this. <a href="https://lobste.rs/s/abmkdz/2fa_2_factor_authentication_terminal_app#c_c0y9io">Someone from the comments</a> and <a href="https://twitter.com/gawenr/status/1245973593453932544">a former colleague on Twitter</a> told me about <a href="https://github.com/tadfisher/pass-otp">a pass extension</a> I didn&#8217;t know about which does almost the same thing.</p>
<p>Also, some people think that putting 2FA codes in a password manager defeats the purpose. But in practice TOTP 2FA does not really add much more to the security of my accounts than the strong random passwords I generate with pass. The &#8220;second factor&#8221; part isn&#8217;t really the true benefit.</p>
<p>One actual advantage is that nobody on the network can sniff all of my credentials (like digest-based password verification methods). Another, and I think this is the main one, is that the owner of the website has chosen part of the credentials and hence ensured some degree of strength. What I do preserves both of those properties, so I&#8217;m fine with it. By the way, note that password managers like 1Password <a href="https://support.1password.com/one-time-passwords/">do the same thing</a>.</p>
<p>The one thing I could do to really improve the security of the whole thing is use 2FA <strong>to access pass</strong> by storing my GPG key in a Yubikey. I probably will, someday.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Tools</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2020-03-01-tools.html"
    />
    <id>tag:blog.separateconcerns.com,2020-03-01:tools</id>
    <published>2020-03-01T18:00:00Z</published>
    <updated>2023-05-01T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>A few days ago I read <a href="https://acrossapp.com/blog/how-a-2-person-startup-already-uses-28-other-tools">this article</a> which made me want to list some of the tools used at the four startups I have worked at so far.</p>
<p>I have mostly listed SaaS tools here, but you can also check out <a href="https://pinboard.in/u:catwell/t:~stack/">the ~stack tag on my Pinboard</a> for more.</p>
<p>I have also added a section at the end for some tools I use for my own projects.</p>
<section id="Moodstocks-2010---2013">
<h1>Moodstocks (2010 - 2013)</h1>
<ul>
<li>
<a href="https://www.fastmail.com">Fastmail</a> - E-mail
</li>
<li>
<a href="https://github.com">GitHub</a> - Code hosting &amp; issues
</li>
<li>
<a href="https://basecamp.com">Basecamp</a> - PM
</li>
<li>
<a href="https://basecamp.com/retired/campfire">Campfire</a> - Chat &amp; Customer Support
</li>
<li>
<a href="https://www.salesforce.com">Salesforce</a> - CRM
</li>
<li>
<a href="https://desk.com">Desk.com</a> - Customer Support
</li>
<li>
<a href="https://gandi.net">Gandi</a> - DNS
</li>
<li>
<a href="https://uptimerobot.com">Uptime Robot</a> - Alerting
</li>
<li>
<a href="https://aws.amazon.com">AWS</a> - Hosting
</li>
<li>
<a href="https://mandrillapp.com">Mandrill</a> - Transactional e-mails
</li>
<li>
<a href="https://konghq.com">Kong</a> - API Gateway
</li>
</ul>
</section>
<section id="Lima-2014---2019">
<h1>Lima (2014 - 2019)</h1>
<ul>
<li>
<a href="https://gsuite.google.com">GSuite</a> - E-mail &amp; Calendar
</li>
<li>
<a href="https://github.com">GitHub</a> - Code hosting, issues &amp; PM
</li>
<li>
<a href="https://www.flowdock.com">Flowdock</a> then <a href="https://slack.com">Slack</a> - Chat
</li>
<li>
<a href="https://www.lucca.fr">Lucca</a> then <a href="https://payfit.com">Payfit</a>
</li>
<li>
<a href="https://segment.com">Segment</a> - Customer workflows
</li>
<li>
<a href="https://customer.io">customer.io</a> - Customer base, emailing
</li>
<li>
<a href="https://www.zendesk.com">Zendesk</a> - Customer support
</li>
<li>
<a href="https://www.invisionapp.com">Invision</a> - Design work
</li>
<li>
<a href="https://www.oneskyapp.com">OneSky</a> - App translation
</li>
<li>
<a href="https://www.talent.io">Talent.io</a> - Hiring
</li>
<li>
<a href="https://gandi.net">Gandi</a> - DNS
</li>
<li>
<a href="https://www.datadoghq.com">Datadog</a> - Monitoring
</li>
<li>
<a href="https://uptimerobot.com">Uptime Robot</a> - Alerting
</li>
<li>
<a href="https://pushover.net">Pushover</a> - Alerting
</li>
<li>
<a href="https://sentry.io">Sentry</a> - Error monitoring
</li>
<li>
<a href="https://www.appveyor.com">AppVeyor</a> - Windows build &amp; CI
</li>
<li>
<a href="https://travis-ci.com">Travis</a> - Build &amp; CI
</li>
<li>
<a href="https://firebase.google.com/">Firebase</a> (<a href="https://get.fabric.io">Fabric</a>&#8230;)
</li>
<li>
<a href="https://aws.amazon.com">AWS</a> (+ many others including <a href="https://www.ovh.com">OVH</a> and <a href="https://www.scaleway.com">Scaleway</a>) - Hosting
</li>
<li>
<a href="https://sendgrid.com">Sendgrid</a> - Transactional e-mails
</li>
<li>
<a href="https://www.cloudflare.com">Cloudflare</a> - CDN
</li>
</ul>
</section>
<section id="Chilli-eFounders-2019">
<h1>Chilli (eFounders, 2019)</h1>
<ul>
<li>
<a href="https://gsuite.google.com">GSuite</a> - E-mail, Calendar, Drive
</li>
<li>
<a href="https://github.com">GitHub</a> - Code hosting
</li>
<li>
<a href="https://slack.com">Slack</a> - Chat
</li>
<li>
<a href="https://slite.com">Slite</a> - EDM
</li>
<li>
<a href="https://airtable.com">Airtable</a> - Process modeling
</li>
<li>
<a href="https://www.pipedrive.com">Pipedrive</a> - CRM
</li>
<li>
<a href="https://trello.com">Trello</a> - PM
</li>
<li>
<a href="https://payfit.com">Payfit</a> - Payroll, Leaves &amp; absences
</li>
<li>
<a href="https://www.spendesk.com">Spendesk</a> - Expenses
</li>
<li>
<a href="https://zoom.us">Zoom</a> - Video calls
</li>
<li>
<a href="https://www.intercom.com">Intercom</a> - Lead acquisition
</li>
<li>
<a href="https://aircall.io">Aircall</a> - Centralized phone calls
</li>
<li>
<a href="https://moqups.com">Moqups</a> - Design work
</li>
<li>
<a href="https://www.invisionapp.com">Invision</a> - Design work
</li>
<li>
<a href="https://analytics.google.com">Google Analytics</a> - Analytics
</li>
<li>
<a href="https://www.squarespace.com">Squarespace</a> - Blog
</li>
<li>
<a href="https://1password.com">1Password</a> - Team password management
</li>
<li>
<a href="https://codility.com">Codility</a> - Hiring (screening)
</li>
<li>
<a href="https://hiresweet.com">Hiresweet</a> - Hiring (sourcing)
</li>
<li>
<a href="https://www.workable.com">Workable</a> - Hiring
</li>
<li>
<a href="https://gandi.net">Gandi</a> - DNS
</li>
<li>
<a href="https://uptimerobot.com">Uptime Robot</a> - Alerting
</li>
<li>
<a href="https://aws.amazon.com">AWS</a> - Hosting
</li>
<li>
<a href="https://www.mailjet.com">Mailjet</a> - Transactional e-mails
</li>
</ul>
</section>
<section id="Inch-2019---2023">
<h1>Inch (2019 - 2023)</h1>
<ul>
<li>
<a href="https://workspace.google.com">Google Workspace</a> - E-mail, Calendar, Drive
</li>
<li>
<a href="https://github.com">GitHub</a> - Code hosting &amp; issues
</li>
<li>
<a href="https://slack.com">Slack</a> - Chat
</li>
<li>
<a href="https://www.notion.so">Notion</a> - EDM
</li>
<li>
<a href="https://www.hubspot.fr">Hubspot</a> - CRM
</li>
<li>
<a href="https://payfit.com">Payfit</a> (previously <a href="https://www.lucca.fr">Lucca</a>) - Payroll, Leaves &amp; absences
</li>
<li>
<a href="https://mixpanel.com">Mixpanel</a> - Analytics
</li>
<li>
<a href="https://www.intercom.com">Intercom</a> - Customer support
</li>
<li>
<a href="https://aircall.io">Aircall</a> - Centralized phone calls
</li>
<li>
<a href="https://uptimerobot.com">Uptime Robot</a> - Alerting
</li>
<li>
<a href="https://rollbar.com">Rollbar</a> - Error monitoring (backend)
</li>
<li>
<a href="https://sentry.io">Sentry</a> - Error monitoring (frontend)
</li>
<li>
<a href="https://scoutapm.com">Scout</a> - APM
</li>
<li>
<a href="https://cloud.google.com">GCP</a> (+ <a href="https://www.ovh.com">OVH</a>) - Hosting
</li>
<li>
<a href="https://mandrillapp.com">Mandrill</a> - Transactional e-mails
</li>
<li>
<a href="https://www.xero.com">Xero</a> - Accounting
</li>
<li>
<a href="https://www.postman.com">Postman</a> - API documentation
</li>
<li>
<a href="https://www.pipefy.com">Pipefy</a> - Customer lifecyce
</li>
<li>
<a href="https://www.vonage.com">Vonage</a> and <a href="https://www.smsmode.com/">smsmode</a> - Transactional SMS
</li>
</ul>
</section>
<section id="Finegrain-2023">
<h1>Finegrain (2023)</h1>
<ul>
<li>
<a href="https://workspace.google.com">Google Workspace</a> - E-mail, Calendar, Drive
</li>
<li>
<a href="https://github.com">GitHub</a> - Code &amp; documentation hosting
</li>
<li>
<a href="https://linear.app">Linear</a> - Project management and issues
</li>
<li>
<a href="https://slack.com">Slack</a> - Chat
</li>
<li>
<a href="https://www.notion.so">Notion</a> - EDM
</li>
<li>
<a href="https://uptimerobot.com">Uptime Robot</a> - Alerting
</li>
<li>
<a href="https://sentry.io">Sentry</a> - Error monitoring
</li>
<li>
<a href="https://vercel.com">Vercel</a> - Frontend platform
</li>
</ul>
</section>
<section id="Personal">
<h1>Personal</h1>
<ul>
<li>
<a href="https://www.fastmail.com">Fastmail</a> - Email
</li>
<li>
<a href="https://github.com">GitHub</a> - Code hosting
</li>
<li>
<a href="https://pinboard.in">Pinboard</a> - Bookmarks
</li>
<li>
<a href="https://gandi.net">Gandi</a> - DNS
</li>
<li>
<a href="https://uptimerobot.com">Uptime Robot</a> - Alerting
</li>
<li>
<a href="https://my.vultr.com">Vultr</a> - Hosting
</li>
</ul>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Opinions</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2019-10-19-opinions.html"
    />
    <id>tag:blog.separateconcerns.com,2019-10-19:opinions</id>
    <published>2019-10-19T15:30:00Z</published>
    <updated>2019-10-19T15:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>You know how some discussions can make you pause and introspect for a while after they happen? Well, I have had such a discussion recently about how strong my opinions are nowadays, and I decided to write something about it.</p>
<section id="Forming-opinions">
<h2>Forming opinions</h2>
<p>People who have spent significant time around me know all too well how I behave when I get interested in a topic. I can spend weeks (and sometimes even much longer) reading all I can find about it until I know its ins and outs. This results in me being able to discuss and have opinions about things which are apparently completely random, but which I ended up picking up along the way for some reason.</p>
<p>For the longest time, I have believed in <a href="https://blog.asmartbear.com/strong-opinions-somewhat-weakly-held.html">strong opinions (somewhat) weakly held</a>, and for the most part I still do. In particular, I agree with the &#8220;somewhat&#8221; part, which says that the strength with which you should hold an opinion depends on how you formed it.</p>
<p>What has changed in the last 5-7 years is my view on how explicit those opinions should be, and how much I should fight for them.</p>
</section>
<section id="Expressing-opinions">
<h2>Expressing opinions</h2>
<p>I was strongly influenced by the Open Source community of the early 2000s where, if you wanted something to happen, you had to state your opinion and be ready to defend it - sometimes ferociously - with arguments. If you didn&#8217;t, you would be ignored.</p>
<p>What outsiders often overlook about this method is that it worked, and it was pretty efficient. Most people got used to it, and in general it did not turn into endless debates, because in the end we had <a href="https://en.wikipedia.org/wiki/Benevolent_dictator_for_life">benevolent dictators</a> to settle the matter.</p>
<p>But a problem I could not see for a long time is that this excludes a lot of people from the discussion. People who, because of their education or the position society put them in, won&#8217;t express their own opinion if it contradicts the current consensus or that of someone they either respect or fear; or people who won&#8217;t engage in anything remotely resembling conflict because that&#8217;s not in their nature.</p>
<p>It is especially easy to ignore the existence of these people when the only way you are communicating is through asynchronous text over the Internet. However they often have very interesting things to say, with different points of view that can make headway or prevent big mistakes.</p>
<p>There are lots of ways to work around that issue, including timeboxing contributions on a topic while keeping them secret, or simply having people in positions of power and people more comfortable with their opinion express it last.</p>
</section>
<section id="Defending-opinions">
<h2>Defending opinions</h2>
<p>Another matter is how much you should fight for your opinion. I am not talking about <a href="https://xkcd.com/386/">the famous XKCD comic</a>, I know I can be this guy sometimes, but that is something else.</p>
<p>Some time ago I was struggling with how to handle disagreement at work, and I became an adept of the way Amazon does things, its <a href="https://www.amazon.jobs/en/principles">Leadership Principles</a>, and in particular Disagree and Commit:</p>
<blockquote>
<p>Leaders are obligated to respectfully challenge decisions when they disagree, even when doing so is uncomfortable or exhausting. Leaders have conviction and are tenacious. They do not compromise for the sake of social cohesion. Once a decision is determined, they commit wholly.</p>
</blockquote>
<p>When organizations follow this principle, it helps a lot with the issue, because it makes it clear that you can - and should - express dissenting opinion, and how you can align on things you do not agree with without making it look like you changed your mind when you did not.</p>
<p>(On a side note, I even think in some cases making dissent mandatory by instituting a <a href="https://www.thestar.com/news/insight/2017/05/21/how-israeli-intelligence-failures-led-to-a-devils-advocate-role.html">Tenth Man / Devil&#8217;s Advocate rule</a> can be beneficial.)</p>
<p>However, it turns out this principle is more complicated than it sounds, and there are two important points I did not immediately understand, which are much more explicit in <a href="https://blog.aboutamazon.com/company-news/2016-letter-to-shareholders">Bezos&#8217; 2016 letter to shareholders</a>.</p>
<p>The first is that the person who &#8220;disagrees but commits&#8221; is not necessarily the subordinate in a power relationship. Bezos says:</p>
<blockquote>
<p>This isn’t one way. If you’re the boss, you should do this too. I disagree and commit all the time. We recently greenlit a particular Amazon Studios original. I told the team my view: debatable whether it would be interesting enough, complicated to produce, the business terms aren’t that good, and we have lots of other opportunities. They had a completely different opinion and wanted to go ahead. I wrote back right away with “I disagree and commit and hope it becomes the most watched thing we’ve ever made.” Consider how much slower this decision cycle would have been if the team had actually had to convince me rather than simply get my commitment.</p>
</blockquote>
<p>The second point I missed is the meaning of the sentence &#8220;they do not compromise for the sake of social cohesion.&#8221; The &#8220;compromise&#8221; part is clear enough; here compromising would have meant giving the green light but with, say, fewer resources. From experience compromises like this often end up poorly. But the hard part is &#8220;for the sake of social cohesion&#8221;. Here is what Bezos has to say:</p>
<blockquote>
<p>Note what this example is not: it’s not me thinking to myself &#8220;well, these guys are wrong and missing the point, but this isn’t worth me chasing.&#8221; It’s a genuine disagreement of opinion, a candid expression of my view, a chance for the team to weigh my view, and a quick, sincere commitment to go their way.</p>
</blockquote>
<p>Unlike Bezos my current (weakly held) opinion is that sometimes keeping social peace is worth not engaging in some minor issues. Some people will always appreciate being told when you think they&#8217;re mistaken, but others won&#8217;t even if they end up admitting they were wrong in the end, so it only makes sense to contradict them if it is worth risking being resented for it.</p>
</section>
<section id="Tolerating-opinions">
<h2>Tolerating opinions</h2>
<p>The first step for all this to work is probably to admit that opinions can exist without being &#8220;right&#8221; or &#8220;wrong&#8221;.</p>
<p>That may be obvious to you but for a long time it was not for me. When I was a kid I looked at things in binary: true or false, right or wrong, better or worse. This made me enjoy CS and math, but paradoxically learning more advanced math (<a href="https://en.wikipedia.org/wiki/Order_theory#Partially_ordered_sets">partial orders</a>, <a href="https://en.wikipedia.org/wiki/Simpson%27s_paradox">Simpson&#8217;s paradox</a>, <a href="https://en.wikipedia.org/wiki/Gödel%27s_incompleteness_theorems">Gödel&#8217;s incompleteness theorems</a>&#8230;) showed me that even in the hardest of sciences things were more nuanced.</p>
<p>Anyway, there are reasons why people come to hold a set of beliefs which makes sense at least locally. Learning about this background is important, whether it helps you convince them or changes your own mind.</p>
<p>Don&#8217;t worry though, I still hold a few strong opinions, both in my field (some quite strongly - you won&#8217;t easily make me change <a href="https://blog.separateconcerns.com/2019-02-15-architecture-principles.html">those</a> for instance) and outside of it!</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Truncating an Alembic migrations history</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2019-06-01-truncating-alembic.html"
    />
    <id>tag:blog.separateconcerns.com,2019-06-01:truncating-alembic</id>
    <published>2019-06-01T19:00:00Z</published>
    <updated>2019-06-01T19:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>In projects that use SQLAlchemy and <a href="https://alembic.sqlalchemy.org">Alembic</a> via <a href="https://flask-migrate.readthedocs.io">Flask-Migrate</a>, you may want to truncate the migrations history. By that I mean: rewrite all the migrations up to some point as a single initial migration, to avoid replaying them every single time you create a new database instance. Of course, you only want to do that if you have already migrated all your database instances at least up to that point.</p>
<p>As far as I know, there is no Alembic feature to do this automatically. However, I found a way to avoid having to write the migration by hand. Here is an example of how you can achieve this with a project using Git, PostgreSQL, and <a href="https://12factor.net">environment variables for configuration</a>.</p>
<p>First, checkout a commit of your project where the first migration you want to keep is the current migration, and create a temporary branch. Then, take a note of the ID of that migration (for instance <code>abcd12345678</code>), delete the whole <code>migrations</code> directory and reinitialize Alembic.</p>
<pre><code class="language-shell">git checkout $my_commit
git checkout -b tmp-alembic
rm -rf migrations
flask db init
</code></pre>
<p>At this point, using Git, revert changes to files where you should keep your changes, such as <code>script.py.mako</code> and <code>env.ini</code>. Then, create a temporary empty database to work with.</p>
<pre><code class="language-shell">git checkout migrations/script.py.mako
git checkout migrations/env.py
createdb -T template0 my-temp-db
</code></pre>
<p>Now create the initial migration that corresponds to your model, with the ID that you noted previously, e.g.:</p>
<pre><code class="language-shell">MY_DATABASE_URI="postgresql://postgres@localhost/my-empty-db" \
    flask db migrate --rev-id abcd12345678
</code></pre>
<p>Finally, you can delete the temporary database, commit your changes to your temporary branch, merge it into your main development branch and delete it:</p>
<pre><code class="language-shell">dropdb my-empty-db
git commit
git checkout dev
git merge tmp-alembic
git branch -D tmp-alembic
</code></pre>

      </div>
    </content>
  </entry>
  <entry>
    <title>Changing the SSH port on Arch Linux</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2019-05-04-ssh-port.html"
    />
    <id>tag:blog.separateconcerns.com,2019-05-04:ssh-port</id>
    <published>2019-05-04T18:00:00Z</published>
    <updated>2020-04-07T10:40:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <section id="April-2020-update">
<h2>April 2020 update</h2>
<p>This article is out of date. Arch Linux <a href="https://bugs.archlinux.org/task/62248">stopped shipping OpenSSH with socket activation</a> due to the risk of DoS attack. Now you can just set <code>Port</code> in <code>sshd_config</code> as usual.</p>
</section>
<section id="Original-article">
<h2>Original article</h2>
<p>I often change the default SSH port from 22 to something else on servers I run. It kind of is a dangerous operation, especially when the only way you have to connect to that server <strong>is</strong> SSH.</p>
<p>The historical way to do this is editing <code>sshd_config</code> and setting the <code>Port</code> variable, but with recent versions of Arch Linux and the default configuration, this will <strong>not</strong> work.</p>
<p>The reason is that SSH is configured with systemd socket activation. So what you need to do is run <code>sudo systemctl edit sshd.socket</code> and set the contents of the file to:</p>
<pre><code>[Socket]
ListenStream=MY_PORT
Accept=yes
</code></pre>
<p>where <code>MY_PORT</code> is the port number you want.</p>
<p>I hope this short post will avoid trouble for other people, at least it will be a reminder for me the next time I have to setup an Arch server&#8230;</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Spicing things up</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2019-04-23-spicing-things-up.html"
    />
    <id>tag:blog.separateconcerns.com,2019-04-23:spicing-things-up</id>
    <published>2019-04-23T21:45:00Z</published>
    <updated>2019-04-23T21:45:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>In my last post I <a href="https://blog.separateconcerns.com/2019-02-15-goodbye-lima.html#what-are-you-going-to-do-next">told you</a> I had plans that I was not ready to talk about yet. Well, the time has come. I am happy to announce that I am now the CTO and co-founder of a startup called <a href="https://www.efounders.com/companies/chilli">Chilli</a>.</p>
<p>Chilli is not a typical startup, it is an <a href="https://www.efounders.com">eFounders</a> project. You may know eFounders as the first startup studio in France, which originated companies such as <a href="https://frontapp.com">Front</a>, <a href="https://aircall.io">Aircall</a> and <a href="https://www.spendesk.com">Spendesk</a>. The way they usually work is that they identify a problem that needs solving and find founders to tackle it, providing them both support and funding in exchange for equity. When the studio was created, I had doubts about the model, but later on I became <a href="https://twitter.com/pchapuis/status/806463326842712067">quite enthusiastic</a> about it.</p>
<p>Most eFounders companies are Software-as-a-Service businesses, and several of them were born of a need identified in traditional SMBs and SMEs. However, many pivoted to serve a different market, either tech companies or enterprises, and we can see the same pattern in other SaaS companies as well. So we end up with software that doesn&#8217;t sell in the market it was originally designed for, and SMBs left on the side of the road with unaddressed digital needs. The reason, we believe, lies with the SaaS-to-SMBs distribution model, and that is the issue Chilli intends to solve.</p>
<p>We are certain that the solution to that problem must involve software. However, we also think technology alone will not be enough; a human touch is necessary, which is why my co-founder and CEO Julien comes from a consulting background. What we will build is a hybrid platform to help leaders identify the pain points in their companies and match them with the best digital tools to solve them. By starting from the customer&#8217;s needs, we will work around the distribution cost issues and become the missing link between SaaS vendors and traditional SMBs and SMEs.</p>
<p>For me, this is a new and exciting challenge. Despite having been a very early employee at startups twice, I have never been a founder yet, and it is something I have wanted to do for a while. Moreover, it means I will be doing a lot of Product and Web development again, which will change from the last five years I spent mostly in the world of systems software in C and Lua.</p>
<p>On that note, our Web stack is (typed) Python 3 / Flask and TypeScript / Angular, and I am looking for a full stack developer to join the team. This is a junior to mid position based in Paris, France (no remote); since most of the work is on the frontend experience with Python is not a requirement. If you are interested, <a href="https://catwell.info">get in touch</a>.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Goodbye Lima</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2019-02-15-goodbye-lima.html"
    />
    <id>tag:blog.separateconcerns.com,2019-02-15:goodbye-lima</id>
    <published>2019-02-15T19:40:00Z</published>
    <updated>2019-02-15T19:40:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>You may have heard it already: five years after I <a href="https://blog.separateconcerns.com/2013-12-12-infinity-beyond.html">joined Lima</a>, the company <a href="https://medium.com/@MeetLima/this-time-its-goodbye-5573a97be7d4">is shutting down</a>.</p>
<p>Obviously, things did not go like we hoped they would. Customers are disappointed, and wondering what will happen now. Let me try to answer some of the questions I read online the best I can.</p>
<blockquote>
<p>Please note that this is my personal take on things, and does not represent the views of anyone else but me (i.e. not Lima, not other employees&#8230;).</p>
</blockquote>
<section id="What-happened-to-the-company-exactly">
<h2>What happened to the company exactly?</h2>
<p>Lima as a company no longer exists. It ran out of money. Its employees (including me) have all been fired, and its assets will be sold to pay its debts.</p>
<p>Regarding why the company died, it is a long story and it is not my place to tell it all. What I can say is that it ran into unexpected funding problems in early 2017, shortly after we started shipping the Lima Ultra. During most of 2017, there was strong demand for the product but we could not fulfill it because we did not have enough cash to pay for production and shipping (Remember the never-ending waiting list?) At the end of the year, we had to fire a large part of the team and we switched our business model to sell our software to other companies. We made a deal where we worked for another startup. The deal was good enough to keep the company afloat and the product alive for a year, but it forced us to stop selling Lima devices. What happened recently is that this deal eventually fell through, leaving us with no viable options.</p>
<p>This past year was not the best time of my life, or for any of the other employees who stayed. Many of us could have left for much better jobs at any time, some did and I cannot blame them. All those who stayed on board all this time did so hoping for a better end for the company and its customers.</p>
</section>
<section id="What-will-happen-to-the-devices">
<h2>What will happen to the devices?</h2>
<p>Once Lima&#8217;s servers shut down, Lima will keep working on your local LAN with the devices you have already paired with it. However, a lot of things will stop working.</p>
<p>First, it won&#8217;t be possible to add new devices to the system. That&#8217;s because, when you log a new device into Lima, you do so with an email and password. To find out which Lima those credentials belong to, the system asks a server, and that server won&#8217;t answer anymore.</p>
<p>Second, it won&#8217;t be possible to reset your password, because email confirmation will be broken. If you have forgotten your password, change it now while the servers are still up.</p>
<p>Third, the sharing feature will be broken, because it relies on sending HTTP requests to relay servers which will go down as well.</p>
<p>Finally, it won&#8217;t be possible to access Lima from outside your home. This is a little harder to explain than the rest. Basically all communications between anything related to Lima (Lima devices, your devices, servers&#8230;) happen in a peer-to-peer VPN. To &#8220;locate&#8221; devices within the VPN (basically figure out how to talk to something), devices rely on a node which is called the ZVPN master. The IP address and public key of that node are hardcoded into every Lima client, and that node will go down as well. The use of that node is not needed on local networks because Lima devices and applications have a protocol to pair with other devices associated to the same account on a LAN without talking to any server.</p>
</section>
<section id="Is-there-a-risk-for-my-personal-data">
<h2>Is there a risk for my personal data?</h2>
<p>At that moment, not that I know of. Your data was never stored on Lima&#8217;s servers, and all data traffic going through relay servers is end-to-end encrypted, which means that even if an attacker took control of one they couldn&#8217;t decipher your data.</p>
<p>However in the long run there are two issues.</p>
<p>First, we won&#8217;t be able to publish updates for the Lima firmware and applications anymore. If a security issue is found in one of the components they use, they may become vulnerable with no way to fix them.</p>
<p>Second, if someone was to acquire all the assets or Lima, including the domain and code signing certificate, they could theoretically do everything Lima was able to do, including publishing updates. That means they could publish malicious updates of the applications and firmware.</p>
<p>That second issue sounds scary but I do not think there is any chance it will happen. Potential acquirers will probably be more interested in Lima&#8217;s technological IP, there are very few chances that an acquirer will get all the assets necessary for such an attack, and even if they do they probably won&#8217;t have an interest in performing it. Even if it did happen, it would be easy to notice. Still, I have to mention it for transparency.</p>
<p>What I will personally do now, and what I advise users to do as well, is <a href="https://lima.gitbook.io/support">export all my data out of Lima</a>, unplug the device and uninstall all the applications.</p>
<blockquote>
<p>Note: If you have problems when trying to recover your data (due to e.g. a hardware issue with the USB drive), <strong>do not</strong> uninstall the applications. The data on your desktop might sometimes help recovering some of the files.</p>
</blockquote>
<p>If you have an issue with the Decrypt Tool, check <a href="https://github.com/catwell/postlima">here</a> for potential answers.</p>
<p>EDIT (2022-02-06): What I feared when I wrote this post did happen a while ago. Someone did get hold of the <code>meetlima.com</code> domain and uses it to host what is clearly a scam. They want you to think they are us, but they are not. I do not think they have performed any attack on the devices themselves, but it is definitely not safe to keep using the original software anymore.</p>
</section>
<section id="What-can-users-replace-Lima-with">
<h2>What can users replace Lima with?</h2>
<p>It depends on the users. I don&#8217;t know anything that is exactly like Lima. There was Helixee, which I have never tried out, but I just found out they are <a href="http://www.helixee.me/end-of-adventure/">shutting down as well</a>. I also learned that a project I had never heard about before called Amber had a <a href="https://www.myamberlife.com/news/an-open-letter-to-lima-customers/">special offer for Lima customers</a>.</p>
<p>For technical people, you can probably do most of what you were doing with Lima with a Synology NAS, or a setup based on some small computer and Open Source software such as <a href="https://nextcloud.com">Nextcloud</a> or <a href="https://cozy.io">Cozy Cloud</a>.</p>
<p>However, Lima was never designed for technical customers. It was built for, marketed to and mostly bought by non-technical people. For them, I don&#8217;t have a good answer. I heard that <a href="https://mycloud.com">WD My Cloud Home</a> had become a lot better than it once was, but I have not tried it personally.</p>
</section>
<section id="Can-you-open-source-the-code">
<h2>Can you open-source the code?</h2>
<p>To the best of my knowledge, there is no way that can happen. This makes me extremely sad, especially since I know there are parts of the code I would <a href="http://lua-users.org/lists/lua-l/2018-11/msg00418.html">love to reuse myself</a>, and that could be useful to other projects.</p>
<p>The reason why we cannot open-source is that the code does not belong to us, the employees, or the CEO. Intellectual property is considered an asset of a bankrupt company, and as such will be sold to the highest bidder to pay the company&#8217;s debts.</p>
<p>That being said, Lima has contributed some source code to a few Open Source projects already. Most importantly we fixed the issues in OSXFUSE that prevented it from being used for something like Lima, and those fixes are now in the main branch.</p>
<p>Completely independently from the company, the former CTO of Lima has also released <a href="https://github.com/gawen/wirehub">a project</a> which looks a lot like a second, fully decentralized iteration of the Lima network layer ZVPN (using a DHT instead of a master node, and WireGuard instead of TLS). Let me be clear: this project contains no code or IP from Lima, it is a clean room implementation.</p>
</section>
<section id="Can-you-give-us-root-access-to-the-device">
<h2>Can you give us root access to the device?</h2>
<p>For Lima Original, no, I think that would be impossible (or rather, I can&#8217;t see a solution that doesn&#8217;t involve soldering&#8230;). The device is not worth much today anyway, its specs are so low I don&#8217;t think you could run any other private cloud software on it.</p>
<p>For Lima Ultra, a few of us ex-Lima employees (and the CEO) are trying to figure out a way to let users get root access. We can&#8217;t promise anything, but we will keep you informed if we do.</p>
<p>EDIT (2019-02-18): <a href="https://github.com/catwell/postlima">We did it, check this out!</a></p>
</section>
<section id="Why-does-it-say-something-different-in-the-Kickstarter-FAQ">
<h2>Why does it say something different in the Kickstarter FAQ?</h2>
<p>Some people have mentioned that what was happening was not in line with what had been said in the <a href="https://www.kickstarter.com/projects/cloud-guys/plug-the-brain-of-your-devices/faqs#project_faq_62443">Kickstarter FAQ</a>.</p>
<p>This FAQ has been written in 2013, before I or any other Lima developer joined the company. At the time Lima was a very small project with two founders trying to raise $70,000 to make their dream happen. Instead they raised $1,229,074, hired 12 people (including me), and the rest is history.</p>
<p>I do not think we have not communicated like that ever since, especially regarding decentralization. As far as what I know we have been transparent that our servers were needed for some major features of the product, as it was obvious the few times they went down. You may ask why we didn&#8217;t amend this page then, and the answer is (I think) that it is technically impossible to edit it after the campaign is over.</p>
<p>Regarding Open Source, I sincerely believe the CEO of Lima would have done it if it was possible, but with the success of the Kickstarter the company had to take VC funding very early on (see below), and from that moment on I do not think it was in his hands.</p>
</section>
<section id="Where-did-all-that-Kickstarter-money-go">
<h2>Where did all that Kickstarter money go?</h2>
<p>OK, let&#8217;s address this last. What Kickstarter money?</p>
<p>Yeah, the founders raised over a million dollar. But do you remember how much the backers paid for those devices? From $59 to $79 each. Well, as bad as the hardware was, it was planned for about 1000 devices, not over 10,000. And it was pretty expensive.</p>
<p>I don&#8217;t know the exact figures, but basically Lima did not make money on those devices, or no significant amount of money at least. Which is why it raised extra cash from VCs just afterwards, to pay the team that worked on the project, the production of more devices to sell, etc&#8230;</p>
<p>If you still think something shady went on with that money, rest assured: when a company like Lima goes bankrupt, its books are closely investigated by the state, which is one of its main creditors. So if you are right, the people responsible will end up in jail. (Spoiler: I really don&#8217;t think it will happen.)</p>
</section>
<section id="What-are-you-going-to-do-next">
<h2>What are you going to do next?</h2>
<p>Yes, I have plans.</p>
<p>No, they are not in any way related to Lima.</p>
<p>I will tell you more next month, probably.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Software Architecture Principles</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2019-02-15-architecture-principles.html"
    />
    <id>tag:blog.separateconcerns.com,2019-02-15:architecture-principles</id>
    <published>2019-02-15T10:20:00Z</published>
    <updated>2019-02-15T10:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>This is just a short post to share what I now consider, after 10 years in the industry (and almost twice as many writing code), my core software architecture principles.</p>
<p>You may or may not agree with them all, but if you design software or systems, you should have a similar list in your head; it really helps a lot when making decisions.</p>
<p>Without further ado, the principles are:</p>
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/Separation_of_concerns">Separation of Concern</a> often trumps not repeating oneself (<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>). In other words, avoiding duplication does not justify introducing coupling.</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/John_Gall_(author)#Gall%27s_law">Gall&#8217;s Law</a>: &#8220;A complex system that works is invariably found to have evolved from a simple system that worked.&#8221;</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway&#8217;s Law</a>: &#8220;Organizations produce designs which are copies of their communication structures.&#8221;</p>
</li>
<li>
<p>When writing code or designing, stop and think &#8220;consequences&#8221;. What will be the impact of what you are doing on the rest of the systems? Could there be adverse side-effects?</p>
</li>
<li>
<p>Think about debuggability in production. There is nothing worse than having your software break and not being able to figure out why. Do not automate things you do not understand.</p>
</li>
<li>
<p><a href="https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to">Write code that is easy to delete, not easy to extend.</a></p>
</li>
</ul>

      </div>
    </content>
  </entry>
  <entry>
    <title>Fixing right click on touchpads in Gnome</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2018-03-30-gnome-touchpad.html"
    />
    <id>tag:blog.separateconcerns.com,2018-03-30:gnome-touchpad</id>
    <published>2018-03-30T19:00:00Z</published>
    <updated>2018-03-30T19:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>If you are like me, maybe you have recently updated your Linux laptop and found out that right click had stopped working on the touchpad. It took me half an hour to figure out why. I was looking at low-level stuff until I realized <code>libinput debug-events</code> saw the right thing:</p>
<pre><code>event11  POINTER_BUTTON    +3.35s
    BTN_RIGHT (273) pressed, seat count: 1
event11  POINTER_BUTTON    +3.49s
    BTN_RIGHT (273) released, seat count:
</code></pre>
<p>It turns out Gnome decided to <a href="https://help.gnome.org/misc/release-notes/3.28/">change the default behavior of touchpads</a> in version 3.28:</p>
<blockquote>
<p>All touchpads now use a gesture for secondary click (the equivalent to right click on a mouse) by default. To use the gesture, keep one finger in contact with the touchpad and tap with another finger. In many cases this replaces tapping areas of the touchpad as the default secondary click method. A choice between the two behaviors is available in the Tweaks application.</p>
</blockquote>
<p>Of course the new behavior is terrible if you use physical clicks, plus you have to re-train your muscle memory&#8230; To revert to clicks in the bottom-right corner, you can use the gnome-tweaks application as advised, or simply this gsettings command:</p>
<pre><code class="language-shell">gsettings set org.gnome.desktop.peripherals.touchpad \
    click-method areas
</code></pre>
<p>But seriously, Gnome developers, if you are going to change an important default like that, why not at least add an option in the obvious place where it belongs?</p>
<p><img alt="gnome-touchpad-settings" src="img/gnome-touchpad-settings.jpg"/></p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Four years at Lima</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2018-01-06-four-years.html"
    />
    <id>tag:blog.separateconcerns.com,2018-01-06:four-years</id>
    <published>2018-01-06T14:10:00Z</published>
    <updated>2018-01-06T14:10:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Today marks the fourth birthday of <a href="https://blog.separateconcerns.com/2013-12-12-infinity-beyond.html">my joining Lima</a>, and it is a good occasion to talk a bit about some of the things I have been doing there.</p>
<section id="Distributed-filesystem-synchronization">
<h2>Distributed filesystem synchronization</h2>
<p>For the public, <a href="https://meetlima.com">Lima</a> makes a device which turns a USB hard drive into personal &#8220;cloud&#8221; data storage. We actually shipped two devices, Lima Original in July 2015 and Lima Ultra in Decemner 2016.</p>
<p>Technically, Lima is really a personal distributed filesystem. Every single machine running a Lima application logged into to the same user account is a node in the system. All nodes keep a copy of all the filesystem metadata, which means the user can always browse the whole file tree, create or remove files, move them around, etc. The actual data, however, may or may not be on the device, which makes it possible to access a multi-terabyte filesystem on a mobile device. In theory, the Lima device is just another node in the system, except it always stores all the data.</p>
<p>To make this all work, we need a mechanism to keep the filesystem metadata synchronized on all nodes. I have designed and implemented the algorithm and protocol behind this. It is tricky, because we always want users to be able to write to their filesystem, even on an offline device, so when devices come back online there may be conflicts to resolve. It is sometimes tempting to do something simple and correct, but which would not result in what the end user would expect. Yes, <a href="http://bravenewgeek.com/distributed-systems-are-a-ux-problem/">distributed systems are a UX problem</a>&#8230;</p>
<p>I can&#8217;t get into too much detail here, this being proprietary technology and all, but I have drawn a lot of inspiration from <a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type">CRDTs</a> as well as older systems like Bayou and WinFS.</p>
</section>
<section id="Minicore:-fitting-into-a-tiny-box">
<h2>Minicore: fitting into a tiny box</h2>
<p>Like I said, in theory, the Lima device just runs a slightly modified Lima application. And in theory, theory and practice are the same thing. But in practice&#8230;</p>
<p>The Lima Original hardware was very limited, with a slow exotic CPU, 32 MB of RAM and 8 MB of Flash. At some point we realized that we would never succeed in running our software on it with reasonably good performance, so shortly before shipping we decided we had to do something radical: write entirely different software for it. We called that software &#8220;minicore&#8221;, and I wrote its first version in a 6-week rush.</p>
<p>Unlike the Lima filesystem, minicore is designed to be very conservative about its use of memory and I/O resources. It uses a different data model and synchronization protocol, which relies on client machines running Lima to do the heavy lifting. It prioritizes what Lima devices have to do best, which is downloading or serving file data.</p>
<p>The trade-off here was a huge increase in the complexity of the system. Minicore itself is not that complex, but we had to introduce a separate protocol between client nodes and Lima devices, and a third protocol to deal with replication between Lima devices (if you add several Lima devices to the same account they mirror one another).</p>
</section>
<section id="Other-things">
<h2>Other things</h2>
<p>I won&#8217;t get into too much detail about all the other things I have written or worked on over the last four years, but important ones include:</p>
<ul>
<li>
our build system, which builds our software and its dependencies on five different OSs and three major architectures ;
</li>
<li>
an integration test suite designed among other things to replicate timing-related edge cases for the synchronization protocol ;
</li>
<li>
our &#8220;identity server&#8221; which lets users log into their account with just an email and a password ;
</li>
<li>
our Lua scripting layer, which I didn&#8217;t implement initially but maintain now, and on which we rely more and more.
</li>
</ul>
</section>
<section id="What's-next">
<h2>What&#8217;s next</h2>
<p>Lately, my role has changed as I have become responsible for software architecture for the whole company. I now work more closely with the developers outside of my team (Core Engineering), who implement the user-facing parts of our stack. I also do some hiring - and by the way, if you are interested, get in touch. :)</p>
<p>All in all, it was four interesting years. Things have not always been easy to say the least, but a relaxing job is not what I expect from a startup anyway. We have some really great people on the team, challenging plans for the future, and we learn a lot, so here&#8217;s to the next years of Lima!</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>knetstat: checking socket options on Linux</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2017-06-11-knetstat.html"
    />
    <id>tag:blog.separateconcerns.com,2017-06-11:knetstat</id>
    <published>2017-06-11T19:10:00Z</published>
    <updated>2017-06-11T19:10:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>A few weeks ago I was debugging network code, and I needed to check if some
sockets were bound with <code>SO_REUSEADDR</code> and/or <code>SO_REUSEPORT</code>. I researched how
I could inspect that, and was surprised to find out that the Linux kernel did
not expose those options to userland.</p>
<p>Thankfully, there is
<a href="https://github.com/veithen/knetstat">a kernel module called knetstat</a>
which lets you do this very easily by adding new files into <code>procfs</code>. When I
found it it only supported TCP, but I needed the information for UDP as well so
I <a href="https://github.com/veithen/knetstat/pull/11">contributed the code</a> to
support it.</p>
<p>If you write networking code on Linux or just run servers, I encourage you to
check it out. It is a nice little tool that can come very handy in some
situations, including when you need to check options like <code>SO_{RCV,SND}BUF</code>.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>A short introduction to Interval Tree Clocks</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2017-05-07-itc.html"
    />
    <id>tag:blog.separateconcerns.com,2017-05-07:itc</id>
    <published>2017-05-07T14:30:00Z</published>
    <updated>2017-09-07T21:15:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <blockquote>
<p>This post is a rough transcription of <a href="http://files.catwell.info/presentations/2017-04-dotscale-itc/">a lightning talk I gave at dotScale
2017</a>.</p>
</blockquote>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/PgCziibErvU?rel=0" frameborder="0" allowfullscreen="true"></iframe>
<p>One of the things I work on at <a href="https://meetlima.com">Lima</a> is master-master
filesystem replication. In this kind of system, we need to
<a href="http://queue.acm.org/detail.cfm?id=2917756">track causality</a>. In a nutshell,
given two events modifying a given piece of data and originating from different
nodes in the system, we want to know if one of those events could have
influenced the other one, or in other words if one of those events
<a href="https://en.wikipedia.org/wiki/Happened-before">&#8220;happened before&#8221;</a> the other
one.</p>
<p>To do that, we use constructs such as
<a href="https://en.wikipedia.org/wiki/Version_vector">Version vectors</a>. The idea is
that we give each node in the system a globally unique identifier, and we
associate it to a counter.</p>
<p><img alt="Version Vector" src="img/itc-vv.png"/></p>
<p>When an event modifying data on a node occurs,
we increment the local value of the corresponding counter by one.</p>
<p><img alt="inc" src="img/itc-vv-inc.png"/></p>
<p>Version Vectors are partially ordered. Given two vectors, if we can find one
such that, for every node, its counter is higher than the other one, then
we say it descends the other one, meaning the related event &#8220;happened after&#8221;
the other one. Otherwise, we say that the vectors are concurrent, and typically
that means we will probably have some kind of data conflict to solve.</p>
<p><img alt="compare" src="img/itc-vv-cmp.png"/></p>
<p>When we merge data changes we also merge the vectors, and to do so we take
the maximum value of the counter for every node.</p>
<p><img alt="merge" src="img/itc-vv-merge.png"/></p>
<p>This works fine in most cases, but there is one case where it breaks down:
highly dynamic systems experiencing a lot of churn. This means systems where
nodes join the system, modify some data, then leave forever. The issue with
such systems is that, even though there may not be a lot of active devices at
any given point in time, the number of unique node identifiers in version
vectors keeps increasing. We call that issue actor explosion.</p>
<p>Interval Tree Clocks are an attempt to solve this problem. Instead of
giving a unique identifier to every node in the system, we take the
real-valued interval <code>[0, 1]</code> and attribute a part of it (not necessarily
contiguous) to every node. On top of it, we draw an integer-valued curve.
We call the combination of the interval share and the curve a stamp.</p>
<p><img alt="stamp" src="img/itc-stamp.png"/></p>
<p>To add a new node to the system, we start from an existing node and we fork it,
meaning we give part of its share of the interval to the new node.</p>
<p><img alt="fork" src="img/itc-fork.png"/></p>
<p>When an event occurs on a node, it increases the height of the curve of its
copy of the stamp anywhere within its share of the interval. Comparison works
similarly to Version Vectors: if the curve of a stamp is above the other one,
it descends it, otherwise the curves intersect and the stamps are concurrent.</p>
<p>When a node wants to leave the system, it merges back with any other node and
surrenders its share of the interval. To merge, we just take the maximum
curve.</p>
<p><img alt="join" src="img/itc-join.png"/></p>
<p>The beauty of this scheme is that a node only has to know about its share of
the interval, not information about all other nodes. There are no globally
unique node identifiers.</p>
<p>If we choose how we increase the height of the curve when an event occurs in a
clever way which I will not detail here, we can ensure the complexity of the
curve remains low. We can then encode it efficiently using a tree-shaped data
structure and a custom binary format, with a size that depends more on the
number of nodes interacting with the data at a given point in time than
on the overall number of nodes which have touched it since inception.</p>
<p><img alt="results" src="img/itc-results.png"/></p>
<p>If you want to know more, I encourage you to read
<a href="http://haslab.uminho.pt/cbm/files/itc.pdf">the 2008 paper</a> by Paulo Sérgio
Almeida, Carlos Baquero and Victor Fonte; it is one of the best I know on the
topic of causality. You can also check out <a href="https://github.com/catwell/itc.lua">my Lua implementation of
ITC</a> or one of the other implementations
linked in the README.</p>
<blockquote>
<p>If this kind of thing interests you and you live in - or would like to
relocate to - Paris (France), there may be a place for you on my team at Lima.
Don&#8217;t hesitate to <a href="https://catwell.info">get in touch</a>.</p>
</blockquote>

      </div>
    </content>
  </entry>
  <entry>
    <title>Goodbye Lua Toolbox</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2016-12-22-goodbye-lua-toolbox.html"
    />
    <id>tag:blog.separateconcerns.com,2016-12-22:goodbye-lua-toolbox</id>
    <published>2016-12-22T08:00:00Z</published>
    <updated>2016-12-22T08:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>In November 2013, I gave
<a href="http://files.catwell.info/presentations/2013-11-lua-workshop-lua-ecosystem">a talk</a>
about the Lua Ecosystem at <a href="https://www.lua.org/wshop13.html">Lua Workshop</a>, in
which I mentioned that finding the best module for some job could be hard and
introduced a website I had built to solve that problem.</p>
<p>That website, Lua Toolbox, was inspired by the popular
<a href="https://www.ruby-toolbox.com/">Ruby Toolbox</a>. It had two major features:
modules classification (&#8220;labels&#8221;) and endorsements by users. I had written it
using Leaf Corcoran&#8217;s relatively new Lua Web framework,
<a href="http://leafo.net/lapis/">Lapis</a>, and Redis as the datastore.</p>
<p><img alt="Lua Toolbox homepage" src="img/lua-toolbox.jpg"/></p>
<p>In August 2014, MoonRocks, one of Leaf&#8217;s many projects, became the official
website for LuaRocks. It offered many features including user accounts,
manifests and the ability to upload rocks on the Web. We quickly
<a href="https://github.com/catwell/lua-toolbox/issues/18">started to discuss</a>
merging Lua Toolbox into MoonRocks, but it led nowhere at first and the two
websites continued their separate lives.</p>
<p>Eventually, in March 2016, Etiene Dalcol
<a href="https://github.com/luarocks/luarocks-site/pull/86">took up the project</a>.
By September her and Leaf had written the code for labels and &#8220;follows&#8221;,
which replace endorsements. They also added a feature for users to convert
their Toolbox endorsements to LuaRocks follows. I sent them a data dump which
they imported into the production LuaRocks website, and I turned Lua Toolbox
read-only.</p>
<p>Today, I finally replaced the whole website by
<a href="https://lua-toolbox.com">a static page</a>
redirecting users to LuaRocks. In the end, the Toolbox had 232 users and
referenced 1217 modules. The source code
<a href="https://github.com/catwell/lua-toolbox">remains available</a> but
I would not advise you to do anything with it (it uses old Lapis APIs, from
a time where plain Lua support was not official).</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Thoughts 2</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2016-12-07-thoughts-2.html"
    />
    <id>tag:blog.separateconcerns.com,2016-12-07:thoughts-2</id>
    <published>2016-12-07T22:35:00Z</published>
    <updated>2016-12-07T22:35:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <section id="On-Call">
<h2>On Call</h2>
<p><a href="https://twitter.com/alicegoldfuss">Alice Goldfuss</a> started
<a href="https://dbsmasher.com/2016/12/07/on-being-on-call/">a debate</a> about having
developers on call. I am firmly in the camp of those who think it is a good
thing, probably because I was a sysadmin before being a software engineer.
But this means those developers must have the power to refuse to ship broken
code that may make the pager go off as well.</p>
<p>In fact, it is all about fostering the sense of ownership, which is the N.1
trait I look for in developers. And this won&#8217;t be the first time I have
<a href="https://twitter.com/pchapuis/status/222690433308966913">quoted great people</a>
<a href="https://blog.separateconcerns.com/2013-03-24-vogels-skills.html">saying similar things</a>!</p>
</section>
<section id="The-value-of-metrics">
<h2>The value of metrics</h2>
<p>Here is something people who haven&#8217;t worked in B2B software companies may not
understand: sometimes knowing your product&#8217;s metrics, how its users behave and
the market it is operating in can be more valuable than the product itself.
Small B2B2C software vendors often end up knowing things about their (huge)
customers&#8217; clients that the customers themselves don&#8217;t.</p>
<p>What that means is: if you provide third-party software to your users, ask the
third-party vendor what data points they collect, what they can do with them,
and if they can feed them back to you. And if you are the third-party vendor,
consider the value of that data, and maybe find clever ways to turn it into a
competitive advantage.</p>
</section>
<section id="Why-did-the-robot-do-that">
<h2>Why did the robot do that?</h2>
<p><a href="https://insights.sei.cmu.edu/sei_blog/2016/12/why-did-the-robot-do-that.html">Explaining why AI makes decisions</a>
is going to be very important in the years to come. Trusting algorithms is
hard for humans. This slows down adoption and progress the most in areas that
<a href="https://twitter.com/CalebWatney/status/747772853102084097">really</a>
<a href="https://blog.separateconcerns.com/2015-11-06-e-voting.html">matter</a>. So we
need a way to let concerned people &#8220;feel&#8221; why machines do things the way they
do it. Because writing papers is nice, but we all know simply telling people to
trust experts is never going to work. This means those topics are now
<a href="https://blog.separateconcerns.com/2016-09-16-thoughts-1.html#distributed-systems-are-a-ux-problem">also UX problems</a>.</p>
</section>
<section id="Can't-you-just">
<h2>Can&#8217;t you just&#8230;?</h2>
<p>Someone made <a href="http://cantyoujust.no/">a nice web page</a> to answer a question we
hear pretty often. :)</p>
</section>
<section id="Applications-and-Data">
<h2>Applications and Data</h2>
<p>Here is something I have been believing in for a long time: there is no good
technical reason why most Web-based application vendors force you to store
your data on <strong>their</strong> servers. It should be possible to use, say, a presentation
application from Google to edit slides stored on Microsoft&#8217;s servers.</p>
<p>Sadly, for reasons that probably have a lot to do with business models,
things like
<a href="https://unhosted.org/adventures/7/Adding-remote-storage-to-unhosted-web-apps.html">remoteStorage</a>
did not really take off. But I hope someone will revisit that idea someday,
and find a way to make it take off.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Thoughts 1</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2016-09-16-thoughts-1.html"
    />
    <id>tag:blog.separateconcerns.com,2016-09-16:thoughts-1</id>
    <published>2016-09-16T17:00:00Z</published>
    <updated>2016-09-16T17:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <section id="Thoughts">
<h2>Thoughts</h2>
<p>I have not found the motivation to write here for a while, so I will be trying
something new. This is the first of a series of posts which will be composed of
a few smaller unrelated snippets, mostly things I would usually post in a
smaller form on Twitter. They will relate to anything I will have found
interesting recently. Some will be practical and some will just be reflections
about a given topic.</p>
</section>
<section id="MSYS2">
<h2>MSYS2</h2>
<p>If, like me, you are mostly a Linux user but sometimes have to work on a
Windows machine, have a look at <a href="https://msys2.github.io/">MSYS2</a>. It allows
you to quickly get a decent environment set up, with Bash and a package manager,
(<a href="https://www.archlinux.org/pacman/">pacman</a>), which you can use to install
things like Git.</p>
</section>
<section id="Sailfish">
<h2>Sailfish</h2>
<p>I have had my <a href="https://jolla.com/jollac/">Jolla C</a> for two months now. I have
not spent as much time as I would like playing with it, but so far I am pretty
happy with Sailfish. Like <a href="https://en.wikipedia.org/wiki/WebOS">WebOS</a>, it
relies heavily on gestures, which makes most of the features of the phone
usable with the thumb of a single hand. There are not many applications in
the store so far but the default applications are good in general and most
Android applications work well, I could run <a href="https://meetlima.com">Lima</a> on it
without any problem for instance.</p>
<p>From a programmer&#8217;s point of view, it is all I hoped for. I went from zero to
Hello World on the device in less than an hour. Coding happens in QT Creator
and the UI of the application is described with
<a href="https://en.wikipedia.org/wiki/QML">QML</a>. The SDK ships with an emulator that
runs in VirtualBox, but also with a second virtual machine which is used to
compile code, which means you don&#8217;t have to install a cross-compiler on your
local machine. Applications, which are technically RPM packages, can be deployed
to hardware devices via USB or SSH over WiFi.</p>
<p>It also has to be noted that the native terminal application is very good,
much better than anything I saw on Android. A SSH client is included so it
can occasionally be used to log into a server.</p>
<p>The main reason I have not made that device my main phone yet is that its
battery life is much worse than that of my Android phone, but hopefully that
is something that can be solved.</p>
</section>
<section id="The-fractal-dimension-of-software">
<h2>The fractal dimension of software</h2>
<p>I stumbled upon <a href="https://twitter.com/jtolds/status/758716505320075266">an insightful tweet</a>
about software development time estimation. The larger the tasks we try to
estimate, the more wrong we will be. Maybe an estimate as a single number
representing time is not enough; maybe we should also try to figure out
the <a href="https://en.wikipedia.org/wiki/Fractal_dimension">fractal dimension</a>
of the job to be done.</p>
</section>
<section id="Distributed-systems-are-a-UX-problem">
<h2>Distributed systems are a UX problem</h2>
<p>Everyday I grow more convinced that
<a href="http://bravenewgeek.com/distributed-systems-are-a-ux-problem/">this is true</a>.
Not only of failure conditions, but even more so of things like reconciliation
strategies in case of causally concurrent events, for instance how to represent data with <a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type">CRDTs</a>.</p>
<p>It is a problem, because people doing distributed systems often either do not
want to do UX, do not have the competence to do it, or just do not have the
permission. We tend to be at the bottom of the stack, and some people think it
would be a disaster to let us work on anything user-facing. On the other hand,
most people actively doing UX do not understand or care for distributed systems
issues.</p>
<p>The result of this is that, if we design without taking technical constraints
into account, we end up with systems that cannot be implemented without relying
on central authority. Add to that the fact that it is almost always much easier
to implement something in a centralized way, and you have one reason why the
Cloud is winning and distributed alternatives to popular services never seem
to take off.</p>
</section>
<section id="Palm">
<h2>Palm</h2>
<p>I stumbled upon two fantastic documents related to Palm recently. The first
is a series of blog posts called
<a href="http://lowendmac.com/2016/a-history-of-palm-part-1-before-the-palmpilot/">A History of Palm</a>.
Very interesting, even though I disagree with the conclusion of the fifth
post. What killed the Pre line at HP was not that WebOS did not take off; they
never let it a chance to. I have been using a Pre 3 for a long time (I had
pre-ordered it so I was one of the lucky few to have it in France) and it was
a fantastic device, extremely influential on future evolutions of both iOS and
Android (after all, the interface was the brainchild of
<a href="https://en.wikipedia.org/wiki/Mat%C3%ADas_Duarte">Mathias Duarte</a>). What ended
Palm&#8217;s legacy was the
<a href="https://en.wikipedia.org/wiki/Mark_Hurd#Resignation">eviction of Mark Hurd</a>
and his replacement with
<a href="https://en.wikipedia.org/wiki/L%C3%A9o_Apotheker">Léo Apotheker</a>,
who hates hardware. Probably one of the worst mistakes the HP board ever made.</p>
<p>The second document is the
<a href="designingmlearning.com/resources/ZenOfPalm.pdf">Zen of Palm</a>,
a design guide for Palm OS from 2003 which is still pretty relevant today
in some ways.</p>
</section>
<section id="Is-preemption-the-root-of-all-evil">
<h2>Is preemption the root of all evil?</h2>
<p>Two decades years ago <a href="https://en.wikipedia.org/wiki/Computer_multitasking#Cooperative_multitasking">cooperative scheduling</a> was more frequent than
preemptive scheduling. Windows 3.1 was completely cooperatively scheduled,
which means that all applications had to yield to the system scheduler, or
they would block the whole system. In Mac OS 9, the threading API was
cooperative as well within a process, even though different applications would
be scheduled preemptively by the kernel.</p>
<p>Modern OSs do not make much distinction between a thread and a process anymore,
threads are basically processes which share memory, and they are scheduled
preemptively. I have come to think that this design results in code of lower
quality, and which is harder to reason about. Of course, it is still possible
to use event loops or programming languages which do their own preemptive
scheduling (like Lua)&#8230;</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>The LMDB file format</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2016-04-03-lmdb-format.html"
    />
    <id>tag:blog.separateconcerns.com,2016-04-03:lmdb-format</id>
    <published>2016-04-03T23:00:00Z</published>
    <updated>2016-04-03T23:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>At <a href="https://meetlima.com">Lima</a>, we use
<a href="http://symas.com/mdb/">the LMDB database</a> extensively, and we looked into its
source code in order to debug a few issues we had. To help us diagnose broken
databases, and also because I wanted to learn more about it, I wrote <a href="https://github.com/catwell/cw-lua/tree/master/lua-mdb">a parser
for the LMDB database file format in
Lua</a> in my spare time,
which I published under the Open Source MIT license.</p>
<p>In this post, I will give an overview of how a data.mdb file is structured.
Note that I will sometimes skip over some things and operate under the
assumption that you are running on a little-endian platform with 4 kB pages,
etc.</p>
<section id="Portability">
<h2>Portability</h2>
<p>The first thing to know is that the data.mdb format is platform-specific,
which means that you cannot necessarily open a database created on a machine
on another one. In practice, on ARM and x86, the only thing you have to care
about is whether the machine is 32 or 64 bits. On a 64 bit machine, you can
read the data from a 32 bit database by exporting it to a text format using
the <code>mdb_dump</code> utility compiled in 32 bits and reimporting it with a 64 bits
<code>mdb_load</code>. With lua-mdb, you can read a 32 bits database directly by passing
the <code>bits</code> option to the constructor.</p>
</section>
<section id="Pages">
<h2>Pages</h2>
<p>A data.mdb file is made to be mapped into memory, and as such is organized into
a set pages of 4 kB. All pages start with a header which contains the page
number and some flags which determine the type of the page. For all page types
except overflow pages, the header also includes the bounds of the free space
in the page.</p>
</section>
<section id="Meta-pages">
<h2>Meta pages</h2>
<p>The first two pages (page numbers 0 and 1) are called meta pages. Meta pages
start with a magic number (<code>0xBEEFC0DE</code>), a version (currently 1), and the
address and size of the memory mapping. The address is only valid if the
mapping is fixed,
i.e. if LMDB is used with the option <code>MDB_FIXEDMAP</code>.</p>
<p>After that, we find two structures describing what LMDB calls databases.
The first one is the &#8220;free&#8221; database, which is used to track free pages,
and the second one is the &#8220;main&#8221; database.</p>
<p>Finally come the number of the last page used in the file and the ID of
the last transaction that wrote to the page successfully. Indeed, those meta
pages is the mechanism LMDB uses to implement
<a href="https://en.wikipedia.org/wiki/Multiversion_concurrency_control">MVCC</a>.
There can be a single writer at a time, and it will always write to page ID
<code>N % 2</code>, where <code>N</code> is the current write transaction ID. Meanwhile, readers will
read page <code>N % 2 + 1</code>, providing readers - writer isolation. This means that,
when opening a .mdb file, the latest data can be found in the databases pointed
to by the meta page with the highest transaction ID.</p>
</section>
<section id="Databases">
<h2>Databases</h2>
<p>As we saw, a meta page contains two structures describing databases. Databases
in LMDB are technically B+ trees. The structures contain some environment flags
used at runtime, information about the tree including its depth, the number
of pages of each type and the total number of entries, and finally the page
number of the root of the tree.</p>
<p>Pages of the tree itself can be one of three types: branch pages, leaf pages
and overflow pages. There are two other types (<code>BRANCH2</code> and <code>SUBP</code>) which are
only used with specific DB options (<code>MDB_DUPFIXED</code> and <code>MDB_DUPSORT</code>) and that
we will ignore.</p>
</section>
<section id="Branch-pages">
<h2>Branch pages</h2>
<p>Branch pages represent internal nodes of the tree. After the header, they
contain an array of &#8220;pointers&#8221; (technically, 16 bit indices within the page)
to &#8220;branch nodes&#8221; within that page. The number of branch nodes, which is the
number of keys in the page, can be deduced from the boundaries of the free
space in the header.</p>
<p>Branch nodes are allocated from the bottom of the page up. They start with a
page number, then a key prefixed by its size. Branch node pointers are sorted
according to the key and the current key comparison function, and the page
number indicates the page which should be visited to look up keys between the
key of the node (included) and the key of the next node. That page can be a
branch or a leaf.</p>
</section>
<section id="Leaf-pages">
<h2>Leaf pages</h2>
<p>Like branch pages, leaf pages start with a number of pointers to leaf nodes.
Leaves store the actual keys and values contained into the DB. Small values
are stored in the leaf node itself and large values are stored in overflow
pages.</p>
<p>Leaf nodes are slightly more complex than branch nodes. They contain flags,
which determine if the value is contained in the node or in an overflow page,
and the key which corresponds to the node. For small values, they contain the
value itself, and for larger values they contain the page number of the
corresponding overflow page.</p>
</section>
<section id="Overflow-pages">
<h2>Overflow pages</h2>
<p>Large values are stored in so-called overflow pages. Those pages are pretty
simple: after the header, they contain the raw value (not prefixed by its size).
This value can be larger than the size of a page, which explains the name:
they overflow on later pages. Note that this means those later pages do not
start by the usual header.</p>
</section>
<section id="Learning-more">
<h2>Learning more</h2>
<p>I have explained the basics of the data.mdb file format. Should you have to
debug broken databases, it will help you get started. If you need more, read
<a href="https://github.com/catwell/cw-lua/tree/master/lua-mdb">the lua-mdb source code</a>
or <a href="https://github.com/LMDB/lmdb">the LMDB source code</a> (it is only about 10000
lines, although sometimes not easy to understand given that its author adopts a
style that favors performance to readability).</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Five books I read in 2015</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2016-01-03-five-books-2015.html"
    />
    <id>tag:blog.separateconcerns.com,2016-01-03:five-books-2015</id>
    <published>2016-01-03T11:40:00Z</published>
    <updated>2016-01-03T11:40:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>It is that time of the year where my RSS feed fills with book recommendations,
so I decided I would try my hand at the exercise this year and write a short
paragraph about five books I read in 2015 that left me with a good impression.</p>
<p>Disclaimer: links, as those on my <a href="https://catwell.info/booklist/">reading list</a>,
are Amazon Affiliate links, which means I may earn a little money if you buy
books after clicking on them.</p>
<section id="The-Year-Without-Pants---Scott-Berkun">
<h2><a href="http://amzn.to/1NuJ5AR">The Year Without Pants - Scott Berkun</a></h2>
<p>Scott Berkun was a management writer and consultant when he was hired by
WordPress. Before that, he had been a UX designer and team lead at Microsoft,
on the Internet Explorer project. When he joined WordPress, the company had
over 50 employees, it was completely flat and had a culture of remote work.
The founder wanted to experiment with a team-based structure, and Scott was
to be the first team lead.</p>
<p>The book is not a story about how WordPress was a doomed company, and how
Scott came in to save the day. On the contrary, WordPress was already working
much better than most companies that size, and Scott was part of a series of
changes they implemented to scale to the next level without losing too much
of their culture.</p>
<p>That culture, rooted in Open Source and documented by Berkun, an outsider,
is what makes the book interesting. I would say it is a must read for
anybody considering starting or leading a team at a small software company.</p>
</section>
<section id="The-Open-Organization---Jim-Whitehurst">
<h2><a href="http://amzn.to/1NktPAS">The Open Organization - Jim Whitehurst</a></h2>
<p>This book is somehow similar to the one above, but on a larger scale.
Jim Whitehurst is the current CEO of Red Hat, a company with over $1.5B in
yearly revenue, over 8000 employees, and a culture firmly rooted in Open
Source (I started using Linux with their distribution, Red Hat 6.2, in 2000).</p>
<p>Before joining Red Hat, Whitehurst was COO of Delta Airlines. When he arrived
at Red Hat, he quickly realized it was a company that worked in a very
different way, following the core values of Open Source, transparency and
meritocracy (Whitehurst uses the word with the meaning it had in the
Free Software community in the 90s and 00s, without the background that makes
it controversial nowadays).</p>
<p>The book is both analytical and prescriptive, and it shows how the way
Open Source projects are organized can be successfully adopted by a large
company.</p>
</section>
<section id="The-Systems-Bible-Systemantics---John-Gall">
<h2><a href="http://amzn.to/1NuKgQO">The Systems Bible (Systemantics) - John Gall</a></h2>
<p>A 1975 classic. Gall is a (retired) pediatrician, but he is well-known in
software engineering circles for this book which contains, among other things,
what is now known as Gall&#8217;s Law:</p>
<blockquote>
<p>A complex system that works is invariably found to have evolved from a simple
system that worked. A complex system designed from scratch never works and
cannot be patched up to make it work.</p>
</blockquote>
<p>The book is a curious mix of humor and philosophy, written in faux-scientific
style and full of things which people working in Distributed Systems will be
painfully aware of:</p>
<blockquote>
<p>In complex systems, malfunction and even total non-function may not be
detectable for long periods, if ever.</p>
</blockquote>
<blockquote>
<p>Any large system is going to be operating most of the time in failure mode.</p>
</blockquote>
<blockquote>
<p>Intermittent failure is the hardest case.</p>
</blockquote>
<blockquote>
<p>One does <strong>not</strong> know all the expected effects of known bugs.</p>
</blockquote>
<blockquote>
<p>In setting up a new system, tread softly. You may be disturbing another
system that is actually working.</p>
</blockquote>
<blockquote>
<p>Bad design can rarely be overcome by more design, whether good or bad.</p>
</blockquote>
<blockquote>
<p>A system that ignores feedback has already begun the process of terminal
instability.</p>
</blockquote>
<blockquote>
<p>In dealing with large systems, the striving for perfection is a serious
imperfection.</p>
</blockquote>
<p>Remember: this book is originally not about <strong>computer</strong> systems. Not at all.
But read it anyway!</p>
</section>
<section id="The-Four-Steps-to-the-Epiphany---Steve-Blank">
<h2><a href="http://amzn.to/1Himm61">The Four Steps to the Epiphany - Steve Blank</a></h2>
<p>I have read <a href="http://amzn.to/132XE3z">several</a> <a href="http://amzn.to/1HikaeJ">other</a>
<a href="http://amzn.to/1eXLEJF">books</a> <a href="http://amzn.to/18xfzCx">about</a> Lean Startup,
but this is the one I would recommend now, especially if you already have
some experience with startups.</p>
<p>It exposes the Customer Development model, composed of four steps:
Customer Discovery, Customer Validation, Customer Creation and Company
Building. The most interesting ones, in my opinion, are the first two,
the ones that occur before Product / Market Fit.</p>
<p>Read this book if you want to understand what this Lean Startup thing is
about, and offer it to your friends who want to start their own business.</p>
</section>
<section id="Flash-Boys:-Not-So-Fast---Peter-Kovac">
<h2><a href="http://amzn.to/1Pwcp90">Flash Boys: Not So Fast - Peter Kovac</a></h2>
<p>This book is an answer to Michael Lewis&#8217; Flash Boys and a defence of
High-Frequency Trading.</p>
<p>I have long thought that the financial world used HFT as a scapegoat
(especially since I read
<a href="https://www.chrisstucchio.com/blog/2012/hft_apology.html">Chris Stucchio&#8217;s blog</a>).
Flash Boys: Not So Fast follows the structure of Lewis&#8217; book; it provides a
nice overview of what HFT is and why it may not be as evil as you think it is.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Electronic Voting</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2015-11-06-e-voting.html"
    />
    <id>tag:blog.separateconcerns.com,2015-11-06:e-voting</id>
    <published>2015-11-06T23:20:00Z</published>
    <updated>2015-11-06T23:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>French politician Axelle Lemaire
<a href="https://twitter.com/axellelemaire/status/662247104123904001">tweeted</a>
today that, like half of French voters, she was in favor of electronic voting.
This tweet has resulted in a strong reaction among most of my techno-saavy
friends which could be summed up as &#8220;OMG no, e-voting cannot be secure,
please educate yourself&#8221;.</p>
<p>On this topic, my views differ with the majority opinion among people in
technology, even though I support the same organizations fighting abuses
in e-voting such as
<a href="https://www.eff.org/issues/e-voting">Electronic Frontier Foundation</a>.</p>
<p>If you speak French, please read
<a href="http://binaire.blog.lemonde.fr/2015/01/19/quest-ce-quun-bon-systeme-de-vote/">these</a>
<a href="http://binaire.blog.lemonde.fr/2015/01/29/le-vote-papier-est-il-reellement-plus-sur-que-lelectronique/">three</a>
<a href="http://binaire.blog.lemonde.fr/2015/03/16/les-bonnes-proprietes-dun-systeme-de-vote-electronique/">articles</a>
by LORIA reasearcher Véronique Cortier. They may change your mind on e-voting
somehow. In particular, she argues that, although e-voting cannot be as secure
as physical voting, it could very well be better than absentee voting.</p>
<p>Véronique is one of the researchers working on
<a href="http://belenios.gforge.inria.fr/">Belenios</a>, which is
<a href="https://github.com/glondu/belenios">Open Source</a> and
<a href="http://www.loria.fr/~cortier/Belenios.pdf">scientifically proven</a>
e-voting software. Belenios provides privacy, verifiability and full
correctness, properties which many erroneously think cannot be satisfied
simultaneously.</p>
<p>I am not denying that there are issues that will be hard or impossible to
solve. The two main ones, for me, are the security of client terminals and
the capacity for random citizen to trust the process. Indeed, understanding
and verifying something like Belenios requires relative proficiency in
math and computer science. I am willing to let the scientific community
do that work, but some consider this view elitist.</p>
<p>However, I would like to see more research and experiments with e-voting.
I think that making the organization of votes easier and cheaper will allow
our political systems to evolve towards something where citizen have more
direct influence on the democratic process.</p>
<blockquote>
<p>I have to disclose that I know one of the authors of Belenios
(<a href="http://stephane.glondu.net/">Stéphane Glondu</a>) personally, which is how I
came to learn about systems like Helios and Belenios in the first place.</p>
</blockquote>

      </div>
    </content>
  </entry>
  <entry>
    <title>Four easy reads to understand distributed systems issues</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2015-07-07-four-easy-reads-distsys.html"
    />
    <id>tag:blog.separateconcerns.com,2015-07-07:four-easy-reads-distsys</id>
    <published>2015-07-07T09:00:00Z</published>
    <updated>2016-05-16T17:20:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Even among software people, those of us who work with distributed systems and algorithms are sometimes seen as mad scientists. We use words like like consistency, causality, consensus, commutativity, idempotence, immutability and &#8220;impossibility theorems&#8221;. How come we have to read papers and tear our hair out just to make software run correctly on a few machines? Are we all failed academics incapable of pragmatism?</p>
<p>I have selected four documents to help you understand the kind of things we spend our days thinking about, the physical limits we work with and the trade-offs we make. You may want to read them, because distribution is becoming the norm rather than the exception, so you may have to think about at least some of those issues sooner than you expected. Those are simple documents that any programmer should be able to read. Only the last one is an actual paper, and it is a simple position paper with no math, I promise.</p>
<section id="There-is-No-Now">
<h2><a href="https://queue.acm.org/detail.cfm?id=2745385">There is No Now</a></h2>
<p>Most distributed systems are <strong>asynchronous</strong>, which means that the usual notion of time does not make sense within them. This article by Justin Sheehy, former Basho CTO (now at VMWare), published in ACM Queue in March 2015, is about that fact and its consequences. It inspired me to make this list, because as soon as I read it my first thought was that I should share it with all of my colleagues and every single person I will ever work with. It introduces two important impossibility theorems (FLP and CAP) and adversarial models, discusses the existence of &#8220;reliable&#8221; clocks and networks, and touches on some solutions such as consensus protocols and CRDT.</p>
</section>
<section id="Eventually-Consistent---Revisited">
<h2><a href="http://www.allthingsdistributed.com/2008/12/eventually_consistent.html">Eventually Consistent - Revisited</a></h2>
<p>This 2008 blog post by Werner Vogel (Amazon CTO) explains the trade-off between availability and consistency, introduces consistency models, and hints at the relationship between the replication factor of data and the level of consistency that can be achieved. If you want to go further after that, you can read the famous Dynamo paper (which is not too complicated), preferably in <a href="http://docs.basho.com/riak/2.0.1/theory/dynamo/">its version annotated by Basho</a>.</p>
</section>
<section id="Distributed-systems-for-fun-and-profit">
<h2><a href="http://book.mixu.net/distsys/">Distributed systems for fun and profit</a></h2>
<p>This document, by Mikito Takada (Trifacta), is longer than the others. It is the best short (meaning: not a whole course or book) introduction to distributed systems I know. In a nutshell, it expands on the ideas presented in the first two documents and gives you most of the necessary concepts and vocabulary to understand actual distributed systems papers, should you want to read them.</p>
</section>
<section id="Building-on-quicksand">
<h2><a href="http://www-db.cs.wisc.edu/cidr/cidr2009/Paper_133.pdf">Building on quicksand</a></h2>
<p>I could hardly leave that 2009 paper by Pat Helland and Dave Campbell out of this list. It starts with the idea that, as the distribution of systems increases, latency makes synchronicity intractable and pushes us towards asynchronous designs. The rest of the paper is a discussion of the trade-offs involved. The very interesting idea in that paper (also found in other papers by Pat Helland) is that it all comes down to a problem of risk management and reconciliation. If asynchronous software can not ensure something will happen, it may make a guess and fix the result later if it was wrong. That may include having to make excuses to an actual human being. An important corollary is that the distributed nature of software permeates <a href="http://bravenewgeek.com/distributed-systems-are-a-ux-problem/">all the way to the user interface</a> (which is why you may have seen me ranting about how we need to start forming cross-functional teams, with developers who understand UX and designers who get distributed systems).</p>
</section>
<section id="Bonus:-Why-Logical-Clocks-are-Easy">
<h2>Bonus: <a href="http://queue.acm.org/detail.cfm?id=2917756">Why Logical Clocks are Easy</a></h2>
<p>I said on Hacker News that, if I wrote that article today (in May 2016), I would add this article to the list. I <a href="https://news.ycombinator.com/item?id=11690113">was advised</a> to edit the original blog post, so I did.</p>
<p>Published in April 2016 in ACM Queue, this article by Carlos Baquero and Nuno Preguiça may be the best introduction to causality I know. Causality is a very important concept in distributed systems. In a nutshell, the idea is to answer the question: given two events, could one have influenced the other? In other words: when the entity performing the second event did, dit it have any knowledge that the first happened? This article introduces causality and gives usual ways to represent it in theory, with causal histories, and in practice, with vector clocks and version vectors as well as their dotted variants.</p>
</section>
<section id="Conclusion">
<h2>Conclusion</h2>
<p>When I started programming as a child, I was hooked by the idea that the computer was a perfect machine that, unlike a teacher, would never be unjust: it would work if I got the code right, and if I did not I just had to fix it and try again. Once it worked, it would always work! Everything was reproducible, and all issues could be diagnosed and understood.</p>
<p>Of course, I grew up and the messy reality caught up with me. I went into distributed systems, which are a lot more like physics than maths. There are laws that govern the world out there, and they are always coming in your way. Everything works as expected, until something unexpected happens. And sometimes, you will not even be able to explain what it was after the fact.</p>
<p>Distributed systems work is about that adversarial world out there, and how we write programs to cope with it. It is about dealing with the unreliability of clocks, communications, hardware and, sometimes, people. It is about reading papers, drawing diagrams, writing proofs sometimes, and finding solutions to obtain the guarantees we want. More than anything else, distributed systems is the science (or art? or game?) of trade-offs. It is hard, error-prone and <a href="https://aphyr.com/tags/jepsen">usually broken</a>, <a href="https://en.wikipedia.org/wiki/Paxos_%28computer_science%29">terribly</a> <a href="https://en.wikipedia.org/wiki/Byzantine_fault_tolerance">complicated</a> sometimes, but it is my field, and so far I like it.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>My love-hate relationship with LuaJIT</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2015-06-18-love-hate-luajit.html"
    />
    <id>tag:blog.separateconcerns.com,2015-06-18:love-hate-luajit</id>
    <published>2015-06-18T02:00:00Z</published>
    <updated>2015-06-18T02:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <blockquote>
<p>Clarification: The title is exaggerated. I have never hated LuaJIT, I just went back to using PUC Lua primarily.</p>
</blockquote>
<p>I started using Lua in early 2007. I had already been programming for years, but I had reached a point where I had decided that I wanted to know exactly what was going on when my computer executed dynamic code. That meant understanding two critical pieces of the software stack: the OS and the interpreter.</p>
<p>I already had notions of how an interpreter works and I could tell the main functions of a Unix kernel, but really understanding software, for me, implied reading its source code. I quickly realized that I would not succeed if I started with Perl or Python and Linux, which were what I was using at the time, so I set my sights on Lua and Minix3.</p>
<p>Knowing software also implies using it, so Minix3 and Lua became my main OS and language for several months. To be honest, I was running Minix3 in a VM due to the lack of drivers for my hardware. I started to study their code, with the help of <a href="http://www.minix3.org/doc/#book">the book</a> for Minix3 and resources found online for Lua. I learnt a lot during that period.</p>
<p>Eventually, I went back to Linux for practical reasons, but I had been charmed by the down-to-Earth elegance of Lua. It became my favorite programming language. I was still a student though, so I mostly wrote small utilities, Web pages and game prototypes with it. Coursework was Java, Python and C, and for &#8220;serious&#8221; stuff at <a href="http://resel.fr/">ResEl</a> I used Perl, Python or Bash.</p>
<p>Then in 2010 I went to <a href="https://moodstocks.com/">Moodstocks</a> for my MSc Thesis. We were a very tiny startup then, just the founders and a couple of interns. They were a Ruby and C++ shop, so I learnt Ruby, but I didn&#8217;t like it: too much magic, and the object-oriented interface to write bindings was a mess compared to the very clean Lua C API.</p>
<p>Eventually, Moodstocks hired me and I worked for them for over three years. I ended up writing most of their server-side code, I already gave <a href="http://blog.separateconcerns.com/2013-06-20-three-years-proprietary-projects.html">details here</a>. A lot of that code leveraged LuaJIT. It was the perfect tool for the job: as flexible and dynamic as Ruby so it worked well as a scripting language, about as fast as C++ so it could be used to implement Computer Vision algorithms, and the FFI made it very easy to call into our existing C / C++ libraries.</p>
<p>Those are the features that make LuaJIT so attractive: its blazing speed and the FFI. They are why I could write Lua professionally for several years, and I could never thank Mike Pall enough for this. Moreover, LuaJIT has been playing a huge role in the growing popularity of Lua those last few years.</p>
<p>However, paradoxically, LuaJIT negates the very reason that made me pick Lua in the first place. And by that I mean: I do not deeply understand how LuaJIT works. I have tried, and I will certainly try again, but it is one or two orders of magnitude more complicated than PUC Lua.</p>
<p>Beyond the purist ideal of understanding the whole stack, this has practical implications. When you find a bug in LuaJIT, understanding it and fixing it is terribly complicated. The best I can do is usually to try to produce a small test case that reproduces the bug (even that is not always easy) and hope Mike Pall finds a fix. With PUC Lua I could probably fix it myself - but of course PUC Lua is so simple that I have never found a bug in it!</p>
<p>Another issue is that PUC Lua and LuaJIT are diverging. LuaJIT implements Lua 5.1. Lua 5.2 code can be made to work as long as it does not use <code>_ENV</code>, but code that leverages the new features in Lua 5.3 is not supported at all (although modules like <a href="https://github.com/keplerproject/lua-compat-5.3">lua-compat-5.3</a> can probably help). On the other hand, more and more modules require the FFI, making them incompatible with PUC Lua (of course <a href="https://github.com/catwell/luajit-msgpack-pure">I am a culprit of that myself</a>). And to top it all, the interpreters work so differently that efficient code in LuaJIT is not necessarily good in PUC Lua, and vice versa.</p>
<p>These days, the purist, simplicity-loving part of me tends to win over the pragmatist in my (rare) non-work code, and my current target of choice is PUC Lua. At work, I write almost exclusively C and almost no Lua, and the little I do write runs on <a href="https://meetlima.com/">a machine</a> which does not support LuaJIT. The only reasons I still use LuaJIT are maintenance of luajit-msgpack-pure and my use of OpenResty, which for my purposes could as well be built with PUC Lua instead.</p>
<p>That being said, I like knowing that I could take my Lua code and, with a few tweaks and a change of interpreter, get a serious performance boost. So I still hope someone (if not Mike Pall) will make a version of LuaJIT that supports the Lua 5.3 interface. Otherwise, I guess I can still decide that learning more about JIT compilation is worth it and spend a few months diving into that LuaJIT codebase!</p>
<p>Oh, and by the way, with this whole systemd thing, I am semi-seriously considering giving Minix3 a second chance :)</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Continuous Integration for Lua with Travis</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2015-03-08-travis-lua.html"
    />
    <id>tag:blog.separateconcerns.com,2015-03-08:travis-lua</id>
    <published>2015-03-08T12:00:00Z</published>
    <updated>2015-10-16T16:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p><a href="https://travis-ci.org">Travis</a> is a Continuous Integration service which is free for Open Source projects and has very good GitHub integration. We will see how to use it for your Lua projects.</p>
<p>Your test suite will work well with Travis as long as executing it returns 0 on success and nonzero on failure. If you use plain Lua assertions, it is already the case. If you use a test framework, make sure that it works that way. I have added <a href="https://github.com/catwell/cwtest#exit">a helper</a> to cwtest for that purpose.</p>
<p>Travis does not support Lua out of the box, but using it with Lua projects is not hard because <a href="https://github.com/moteus">moteus</a> has done all the hard work for you. You just have to clone <a href="https://github.com/moteus/lua-travis-example">this repository</a> and copy the <code>.travis</code> directory to yours.</p>
<p>After that, you only have to write a single YAML file, <code>.travis.yml</code>. For example, here is <a href="https://github.com/catwell/haricot/blob/master/.travis.yml">the one I wrote for Haricot</a>.</p>
<p>Most sections should be self-explanatory. <code>install</code> is where you set up your dependencies. The first line calls moteus&#8217; script which lets you use Lua and LuaRocks. A separate build and test run will occur for every Lua version declared in <code>matrix</code>; you can comment some lines there if you do not want to test some Lua versions. For Haricot I need <a href="http://kr.github.io/beanstalkd/">Beanstalk</a> running in the background so I start it in <code>before_script</code>. <code>script</code> is where you run your actual tests.</p>
<p>To enable Travis, sign up, allow Travis to access your GitHub account, then go to <a href="https://travis-ci.org/profile">your profile</a> and flip the switch for your repository:</p>
<p><img alt="travis" src="img/travis.png"/></p>
<p>After that, commit <code>.travis</code> and <code>.travis.yml</code> and push to GitHub. It will trigger a test build, and so will every subsequent commit. If you want, you can now add <a href="https://travis-ci.org/catwell/haricot.png?branch=master">a badge</a> with the status of your build to your README or your project&#8217;s home page.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Indie Web</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2015-01-04-indie-web.html"
    />
    <id>tag:blog.separateconcerns.com,2015-01-04:indie-web</id>
    <published>2015-01-04T20:10:00Z</published>
    <updated>2015-01-04T20:10:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>It is not a secret that I don&#8217;t like Web technology. I prefer XHTML to HTML5, I think JavaScript is a terrible language, and don&#8217;t get me started on microformats (let&#8217;s just say that SoC &gt; DRY&#8230;). I&#8217;d rather see this mess replaced by something much simpler that <strong>only</strong> deals with linked documents and feeds, and maybe a separate platform for portable applications.</p>
<p>However, the Web is here to last, and given its importance, its centralization is concerning. This is why I am interested in the <a href="http://indiewebcamp.com/">Indie Web</a> movement, which I see as part of the larger effort to decentralize Internet. By the way, if you are into this and live in Paris, check out <a href="http://www.meetup.com/Paris-Meetup-pour-la-decentralisation-dInternet/">this meetup</a> which is held every six weeks at Mozilla&#8217;s office. I have been there every time since its inception and it is well worth it.</p>
<p>Anyway, I have seen today via my feed reader that <a href="http://tantek.com/2014/357/b1/2015-indieweb-site-launch-commitment">some people had made commitments for 2015-01-01</a>. I am a bit late, but I decided to follow suit by adding <a href="http://indiewebcamp.com/Why_web_sign-in">Web sign-in</a> and <a href="http://indiewebcamp.com/h-card">a h-card</a> to <a href="http://catwell.info">my home page</a>. I will probably add <a href="http://indiewebcamp.com/h-entry">h-entry</a> markup to this blog later this week, too.</p>
<p>If you want to do the same, you can use <a href="http://indiewebify.me/">this handy tool</a> to check everything is working.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Lean tools</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-11-23-lean-tools.html"
    />
    <id>tag:blog.separateconcerns.com,2014-11-23:lean-tools</id>
    <published>2014-11-23T21:45:00Z</published>
    <updated>2014-11-23T21:45:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Two people I respect a lot, <a href="http://about.avdi.org/">Avdi Grimm</a> and <a href="http://soveran.com/">Michel Martens</a>, are having <a href="http://devblog.avdi.org/2014/11/21/in-defense-of-fat-tools/">an interesting debate</a> about the complexity of programming tools and libraries.</p>
<p>In the Ruby community, Michel is well-known for writing simple tools that do their job well. Avdi defends the framework approach of Rails, arguing that using fatter tools allows you to make your own code simpler. If you want to hear them debate it, listen to <a href="http://devchat.tv/ruby-rogues/182-rr-keeping-libraries-and-utilities-small-and-simple-with-michel-martens">the podcast</a>.</p>
<p>It will not surprise people who know me that I side with Michel here. Actually, I am probably more extreme than he is: I used his <a href="https://github.com/soveran/ohm">Redis Object Mapper</a> at Moodstocks some years ago, but I eventually went back to using redis-rb directly, and finally dropped the Ruby language entirely. You can also see by yourself how much I obsess about simplicity by looking as <a href="http://files.catwell.info/notes/quotes.txt">my list of quotes</a>.</p>
<p>I feel like most programmers do not reason like Michel and me regarding this, and it seems to me those who do often have similar backgrounds in Unix and maintenance of production systems. Maybe as a result, we tend to take a system approach to everything, so when we evaluate the complexity of software, we take into account the complexity of dependencies as well as the complexity of the application code itself.</p>
<p>When running production systems, the most important thing you want to optimize for is the speed with which you can diagnose and recover from a problem. Reliability is also important, sure, but you quickly learn that no matter how good the software you use is, it <strong>will</strong> fail (coincidentally, another host of the podcast <a href="http://blog.jessitron.com/2014/03/weakness-and-vulnerability.html">talks about that on her blog</a>). For that purpose, you want few moving pieces, each one being simple enough for you to understand it.</p>
<p>You can take this idea very far. Around 2007 I thought about how nice it would be to know a programming language so well that 1) there would be nothing in it I would not know about and 2) I would be able to know exactly what every line of code I wrote did internally. At the time, I wondered if it would require me to pick a language like Forth or LISP implement it myself. It turned out not to: I discovered Lua, whose reference implementation is roughly 15000 lines of (readable) C code. It has been my dynamic language of choice ever since.</p>
<p>When I have a problem to solve, I look for the simplest Open Source tool that does it and weigh the cost of implementing the feature myself against the cost of using and maintaining this tool. Tools usually win when they just do what I wanted; they lose when they do too many things or pull in too many dependencies I did not already use.</p>
<p>Many Ruby programmers, when they install a gem that pulls in several dependencies and compiles some C code, think: &#8220;How nice! All of this is automated for me!&#8221; The reaction of an operations person, on the other hand, is closer to this:</p>
<p><img alt="nope" src="img/nope.gif"/></p>
<p>When I write Open Source tools myself, I try to reason the same way. For instance, I wrote a small <a href="http://kr.github.io/beanstalkd/">Beanstalk</a> client for Lua called <a href="https://github.com/catwell/haricot">haricot</a>. The protocol used by Beanstalk has a few methods that return YAML. Those methods are for monitoring and are typically not used by job producers or consumers.</p>
<p>YAML being a <a href="http://yaml.org/spec/1.2/spec.html">terribly complicated format</a> (please do not use it), all the YAML parsers I know about in Lua land are bindings to C libraries, making them annoying to install and maintain. I had to decide between choosing one of them and making it a dependency or writing my own code to parse the subset of YAML used by Beanstalk.</p>
<p>I chose a third solution: <a href="https://github.com/catwell/haricot#note-about-yaml">returning raw YAML to the user</a>. Yes, this is &#8220;pushing the complexity upstream&#8221;. But most users of this library will never need those methods. In the test suite, I auto-detect the presence of a YAML parser and skip related tests if none is available.</p>
<p>Eventually, this is a matter of choice. Avdi is right: fat tools usually exist for good reasons, not because their authors did not think of a simpler solution. Choosing whether to use them or not has to be a conscious trade-off. I just personally decided there are very few things I want to trade simplicity off against.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Disabling graphical password prompts</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-10-24-cli-passwords.html"
    />
    <id>tag:blog.separateconcerns.com,2014-10-24:cli-passwords</id>
    <published>2014-10-24T21:30:00Z</published>
    <updated>2015-08-31T21:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>These days Linux systems tend to open graphical password prompts when a CLI
application needs user authentication. I don&#8217;t know about you but I really
don&#8217;t like that.</p>
<p>The first offender is git, which uses x11-ssh-askpass if installed. The
simplest solution would be not to install it but it is a dependency of
virt-manager on Arch Linux&#8230; Thankfully you can tell git not to use it:</p>
<pre><code class="language-shell">git config --global core.askpass ""
</code></pre>
<p>The second one, in my case, was <a href="http://www.passwordstore.org/">pass</a>.
If you try to use it in Gnome, the keyring hijacks the GPG agent
and you get that message (plus a graphical prompt):</p>
<pre><code>gpg: WARNING: The GNOME keyring manager hijacked the GnuPG agent.
gpg: WARNING: GnuPG will not work properly - please configure
that tool to not interfere with the GnuPG system!
</code></pre>
<p>The Gnome keyring is an annoying piece of software that replaces password
prompts for several tools including SSH and GPG. you can disable it this way:</p>
<pre><code class="language-shell">mkdir -p ~/.config/autostart
cd !$
cp /etc/xdg/autostart/gnome-keyring-* .
for i in *; do echo "Hidden=true" &gt;&gt; $i; done
</code></pre>
<p>&#8230; but then GPG will use yet another graphical prompt! To finally stay in your
terminal, create the file <code>~/.gnupg/gpg-agent.conf</code> with the following content:</p>
<pre><code class="language-shell">pinentry-program /usr/bin/pinentry-curses
</code></pre>

      </div>
    </content>
  </entry>
  <entry>
    <title>Microservices</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-09-25-microservices.html"
    />
    <id>tag:blog.separateconcerns.com,2014-09-25:microservices</id>
    <published>2014-09-25T23:00:00Z</published>
    <updated>2014-09-25T23:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Several people have asked me what I think about microservices. The tl;dr is: I like small services, but I don&#8217;t like what some call microservices, which is isolating every single feature within its own service and aiming at services at small as possible (I heard about a target of &#8220;a few hundred lines of code&#8221; per service and a hard limit at 5000 LOC).</p>
<p>I <a href="http://blog.separateconcerns.com/2013-01-02-startups-soa.html">see SOA</a> (and modularization in general) as a technique to design a system so that it scales with the number of people on a team. The way it works is by dividing complexity between people. The following will be terribly simplified, but bear with me.</p>
<p>Imagine a team working on a monolithic application. It is becoming too large and complicated to understand, so they split it into three parts, A, B and C. A third of the team will be responsible for each part. Each team is tasked with exposing an interface to the others, so that team A only has to worry about the internals of A and the interfaces of B and C. For each team, complexity has gone from the complexity of the monolithic application to a third of that complexity plus the complexity of communicating with the other parts of the system, or at least just knowing they exist, so given <code>N</code> the number of parts in the system and <code>M</code> the total complexity of the system, complexity seen from a service is: <code>M/N + k*N</code>.</p>
<p>Now assuming the complexity of the system increases linearly with team size <code>S</code> (it probably increases faster in practice but let&#8217;s approximate), complexity seen from a service is <code>l*S/N + k*N</code>. With everything else constant, the function <code>N(S)</code> to minimize that looks like a square root.</p>
<p>In practice, this is not entirely true: as the system grows, not every service talks to other services and not every developer needs to know about every service. But because system architects and, more importantly, operations people do, my argument still holds.</p>
<p>So here is my point: the number of services you have should look like a constant times the square root of the size of your team. Meaning, with a constant of three:</p>
<p><img alt="graph" src="img/microservices.jpg"/></p>
<p>This is the problem I have with the idea to bound the size of single services while ignoring the complexity of inter-service communication. SOA is a practice which can help you curb local complexity as you scale but there is <strong>no way</strong> it can make it constant without making a mess of the whole system.</p>
<p>That being said, the value of the constant can be discussed. Some people think it should be lower than one, others think it should be very large.</p>
<p>I am not a huge fan of small constants when they result in services that do too many things and require too many people. They end up looking like a few monoliths, with the same issues as a single monolith. Moreover, if you are going to do services, inter-service calls should be the norm and not an exception. Very large constants, on the other hand, result in too much accidental complexity, harder debugging and operational nightmares.</p>
<p>I guess mileages vary but I like numbers around three. If you look at the curve above you may (or may not) agree that it looks reasonable; I think it does.</p>
<p>Note that the title of this blog is still &#8220;Separate Concerns&#8221;: you should still draw clear lines between services, and you should still modularize as much as possible <strong>within</strong> services. But not every function call needs to be turned into a message sent over a network, and not every data structure needs its own process and source control repository.</p>
<p>And finally, just to be clear: do not look too much at the left part of the curve if you are a very early stage startup looking for product-market fit. You can still - and probably should - start with a monolith as long as you choose an architecture or framework with good modularization capabilities (like <a href="https://flask.palletsprojects.com/en/2.2.x/blueprints/">Flask Blueprints</a>). Only consider SOA when you start to have a good rough idea of what the product will look like.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Iris</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-09-20-iris.html"
    />
    <id>tag:blog.separateconcerns.com,2014-09-20:iris</id>
    <published>2014-09-20T15:00:00Z</published>
    <updated>2014-09-20T15:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p><a href="http://iris.karalabe.com/">Iris</a> is a &#8220;decentralized Cloud messaging&#8221; middleware that I have really started looking into with the recent <a href="http://iris.karalabe.com/archive/2014/version_v0_3_0_shiny_stable_apis">release of version 0.3.0</a>. It had struck me as interesting when I first heard of it <a href="https://www.youtube.com/watch?v=WTRORimPvHE">at FOSDEM 2014</a>. The reason for that, beyond the great presentation skills of its author, is that it implements principles I think are sound to build SOA upon.</p>
<p>In Iris, the logical and physical layers of services are cleanly separated. Each box in the system runs a local instance of the Iris broker (&#8220;Iris node&#8221;). The broker is written in Go, and all broker instances in the system converse in a proprietary protocol.</p>
<p>To provide or consume a service, you never have to open a connection to a remote machine: you just talk to your local broker using the <a href="https://dl.dropboxusercontent.com/u/10435909/Iris/relay.pdf">Iris relay protocol</a>. This means you can use any programming language you want as long as you implement this protocol, which is much simpler than the protocol used between brokers. There are official clients for the relay protocol (Iris calls them &#8220;bindings&#8221;, but I think that name is confusing) in Go, Erlang and Java. I have <a href="https://github.com/catwell/iris-lua">written one in Lua</a> that I will use for examples in the rest of this post (if you prefer, you will find corresponding code in Go for most examples <a href="https://github.com/catwell/iris-lua/tree/master/eFxamples">here</a>).</p>
<p>In Iris, services are represented by names. To provide a service you register with its name, to consume one you address it by its name. That means you never dial into a specific instance of a service explicitly. From the consumer&#8217;s point of view, the service could be provided by a single box as well as hundreds across different datacenters. Boxes can go up or down, and you will almost never have to care about it when writing code: it is an operational concern. The way Iris&#8217; author puts it is that in Iris the smallest logical entity is a cluster, there is no concept of individual machine or process.</p>
<p>Iris supports three usual basic patterns for communication: Request/Response, Publish/Subscribe and Broadcast. A fourth one, Tunnel, is slightly more complicated.</p>
<section id="RequestResponse">
<h1>Request/Response</h1>
<p>This is the pattern everybody knows about from HTTP, and probably the workhorse of most SOAs. A client sends a request to a cluster, and a single node of the cluster answers it. Iris just does the messaging here: the request and the response are binary blobs, there is no notion of headers.</p>
<p>Here is how it looks in Lua on the client side:</p>
<pre><code class="language-lua">local iris = require "iris"

local c = iris.new()
assert(c:handshake(""))

local req = c:request("echo", "hello", 1000)
c:process_one()
local r = assert(req:response())

c:teardown()

print("reply arrived: " .. r)
</code></pre>
<p>and on the service side:</p>
<pre><code class="language-lua">local iris = require "iris"

local c = iris.new()
assert(c:handshake("echo"))

c.handlers.request = function(req)
    print("request arrived: " .. req)
    return req
end

for i=1,5 do c:process_one() end

c:teardown()
</code></pre>
</section>
<section id="PublishSubscribe">
<h1>Publish/Subscribe</h1>
<p>Another well-known pattern. Consumers subscribe to a channel identified by a name, producers send messages into the channel and all subscribers receive them. There is no response from the subscriber. Channels are completely independent from clusters, i.e. channel &#8220;X&#8221; and cluster &#8220;X&#8221; can coexist and have nothing in common, and there is no restriction that a channel only works within a given cluster (any entity on the same Iris network can access it).</p>
<p>Here is a publisher to channel &#8220;somechan&#8221; in Lua:</p>
<pre><code class="language-lua">local iris = require "iris"
local socket = require "socket"

local c = iris.new()
assert(c:handshake(""))

for i=1,5 do
    c:publish("somechan", "message " .. i)
    socket.sleep(1)
end

c:teardown()
</code></pre>
<p>and a consumer:</p>
<pre><code class="language-lua">local iris = require "iris"
local socket = require "socket"

local c = iris.new()
assert(c:handshake(""))

c.handlers.pubsub.somechan = function(msg)
    print("message arrived: " .. msg)
end

c:subscribe("somechan")

for i=1,5 do c:process_one() end

c:teardown()
</code></pre>
</section>
<section id="Broadcast">
<h1>Broadcast</h1>
<p>We have seen that requests are sent to a single instance of a cluster. What if you want to notify <strong>all</strong> members of a cluster of some event? This is what Broadcast is for. It is kind of redundant with Publish/Subscribe (you could have all members of each cluster subscribe to a channel) but it is somehow cleaner to have a separate message type for this. You could use it to build more complicated things on top, for instance a full-fledged service bus.</p>
<p>Here is how to send a broadcast message in Lua:</p>
<pre><code class="language-lua">local iris = require "iris"

local c = iris.new()
assert(c:handshake(""))

c:broadcast("bcst", "hello")
c:teardown()
</code></pre>
<p>and how to handle them:</p>
<pre><code class="language-lua">local iris = require "iris"

local c = iris.new()
assert(c:handshake("bcst"))

c.handlers.broadcast = function(msg)
    print("message arrived: " .. msg)
end

for i=1,5 do c:process_one() end

c:teardown()
</code></pre>
</section>
<section id="Tunnel">
<h1>Tunnel</h1>
<p>Tunnels are the last and most complicated way to communicate provided by Iris. To understand why we need them, remember how requests work.</p>
<p>The fact that any member of a cluster can answer a request prevents you from doing anything stateful, because you cannot know if you are talking to the same instance or not in two separate requests. Moreover, the nature of the request and response does not allow any of them to be composed of multiple parts sent in separate messages. A request cannot trigger multiple responses.</p>
<p>Tunnels are a solution to all that. When you open a tunnel, you address a cluster, but what you obtain is a persistent, bidirectional, ordered pipe to a specific instance of that cluster. You can think of it as a TCP socket or a circuit if you come from a telecom background (although there are no latency guarantees). Tunnels implement a throttling algorithm so that both ends of the tunnel can specify a maximum size for their input buffer.</p>
<p>For now, here is what I think of tunnels in the context of a SOA: they are very powerful but tricky to use. If you can avoid them, you should. If not, you should not use raw tunnels anyway: you should define your protocol, write an abstraction for it and never expose the tunnel itself to the application.</p>
<p>One valid use case I can see for tunnels, and which is used in Iris examples, is streaming. But this can go much further. Like the name indicates, you could tunnel most protocols into them, so they could serve as the foundation for some kind of VPN.</p>
<p>Anyway, here is an example client with multiple responses and state:</p>
<pre><code class="language-lua">local iris = require "iris"

local c = iris.new()
assert(c:handshake(""))

local tun = c:tunnel("tunnel", 1000)
tun:confirm()
tun:allow(1024)

tun.handlers.message = function(msg)
    if msg == "data" then
        print("got data")
    elseif msg == "continue" then
        print("got continue, sending request")
        tun:cosend("request")
    elseif msg == "bye" then
        print("got bye, quitting")
        tun:close()
    else
        print("got invalid message: " .. msg)
        tun:close()
    end
end

local xfer = tun:transfer("request")
while not xfer:run() do c:process_one() end

local op
while op ~= iris.OP.TUN_CLOSE do op = c:process_one() end

c:teardown()
</code></pre>
<p>and the server on the other end:</p>
<pre><code class="language-lua">local iris = require "iris"

local c = iris.new()
assert(c:handshake("tunnel"))

local MAX_COUNT = 3
local count = 0

c.handlers.tunnel = function(tun)
    tun:allow(1024)
    tun.handlers.message = function(msg)
        if msg == "request" then
            if count &lt; MAX_COUNT then
                count = count + 1
                print(string.format(
                    "got request, sending %dx data + continue",
                    count
                ))
                for i=1,count do tun:cosend("data") end
                tun:cosend("continue")
            else
                print("got request, sending bye")
                tun:cosend("bye")
            end
        else
            print("got invalid message: " .. msg)
            tun:close()
        end
    end
end

local op
while op ~= iris.OP.TUN_CLOSE do op = c:process_one() end

c:teardown()
</code></pre>
</section>
<section id="Conclusion">
<h1>Conclusion</h1>
<p>Iris is a very interesting piece of software which implements a vision of systems that I like and cannot find in any other product out of the box. It is still very young and probably not ready for serious production yet, although I have found it stable during the (limited) testing I have done. Even though my current job does not involve SOA I will probably come back to it someday, so Iris will join the list of tools whose progress I follow attentively.</p>
<p>On a side note, Iris was built for its authors&#8217; thesis, and he is now <a href="http://iris.karalabe.com/archive/2014/core_concepts_at_dotscale">looking for a sponsor</a> to allow him to continue working on it. If you have the power to make that happen, give it a look. Think how VMWare / Pivotal must be happy of the deal they did with <a href="http://invece.org/">Antirez</a> :)</p>
<p>Finally, if you try <a href="https://github.com/catwell/iris-lua">my Iris client</a> and find bugs, do not hesitate to report them on Github! I have no real world Iris system to try it on so there are certainly plenty.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Hacker Founders</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-05-28-hacker-founders.html"
    />
    <id>tag:blog.separateconcerns.com,2014-05-28:hacker-founders</id>
    <published>2014-05-28T00:00:01Z</published>
    <updated>2014-05-28T00:00:01Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Note: I posted what follows <a href="https://gist.github.com/catwell/5387617">as a Gist</a> over a year ago. Recently I was looking for it and couldn&#8217;t find it, so I am re-posting it here for the next time.</p>
<p>At the last Human Talks Paris meetup, Fabien Charbit (founder of <a href="http://sush.io">sush.io</a>) gave <a href="http://humantalks.com/talks/131-developpeurs-montez-votre-boite">a talk</a> in French whose title could be translated as: &#8220;Programmers, create your company!&#8221;</p>
<p>Of course I agree with the idea, but at the end of it <a href="http://www.youtube.com/watch?v=0nxDKTJ5Ovc#t=641s">I said</a> I was disappointed because <a href="http://www.youtube.com/watch?v=0nxDKTJ5Ovc#t=439s">he said</a> you should find a marketing / commercial-minded CEO and be CTO. This is a commonplace, and I thought his message would be bolder than that. You can always discuss whether this is right or wrong but I think a tech startup where <strong>all</strong> the founders are tech-minded makes a lot of sense.</p>
<p>It turns out, Paul Graham <a href="http://www.youtube.com/watch?v=BDA0t49AaZ4#t=1383s">said exactly that</a> in a video interview back in 2005. He is is much more credible than me on the topic, so I reproduced what he has to say about it below.</p>
<p>Note that Fabien later clarified that this was not an issue of degree or even competence, but rather that one of the founders should have the motivation to deal with the softer aspects of the company, so we agree after all. But it is still way too common in France to assume every startup&#8217;s CEO should have a business degree&#8230;</p>
<p>Anyway, the question was: &#8220;What is the relationship in startups between programmers and the business types?&#8221;, and PG answered:</p>
<blockquote>
<p>The relationship between the programmers and the business types? Well&#8230;
I believe, and Y Combinator is kind of an experiment to test this&#8230;
I believe that programmers can become business types. I think that business is
kind of like chess, in the sense that the hard part is not knowing the rules
about how the pieces move, the hard part is actually being able to, like&#8230;
look ahead and make strategies and stuff like that, right. The hard part about
playing chess well is being smart, right, not knowing how to play the rules of
chess. And I think business is like that, that there&#8217;s a few rules of business
and that hackers are capable of learning them, most hackers, and that&#8230;
once they learn them, they&#8217;ll be as good at it as business guys, you know?
So&#8230; I think hackers can <strong>be</strong> business guys. Hackers are perfectly capable
of being business guys. Look at Bill Gates, right! He didn&#8217;t go to business
school. I mean&#8230; you might wonder, why would <strong>anyone</strong> want to go to business
school? You know, when you look at the example of Bill Gates, he seems to be
doing fine at business, right? He sort of picked it up as he went along,
and that did not seem to hurt him at all. Larry and Serguey, they didn&#8217;t go to
business school either, right, they&#8217;re just hackers, and they seem to be doing
fine too. So I think the relationship between hackers and business guys, at
least in the beginning, is that you need hackers and you don&#8217;t need business
guys.</p>
</blockquote>

      </div>
    </content>
  </entry>
  <entry>
    <title>Indistinguishable from Magic</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-05-27-magic.html"
    />
    <id>tag:blog.separateconcerns.com,2014-05-27:magic</id>
    <published>2014-05-27T23:30:00Z</published>
    <updated>2014-05-27T23:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I have just watched a small <a href="https://www.youtube.com/watch?v=Ia55clAtdMs">TEDx talk by Simon Peyton Jones</a> (of Haskell fame) on CS education. Something he said struck me as relevant to what I was saying in <a href="/2014-04-25-design-alan-kay.html">my last post</a>:</p>
<blockquote>
<p>Arthur C. Clarke once famously remarked that &#8220;any sufficiently advanced technology is indistinguishable from magic&#8221;. And I think it is very damaging if our children come to believe that the computer systems they use are essentially magic. That is: not under their control.</p>
</blockquote>
<p>If you have a programming background, you may experience a feeling close to disgust when you hear the word &#8220;magic&#8221;. But I have heard &#8220;product people&#8221; use it as if it was a <strong>good</strong> thing way too many times. Short term, maybe. But eventually I want to master my tools, to understand them inside out. I want to be able to rely on them, and for that I expect them <strong>not</strong> to surprise me.</p>
<p>I think it is time for the pendulum to swing back to products that optimize for how high the asymptote of the learning curve is, not the time it takes to reach it. The kind of products that come with manuals and teach you things instead of trying very hard not to make you feel stupid, or in other words: not to make you think.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Modern design and Alan Kay</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-04-25-design-alan-kay.html"
    />
    <id>tag:blog.separateconcerns.com,2014-04-25:design-alan-kay</id>
    <published>2014-04-25T00:30:00Z</published>
    <updated>2014-04-25T00:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I have long been thinking that there is something wrong with modern product design thinking. I see designs that trade off almost all power, flexibility and composability for a smoother learning curve. I see designs that remove explicit controls and replace them by magic, choosing to hide essential complexity instead of reducing accidental complexity. I see designs optimized for new users and prospects instead of regular users, and designers who apparently consider documentation as something evil.</p>
<p>I do not like that trend. Learning from a community where <a href="http://en.wikipedia.org/wiki/RTFM">RTFM</a> was often the right answer has been very beneficial to me when I was a child. I am also a proponent of simplicity and <a href="https://wiki.archlinux.org/index.php/The_Arch_Way#Simplicity">complexity without complication</a>, as should be obvious from <a href="http://files.catwell.info/notes/quotes.txt">the quotes</a> I have been collecting over the last years.</p>
<p>The name of Alan Kay can be found a few times in this file, and so I was very pleased to find out that he recently gave a talk where <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=gTAghAJcO1o#t=765">he puts words</a> on that hard-to-describe feeling: that this design school, which postulates that educating users is a bad idea and that everything should be natural, is hindering progress.</p>
<p>I found it so spot on that I decided to transcribe part of it below. I encourage you to read, and then watch the whole video if you can!</p>
<blockquote>
<p>Human beings tend to hate learning curves, [&#8230;] and marketing people really hate learning curves. [&#8230;]</p>
</blockquote>
<blockquote>
<p>Any product today that requires a substantial learning curve is not what marketing people are looking for. As the joke goes, they want a brand new idea that has been perfectly tested. They would like something that people instantly recognize, but you&#8217;re the only person who has it. So they want something, essentially, that would have appealed to any cave person 100000 years ago, something that fits into what our genes set us up to be interested in.</p>
</blockquote>
<blockquote>
<p>An interesting question is: if the bicycle were invented tomorrow, would it actually be carried through? Think of how dangerous a bicycle is, think of the lawsuits! The bicycle is only tolerated today because it has been around for a long time, when people didn&#8217;t sue when a kid got danked.</p>
</blockquote>
<blockquote>
<p>Another way to look at it is that the larger world out there is kind of a low pass filter. And this is still going on: the iPad has a much more brain-dead interface than the Mac. [&#8230;] If you think of the iPad as a gesture device, a gesture is inherently something that gives you not just naturalness but efficiency. And so when you&#8217;re doing gestures-oriented computing, and the origin of that goes back into the 60s - there were some really wonderful systems back then, what you really want to do is to learn a bunch of gestures to make you fluent and efficient on the thing. And the iPad doesn&#8217;t have any particular way of teaching you those gestures. They don&#8217;t force the developers to put a teaching thing for those gestures in there. And so basically everything is devolved down to the few simple gestures that are generic to the iPad.</p>
</blockquote>
<blockquote>
<p>This is kind of a dumb-down-ism that has been incredibly successful for people who are only interested in making money. It has not been good for personal computing. [&#8230;]</p>
</blockquote>
<blockquote>
<p>If we look at human psychometrics, [&#8230;] when a new idea or tool appears, about 95% of us are what are called instrumental reasoners. [&#8230;] And an instrumental reasoner is a person who judges the new idea or tool on whether it will advance their current goals. [&#8230;] They are very conservative about shifting their goals. 5% of us are interested in the new idea or tool just because we&#8217;re interested in new ideas and tools, and many of these people actually change their goals when a new idea or tool appears.</p>
</blockquote>
<blockquote>
<p>If we look at the other axis, about 85% of us do things primarily for social approval. That&#8217;s what extroversion actually means: it doesn&#8217;t mean you&#8217;re a performer, it means you are actually interested in the opinions of others. About 15% of us are inner-directed.</p>
</blockquote>
<p><img alt="change in groups" src="img/kay-change-groups.png"/></p>
<blockquote>
<p>If you combine these two (and I realize that they might not be completely independent dimensions, but they are independent enough for this talk) you get this interesting thing: 1% of us is inner-directed, not so interested in the approval of others, and intrinsically interested in new ideas and tools.</p>
</blockquote>
<blockquote>
<p>And 80% of us are goal-conservative, instrumental and directed by what our society thinks of us. This group requires almost everybody to agree on something before anybody agrees on something. [&#8230;] So this group generally cannot do something just because it is a good idea. This is just not a concept that this group has, the majority of human beings. They&#8217;ll do something if it is actually part of a sanction. And so this group is capable of doing things that are terrible ideas [&#8230;] if they&#8217;re sanctioned by the group. [&#8230;]</p>
</blockquote>
<blockquote>
<p>And it turns out of you want to make a change in the larger world, you have to do something with the 80%. The 1% are more or less always with us and doing things. Some eras they get burnt at the stake, some eras they get rejected. In the 60s they actually got funded for a while. Xerox PARC came out of the funding of those people in the 60s, but they&#8217;re always with us.</p>
</blockquote>

      </div>
    </content>
  </entry>
  <entry>
    <title>Learning in the small</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-04-22-learning-small.html"
    />
    <id>tag:blog.separateconcerns.com,2014-04-22:learning-small</id>
    <published>2014-04-22T23:59:00Z</published>
    <updated>2014-04-22T23:59:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <section id="Writing-a-Lisp">
<h2>Writing a Lisp</h2>
<p>I like to learn new tools and concepts by experimenting with small projects whose sole purpose is to help me grasp something better. Working on a larger project in a team with other people is invaluable, but doing things on a smaller scale on my own offers a different perspective.</p>
<p>Having recently started to write a lot more C at work than I used to, I felt that it was a good idea to do a smaller project in the language. It turned out <a href="http://www.buildyourownlisp.com/">Build Your Own Lisp</a> came out just when I needed it, so I <a href="https://github.com/catwell/ownlisp">had a go at it</a>.</p>
<p>I cannot recommend this book enough if you feel like you would enjoy building a dynamic language in C from scratch (using just a parser library). It is one of the best tutorial-style books I have ever read. It achieves a perfect balance between being didactic and leaving freedom to the user.</p>
<p>My Lisp ended up being different from the one described in the book in several minor ways. For instance: it has more types, builtins take expressions instead of values, values are based on a union (which saves memory), memory management works differently, the source more organized&#8230; In that respect the book delivers exactly what it promised: the reader is encouraged to build &#8220;his own&#8221; Lisp.</p>
<p>In the end I got just what I wanted from this experience: I clearly improved my C and had the satisfaction to write a working programming language in a few hours scattered over three weekends.</p>
<p>Oh, just in case you were wondering, nobody paid me to write that blog post!</p>
</section>
<section id="Moving-on-to-Go">
<h2>Moving on to Go</h2>
<p>Next, I will probably be <a href="https://gobyexample.com/">learning Go</a>. Go is a weird language in that about half of the technical people I follow and look up to like it a lot, and the other half hates it. The latter tend to be users of languages with stricter type systems&#8230;</p>
<p>I have to admit that, if I had looked solely at the technical merits of both languages, I would probably have learned more <a href="http://www.rust-lang.org/">Rust</a> instead. I already know some Rust, but not enough to use it productively. Its main advantages are its (arguably) better type system and the fact that it can run without a GC or a frontend, making it suitable to write dynamic libraries.</p>
<p>However, Rust doesn&#8217;t look completely stable yet, whereas Go is already used in production by several serious companies. Also, I am a distributed systems programmer, and <a href="http://camlistore.org/">most</a> <a href="https://github.com/coreos/etcd">of</a> <a href="https://github.com/ha/doozerd">the</a> <a href="https://github.com/bitly/nsq">interesting</a> <a href="http://iris.karalabe.com/">codebases</a> I see popping up around in that field are written in Go.</p>
<p>Moreover, Go appears to be a simpler language than Rust. I suspect I can learn enough of it to read code &#8220;fluently&#8221; and write some much faster. So Go it is, and Rust will probably be next.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Editing Sublime Text packages</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-03-03-sublime-packages.html"
    />
    <id>tag:blog.separateconcerns.com,2014-03-03:sublime-packages</id>
    <published>2014-03-03T21:30:00Z</published>
    <updated>2014-03-03T21:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I have finally decided to configure Sublime Text 2 to have it autocomplete
Lua code the way I want it to.</p>
<p>For instance, by default, when you start typing <code>function</code> and hit TAB,
you get the following result:</p>
<pre><code class="language-lua">function function_name( ... )
  -- body
end
</code></pre>
<p>Instead I wanted this:</p>
<pre><code class="language-lua">function(self)
  error("unimplemented")
end
</code></pre>
<p>It turns out this is very simple. Go to <code>Preferences -&gt; Browse Packages...</code>
and open the Lua directory. There are several files there, including two
named <strong>function-(fun).sublime-snippet</strong> and <strong>function-(function).sublime-snippet</strong>
which do almost the same thing.</p>
<p>Remove the first one and open the second one in a text editor. Its content
should be something like:</p>
<pre><code class="language-xml">&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[function ${1:function_name}( ${2:...} )
    ${0:-- body}
end]]&gt;&lt;/content&gt;
    &lt;tabTrigger&gt;function&lt;/tabTrigger&gt;
    &lt;scope&gt;source.lua&lt;/scope&gt;
    &lt;description&gt;function&lt;/description&gt;
&lt;/snippet&gt;
</code></pre>
<p>Replace it by:</p>
<pre><code class="language-xml">&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[function(${1:self})
    ${0:error("unimplemented")}
end]]&gt;&lt;/content&gt;
    &lt;tabTrigger&gt;function&lt;/tabTrigger&gt;
    &lt;scope&gt;source.lua&lt;/scope&gt;
    &lt;description&gt;function&lt;/description&gt;
&lt;/snippet&gt;
</code></pre>
<p>&#8230; and that is all, the deed is done!</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>FOSDEM 2014</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-02-09-fosdem-2014.html"
    />
    <id>tag:blog.separateconcerns.com,2014-02-09:fosdem-2014</id>
    <published>2014-02-09T19:30:00Z</published>
    <updated>2014-02-09T19:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Last weekend I attended <a href="https://fosdem.org/2014/">FOSDEM</a>, the largest Open Source conference in Europe that takes place every year in Brussels. This was my fourth year in a row. Not much Lua this year, although I saw some <a href="https://github.com/ladc">familiar</a> <a href="http://specfun.inria.fr/tassi/">faces</a>. But I did listen to lots of interesting talks which I will try to summarize briefly.</p>
<section id="Reproducible-Builds-for-Debian-Jérémy-Bobbio">
<h2><a href="https://fosdem.org/2014/schedule/event/reproducibledebian/">Reproducible Builds for Debian</a> (Jérémy Bobbio)</h2>
<p>Debian developers want to provide their users a way to verify that the binary packages they distribute correspond to the source. To achieve reproducible builds they have to patch code that depends on things such as timestamps at build time. To make things worse, using a standard VM for builds would help but they refuse to do it &#8220;because they&#8217;re Debian.&#8221;</p>
</section>
<section id="Is-distribution-level-package-management-obsolete-Donnie-Berkholz">
<h2><a href="https://fosdem.org/2014/schedule/event/obsolete/">Is distribution-level package management obsolete?</a> (Donnie Berkholz)</h2>
<p>The Gentoo leader thinks distribution are doing a poor job of meeting the needs of users - especially developers and system administrators - in terms of package management. They are increasingly relying on configuration management tools (CFEngine, Puppet, Chef, Ansible&#8230;), language-specific package managers (RubyGems, NPM, LuaRocks&#8230;) and tools like Docker; however, distribution package managers do not integrate well with those.</p>
<p>This is a topic that interests me, following all the discussion that occurred at <a href="http://www.lua.org/wshop13.html">the last Lua Workshop</a>. After the talk I asked Donnie whether there was a discussion list somewhere dedicated to those issues. He told me that, to his knowledge, there was not. It may be a good idea to start one.</p>
</section>
<section id="Minix-3-on-ARM-Kees-Jongenburger">
<h2><a href="https://fosdem.org/2014/schedule/event/minix_3_on_arm/">Minix 3 on ARM</a> (Kees Jongenburger)</h2>
<p>Kees talked about the <a href="http://www.minix3.org/">Minix 3</a> architecture, how it was ported to ARM (with the BeagleBoard and BeagleBone devices as first targets) and plans for the future.</p>
<p>The main priority of the project is porting the NetBSD userland. As a former user I think this is an excellent idea. I may try the OS again someday if it becomes more &#8220;usable&#8221;, I really like some of the ideas behind it.</p>
</section>
<section id="Technical-introduction-to-the-deeper-parts-of-Sailfish-OS-Carsten-Munk">
<h2><a href="https://fosdem.org/2014/schedule/event/technical_introduction_to_the_deeper_parts_of_sailfishos,_a_qt5_wayland_based_mobile_os/">Technical introduction to the deeper parts of Sailfish OS</a> (Carsten Munk)</h2>
<p>Sailfish is probably the most interesting mobile OS project today, go <a href="https://sailfishos.org/">check it out</a> if you don&#8217;t know it yet. Carsten gave us an overview of the main parts of the OS and explained some funny things they did, such as making glibc and the Bionic libc co-exist within the same process. He also provided the audience an SSH access to an actual terminal. I <a href="https://twitter.com/pchapuis/status/429619422592905217">found liblua 5.1</a> on it :)</p>
</section>
<section id="Postfix:-lessons-learned-and-recent-developments-Wietse-Venema">
<h2><a href="https://fosdem.org/2014/schedule/event/postfix_lessons_learned_and_recent_developments/">Postfix: lessons learned and recent developments</a> (Wietse Venema)</h2>
<p>This talk introduced the Postfix least-privilege architecture, and then went on to explain recent improvements. Most of them revolve around fighting spam more efficiently. Postfix also migrated from Berkley DB to LMDB (see later), mostly for licensing reasons.</p>
</section>
<section id="NixOS:-declarative-configuration-Linux-distribution-Domen-Kožar">
<h2><a href="https://fosdem.org/2014/schedule/event/nixos_declarative_configuration_linux_distribution/">NixOS: declarative configuration Linux distribution</a> (Domen Kožar)</h2>
<p><a href="http://nixos.org/">Nix OS</a> is a Linux distribution built around the Nix package manager. It is one of those few distributions that completely disrupt the FHS, another one being <a href="http://www.gobolinux.org/">GoboLinux</a>.</p>
<p>The idea of Nix is that a package is the output of a function provided with some arguments and without side effects. There are a lot of interesting ideas there, such as atomic updates based on symlinks. However, doing this involves some heavy patching and that makes me uncomfortable.</p>
</section>
<section id="Iris-Decentralized-Messaging-Péter-Szilágyi">
<h2><a href="https://fosdem.org/2014/schedule/event/iris_decentralized_messaging/">Iris Decentralized Messaging</a> (Péter Szilágyi)</h2>
<p><a href="http://iris.karalabe.com/">Iris</a> is a messaging backend written in Go but with a language-agnostic interface. It is somehow similar 0MQ but goes further by removing the notion of a specific instance or process in favor of sets of those. Each machine runs a single daemon that does all the heavy lifting, and each client connects to it locally to interact with the system.</p>
<p>This is a very interesting project and I was a bit surprised I had never heard about it until now. The slides and live demos were also really good, with multiple Go code snippets running concurrently in a browser. Oh, and Gopher drawings!</p>
</section>
<section id="Camlistore-Brad-Fitzpatrick-and-Mathieu-Lonjaret">
<h2><a href="https://fosdem.org/2014/schedule/event/camlistore/">Camlistore</a> (Brad Fitzpatrick and Mathieu Lonjaret)</h2>
<p>The speakers showed off what the latest release of <a href="http://camlistore.org/">Camlistore</a>, a personal file storage system, can do. I already knew and liked the technical design of the project, but I was impressed by the progress made on usability since Brad&#8217;s talk at dotScale 2013. They have a new Web UI which is not complete yet but looks very promising. I really have to install my own node someday.</p>
</section>
<section id="Statically-compiling-Ruby-with-LLVM-Laurent-Sansonetti">
<h2><a href="https://fosdem.org/2014/schedule/event/llvmruby/">Statically compiling Ruby with LLVM</a> (Laurent Sansonetti)</h2>
<p>A very interesting talk on LLVM and how it helps when statically compiling a (very) dynamic language such as Ruby. Among other things, the optimization passes do an incredible job. However, it looks like JIT compilation is not as good as static compilation yet.</p>
</section>
<section id="What's-new-in-OpenLDAP-Howard-Chu">
<h2><a href="https://fosdem.org/2014/schedule/event/whats_new_in_openldap/">What&#8217;s new in OpenLDAP</a> (Howard Chu)</h2>
<p>This was, as I had hoped, mostly a talk about <a href="http://symas.com/mdb/">LMDB</a>. It confirmed what I already suspected: at least according to its author&#8217;s benchmarks, it outperforms any kind of competition in this space (embedded key-value stores). It is also one of the rare NoSQL DBs to implement MVCC transactions, in less than 10000 lines of C code and 32 kB of object code. If there is a piece of Open Source software I think you should not have missed in 2013, it is this one.</p>
</section>
<section id="Persistent-Memory:-Changing-the-way-we-store-data-Ric-Wheeler">
<h2><a href="https://fosdem.org/2014/schedule/event/persistent_memory/">Persistent Memory: Changing the way we store data</a> (Ric Wheeler)</h2>
<p>An interesting talk about how the shift away from rotating disk towards persistent memory storage affects the way we develop filesystems, kernels and any code that does I/O. This is not only about SSDs, but also about new kinds of devices that will come out soon and be an order of magnitude faster according to Ric.</p>
</section>
<section id="Concurrent-programming-with-Python-and-my-little-experiment-Benoit-Chesneau">
<h2><a href="https://fosdem.org/2014/schedule/event/concurrent_programming_with_python/">Concurrent programming with Python and my little experiment</a> (Benoit Chesneau)</h2>
<p>Benoit explained how he ported the Go concurrency model (Goroutines and Channels) to Python. I know Benoit and his <a href="https://github.com/benoitc/offset">offset</a> project so this was not foreign to me, but there are two pieces of interesting news: first, the next version will support multiple processes, freeing users from the GIL (yay!), and second he is thinking about changing the API to make it more like <a href="http://julialang.org/">Julia</a> and less like Go, because Julia is more similar to Python.</p>
</section>
<section id="NSA-operation-ORCHESTRA:-Annual-Status-Report-Poul-Henning-Kamp">
<h2><a href="https://fosdem.org/2014/schedule/event/nsa_operation_orchestra/">NSA operation ORCHESTRA: Annual Status Report</a> (Poul-Henning Kamp)</h2>
<p>This was a fun talk where <a href="http://phk.freebsd.dk/">phk</a> endorsed the role of a NSA agent who mistakes the FOSDEM amphitheater for the European Commission and explains how they sabotage attempts to give the general public more privacy. Lots of conspiracy theory in there obviously, but given the recent events, is this really so absurd? phk argued at the end of the talk that the solution should be political and not technical.</p>
<p>The format of the talk was a very good idea that worked really well on my brain tired by two days of conference, but also by two consecutive nights out filled with Belgian beer and other strong drinks. :)</p>
</section>
<section id="Conclusion">
<h2>Conclusion</h2>
<p>FOSDEM is still a very good event which you should consider attending next year. Besides the talks, you will enjoy the parties and meeting people you only knew online. I hopefully will see you there.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>How I write Lua modules</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-01-03-lua-module-policy.html"
    />
    <id>tag:blog.separateconcerns.com,2014-01-03:lua-module-policy</id>
    <published>2014-01-03T00:00:01Z</published>
    <updated>2014-01-03T00:00:01Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Hisham just published an article about his personal <a href="http://hisham.hm/2014/01/02/how-to-write-lua-modules-in-a-post-module-world/">guidelines for writing Lua modules</a>. Interestingly, I do a lot of things differently. Let us see how.</p>
<blockquote>
<p>Policy Bit #1: always require a module into a local named after the last component of the module’s full name.</p>
</blockquote>
<p>I tend to do that, but not always. Exceptions include:</p>
<ul>
<li>
modules with names that are too generic such as<code>path</code>, <code>utils</code> or <code>types</code> from Penlight, where I add an <code>x</code> at the end of the name (e.g. <code>pathx</code>);
</li>
<li>
modules which I use as alternatives for others, for instance <code>cjson</code> which I call <code>json</code>;
</li>
<li>
modules with names that are too long such as my own <code>multipart-post</code> which I call <code>mp</code> (it is not a valid identifier anyway, I would have to replace the dash by an underscore).
</li>
</ul>
<blockquote>
<p>Policy Bit #2: start a module by declaring its table using the same all-lowercase local name that will be used to require it.</p>
</blockquote>
<blockquote>
<p>Policy Bit #3: Use local function to declare local functions only: that is, functions that won’t be accessible from outside the module.</p>
</blockquote>
<blockquote>
<p>Policy Bit #4: public functions are declared in the module table, with dot syntax.</p>
</blockquote>
<p>I do something entirely different. First, I <strong>never</strong> use the function sugar in Lua, so instead of writing <code>local function f()</code> I write <code>local f = function()</code>.</p>
<p>I also do not declare the module table at the top of the module, I return it at the end, listing public functions explicitly. That means public functions are declared as locals. Arguably, they could be confused with private functions but that doesn&#8217;t bother me: if you are editing the code of the module, you probably know its interface. My public functions are also usually located at the end of the module.</p>
<p>To illustrate, Hisham&#8217;s module example is:</p>
<pre><code class="language-lua">local bar = {}

local function happy_greet(greeting)
   print(greeting .. "!!!! :-D")
end

function bar.say(greeting)
   happy_greet(greeting)
end

return bar
</code></pre>
<p>I would write instead:</p>
<pre><code class="language-lua">local happy_greet = function(greeting)
   print(greeting .. "!!!! :-D")
end

local say = function(greeting)
  happy_greet(greeting)
end

return {
  say = say,
}
</code></pre>
<p>One advantage of doing this is that when you call a public function in the module itself it is a local. That means that you avoid a table lookup, but also that <strong>it acts as a private function from the point of view of other functions in your module</strong>.</p>
<p>To understand what I mean, imagine that we change our mind and now want to expose <code>happy_greet</code> as well.</p>
<p>Hisham&#8217;s module becomes:</p>
<pre><code class="language-lua">local bar = {}

function bar.happy_greet(greeting)
   print(greeting .. "!!!! :-D")
end

function bar.say(greeting)
   bar.happy_greet(greeting)
end

return bar
</code></pre>
<p>Mine becomes:</p>
<pre><code class="language-lua">local happy_greet = function(greeting)
   print(greeting .. "!!!! :-D")
end

local say = function(greeting)
  happy_greet(greeting)
end

return {
  say = say,
  happy_greet = happy_greet,
}
</code></pre>
<p>The first thing we can notice is that we had to modify <code>say</code> in Hisham&#8217;s module and not in mine. But now imagine a &#8220;malicious&#8221; user does this:</p>
<pre><code class="language-lua">local bar = require "bar"

local fishy_greet = function(greeting)
  print(greeting .. " &gt;&lt;&gt;")
end

bar.happy_greet = fishy_greet

bar.say("yay")
</code></pre>
<p>With my module, the output would be <code>yay!!!! :-D</code>. With Hisham&#8217;s, the output would be <code>yay &gt;&lt;&gt;</code>: the user is allowed to monkey patch their module in a way that has an effect on functions they do not explicitly touch.</p>
<blockquote>
<p>Policy Bit #5: construct a table for your class and name it LikeThis so we know your table is a class.</p>
</blockquote>
<blockquote>
<p>Policy Bit #6: functions that are supposed to be used as object methods should be clearly marked as such, and the colon syntax is a great way to do it.</p>
</blockquote>
<p>Again, not how I do it :) Using CamelCase is a good idea but in the wild I see it more often for the actual module table, not for what Hisham calls the &#8220;class&#8221; table that is associated to <code>__index</code> in the metatable (I call it &#8220;methods&#8221;). Usually, it means (to me) that the constructor is <code>MyClass()</code>, whereas with a lowercase module name it would be <code>myclass.new()</code>. I use the latter and Penlight is an example of the former.</p>
<p>Just like I do not use the <code>function</code> sugar, I do not use the colon syntax to define functions. Moreover, <strong>I often call methods with explicit self in the module itself</strong>. Any idea why? Yeah, same as above, resistance to monkey patches. I agree that this is not a very convincing argument given that I often skip the little <code>local print = print</code> dance.</p>
<p>Other advantages include, again, less call overhead and the ability to call methods consistently on objects before they have their metatable. This is sometimes useful in constructors.</p>
<p>So where Hisham&#8217;s class example is:</p>
<pre><code class="language-lua">local myclass = {}

local MyClass = {}

function MyClass:some_method()
   -- code
end

function MyClass:another_one()
   self:some_method()
   -- more code
end

function myclass.new()
   local self = {}
   setmetatable(self, { __index = MyClass })
   return self
end

return myclass
</code></pre>
<p>I would write:</p>
<pre><code class="language-lua">local some_method = function(self)
  -- code
end

local another_one = function(self)
  some_method(self)
  -- more code
end

local methods = {
  some_method = some_method,
  another_one = another_one,
}

local new = function()
  return setmetatable({}, {__index = methods})
end

return {new = new}
</code></pre>
<p>Of course sometimes I do <strong>not</strong> want to resist monkey patches, and in that case I use colon syntax for calls, but never for definitions.</p>
<blockquote>
<p>Policy Bit #7: do not set any globals in your module and always return a table in the end.</p>
</blockquote>
<p>This one I cannot disagree with. It is the only rule that has an obvious externally visible effect. Do this or you will annoy all your users.</p>
<p>I think this is what matters the most in the end: modules always return tables and never create globals. The rest is mostly implementation details!</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>C: what I had forgotten</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2014-01-02-clang-forgotten.html"
    />
    <id>tag:blog.separateconcerns.com,2014-01-02:clang-forgotten</id>
    <published>2014-01-02T22:10:00Z</published>
    <updated>2014-01-02T22:10:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Thanks to my <a href="http://blog.separateconcerns.com/2013-12-12-infinity-beyond.html">new job</a> I will have the opportunity to write a lot more C than in the last three years. To prepare for this, I decided to read some old C89 books again and see what I remembered. Here are some of the quirks I had forgotten (or never known about).</p>
<ul>
<li>
<p>Declarations cannot be interleaved with other statements in ANSI C. They have to happen at the beginning of a bloc.</p>
</li>
<li>
<p>The default type of functions is <code>int</code>, i.e. <code>f(void) {};</code> is valid and equivalent to <code>int f(void) {};</code>.</p>
</li>
<li>
<p>The C89 standards allows implementations to only consider the first 31 characters of identifiers. It is possible to use longer identifiers but they must differ in their first 31 characters to avoid collisions. External identifiers (seen by the linker) are even worse: the implementation can be case-insensitive and only take the first 6 (!) characters into account.</p>
</li>
<li>
<p>Using the wrong type on an union is usually undefined. However, if some members of the union start with the same attributes, that common initial part can be used interchangeably.</p>
</li>
<li>
<p>This:</p>
</li>
</ul>
<pre><code class="language-c">const struct stuff_s {
  /* stuff */
} stuff_t;
</code></pre>
<p>means the same thing as:</p>
<pre><code class="language-c">struct stuff_s {
  /* stuff */
} const stuff_t;
</code></pre>
<p>but if you wrote it you probably meant this instead:</p>
<pre><code class="language-c">struct stuff_s {
  /* stuff */
};
typedef const struct stuff_s stuff_t;
</code></pre>
<ul>
<li>
<p>I already knew sequence points can be tricky, but this bit of code tricked me anyway: <code>a[i] = i++;</code>. There is no sequence point so the result is undefined.</p>
</li>
<li>
<p>The standard allows the <strong>representation</strong> of <code>NULL</code> to be different from <code>0</code>, but its <strong>value</strong> has to be <code>0</code> so you can almost always write code that assumes <code>NULL == 0</code> and be right provided you do not <strong>actually test</strong> <code>NULL == 0</code>.</p>
</li>
</ul>

      </div>
    </content>
  </entry>
  <entry>
    <title>To Infinity and Beyond</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-12-12-infinity-beyond.html"
    />
    <id>tag:blog.separateconcerns.com,2013-12-12:infinity-beyond</id>
    <published>2013-12-12T21:30:00Z</published>
    <updated>2013-12-12T21:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <section id="Goodbye-Moodstocks">
<h2>Goodbye Moodstocks</h2>
<p>Friday 20th will be my last day at Moodstocks. I am leaving a company where, after three years and a half, I was the most senior employee. As you may imagine, it was not an easy decision.</p>
<p>Moodstocks has grown up since I joined it. After several pivots, the founders have assembled a <a href="https://moodstocks.com/humans.txt">great team</a> I will miss, and together I dare say we have advanced the state of mobile image recognition. Recently, we have also been looking at other technologies related to mobile.</p>
<p>We have released two new products. The first one is what <a href="http://blog.separateconcerns.com/2013-06-20-three-years-proprietary-projects.html">was known as Physalis</a> and took the commercial name <a href="https://winch.io/">Winch</a>. This is what I have been mostly involved with for the last few months. I believe it has the potential to become the reference solution to write native mobile applications that react quickly and work offline.</p>
<p>The second product is <a href="http://overlay.ms/">Overlay</a>, a mobile application that lets you buy products from paper catalogs online. Years after Pikadeo and Notes, it is finally time for a real application available in the stores, leveraging Moodstocks&#8217; <a href="https://moodstocks.com/">image recognition SDK</a> and Winch, showcasing the best of both technologies. But beyond pure tech, it is also a demonstration of Augmented Reality as we like it: fast, predictable, purposeful. No need for 3D models.</p>
<p>With those two products in the pipes, choosing to leave was incredibly difficult. But I did nevertheless, because of an opportunity I could not turn down.</p>
</section>
<section id="Hello-Lima">
<h2>Hello Lima</h2>
<p>So, what next for me? After two weeks to see my family, eat too much and have some welcome rest, I <a href="http://www.kickstarter.com/projects/cloud-guys/plug-the-brain-of-your-devices/posts/691351">will be joining</a> the team developing <a href="http://meetlima.com">the Lima</a> as a core developer.</p>
<p>The Lima, which promises no less than to solve the personal data storage problem, is the first hardware product I backed on Kickstarter. I was thinking: &#8220;this won&#8217;t be easy, but if those guys can do it, I want that device.&#8221;</p>
<p>The Kickstarter went (very) well, so they started looking for help and got in touch. I was curious and decided to meet the founders. After a Saturday morning spent discussing the project at Starbucks, I was convinced: they are the right people to do this.</p>
<p>For years I have been convinced that ubiquitous computing is one of the next big things in technology and wanted to be part of it. As I see it, Lima gives me this opportunity today.</p>
<p>So it looks like my short-term future holds some Unix development and a good dusting of my rusty C. I may try to sneak a Lua interpreter in that box at some point, but please don&#8217;t tell the others! ;) Severin and Gawen have high expectations and I do not expect much relaxing but hey, it should be fun to live the adventure of Early Stage again.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Lapis: Lua for the Web</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-09-01-lapis.html"
    />
    <id>tag:blog.separateconcerns.com,2013-09-01:lapis</id>
    <published>2013-09-01T16:00:00Z</published>
    <updated>2013-09-01T16:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I use different programming languages for different tasks, but the one I prefer is <a href="http://www.lua.org/">Lua</a>. I have always wanted to use it for the Web, and in a way I already do: this blog is a static website generated by a custom Lua program. I have also written several services that can speak HTTP+JSON in Lua. For larger, HTML-based Web applications however, I have never found the framework I wanted. I have tried <a href="http://www.keplerproject.org/en/Orbit">several</a> <a href="https://github.com/zedshaw/Tir">of</a> <a href="https://github.com/nrk/mercury">them</a>, but kept coming back to <a href="http://flask.pocoo.org/">more dependable platforms</a>.</p>
<p>Last March, I gave <a href="http://leafo.net/lapis/">Lapis</a> a try. It is a relatively new framework written by <a href="http://leafo.net/">Leaf Corcoran</a>, the author of <a href="http://moonscript.org/">MoonScript</a>, a programming language that compiles to Lua (like CoffeeScript for JavaScript). Lapis is powered by <a href="http://openresty.org/">OpenResty</a>, an <a href="http://www.techempower.com/benchmarks/">incredibly fast</a> web application server that run <strong>inside</strong> the <a href="http://nginx.org/">nginx</a> Web server and is already used by large websites like <a href="http://en.wikipedia.org/wiki/Taobao">Taobao</a> and <a href="https://www.cloudflare.com/">CloudFlare</a>.</p>
<p>Lapis was built with MoonScript in mind, so I had to hack around it to make it work with plain Lua. It worked but was too verbose, so I eventually <a href="https://github.com/catwell/fun-with-lapis/commit/42af204c6974f124c2b4856102e260d8ad7baca6">gave up</a> on that and on Lapis altogether. But that was Lapis version 0.0.1! Leaf continues to improve it and recently released version 0.0.4. Last Friday evening, on a train to Bordeaux, I decided to give it another try.</p>
<p>Lapis now <a href="http://leafo.net/lapis/reference.html#lapis-in-lua">natively supports Lua</a> and has improved in various aspects. I have found it comfortable to write the views and the configuration file with the MoonScript DSLs provided by the framework. For logic (models and controllers) I used Lua directly since I prefer its syntax to MoonScript for regular code.</p>
<p>I have published <a href="https://github.com/catwell/badakhshan">a small skeleton application</a> which demonstrates this dual languages style to GitHub. I chose to use Redis for the datastore because I know it well and had it running on my laptop, so I did not use the database integration layer of MoonScript which is designed primarily for PostgreSQL (but it looks nice as well). This application is a kind of Hello World but it demonstrates most features of the framework, including <a href="http://leafo.net/lapis/reference.html#lapis-applications-sub-applications">sub-applications</a>, <a href="http://leafo.net/lapis/reference.html#html-generation-html-widgets">widgets</a>, <a href="http://leafo.net/lapis/reference.html#html-generation-layouts">layouts</a>, <a href="http://leafo.net/lapis/reference.html#exception-handling">exception-handling</a> and <a href="http://leafo.net/lapis/reference.html#input-validation">input validation</a>.</p>
<p>If you want an example of a larger Lapis codebase with a different style, <a href="http://rocks.moonscript.org/">MoonRocks</a> is written in Lapis and <a href="https://github.com/leafo/moonrocks-site">its code is on GitHub</a>.</p>
<p>So, what did I think of it? Well, finally I could see myself write a serious Web application in Lua! I will still choose Python and Flask in a professional setting because it is is a more stable, more feature-complete stack, and because I would not want to ask a whole team to learn both Lua <strong>and</strong> MoonScript to work on the project. But if I make a Web application as a personal side project, I will certainly try to use Lapis for that.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>Three years of (proprietary) projects</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-06-20-three-years-proprietary-projects.html"
    />
    <id>tag:blog.separateconcerns.com,2013-06-20:three-years-proprietary-projects</id>
    <published>2013-06-20T00:40:00Z</published>
    <updated>2015-11-11T21:15:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Some of the code I write is Open Source, but these days most of it is closed source and property of <a href="http://www.moodstocks.com/">Moodstocks</a>, the startup I work for. For the last three years I have had the chance to work on a lot of really interesting projects, the most significant of which I will talk about now. If you are still a student, maybe that can inspire you to join a startup. Maybe you will even decide to join us in our quest to advance mobile image recognition and applications in general.</p>
<section id="Harvest-the-Pikadeo-crawler">
<h2>Harvest, the Pikadeo crawler</h2>
<p>When I joined Moodstocks in April 2010 the team was working on a mobile price comparison application called Pikadeo. The pitch was that you could take a picture of any cultural product (CD, DVD, book&#8230;) and it would give you a list of places where you could buy it, sorted by price.</p>
<p>The iOS application itself, largely designed by <a href="https://twitter.com/Arcank">Louis Romero</a> who had interned at Moodstocks and left just as I arrived, was working. The image recognition technology was working too, although it was purely server-side. The team was already researching how to leverage client-side processing but it was really just a crazy idea at that point, so Pikadeo was doing what most &#8220;mobile&#8221; image recognition software still does: send JPEG frames to the server.</p>
<p>What was missing was the data. We needed to crawl several large e-commerce websites, extract product images and metadata, send the former to the image recognition engine and the store the latter in a database. So I set out to write a crawler in Ruby, which was the dynamic language of choice of the team at the time. Moodstocks was a Ruby / C++ shop due to the background of the founders. Obviously things have changed a lot since then.</p>
<p>I tried to use Hadoop for the job, mostly because it was trending at that time and I had access to Amazon&#8217;s Elastic MapReduce. I soon understood that 1) the Hadoop Streaming interface was not quite there yet so I would have to switch to Java and 2) the Map/Reduce paradigm was not the best for the job anyway.</p>
<p>After reading a few papers on crawling (I had to anyway, since that project would be the basis of my MSc thesis, but it actually helped a lot) I ended up writing a kind of Master/Worker system, with work queues in <a href="http://kr.github.io/beanstalkd/">Beanstalkd</a> and metadata storage in Amazon&#8217;s SimpleDB, which did the job. It did the job a little too well, actually, since it ended up DDoSing an e-commerce website for a few seconds during a performance test for my thesis. Fortunately I was monitoring it and hit the stop button&#8230;</p>
<p>After setting reasonable speed limits and balancing the requests between various websites, Harvest was fast enough for our needs. The bottleneck became the image search engine itself, I will expand on that later.</p>
<p>Due to the deprecation of the Pikadeo product, Harvest is no longer used today. It is probably a good thing: it was my first Ruby program so the code was awful, it was way too complex and too tied to AWS (the master instance would run and kill worker instances, it relied a lot on SimpleDB&#8230;). That being said, the crawling model was sound.</p>
</section>
<section id="Acorn">
<h2>Acorn</h2>
<p>Once we got crawling sorted out, the image recognition engine itself became the problem. Oak (it has become a tradition to use plant-related names for our projects internally) had been almost entirely written by <a href="https://twitter.com/deltheil">Cédric</a>, Moodstocks&#8217; CTO. It was a piece of C++ software, with the image recognition parts isolated in dynamic libraries and a <a href="http://thrift.apache.org/">Thrift</a> layer to interface with the core Ruby on Rails Web application. It was multithreaded, designed to run on a single multicore EC2 instance.</p>
<p>The scalability pain point, it turned out, was not CPU load. The index was stored in a B+ Tree in <a href="http://fallabs.com/tokyocabinet/">Tokyo Cabinet</a>, a tool we like a lot and still use today in other parts of our system. The problem was that when we indexed millions of images the dataset would inevitably become very large, larger than the available memory. The system would still be very responsive on most reads, but writes would invalidate large chunks of the in-memory cache and result in long pauses.</p>
<p>Latency is the enemy when you write image recognition software, so we decided not to sacrifice it: all the index had to fit in RAM. We decided to consider RAM as our primary datastore. That decision would bring about our later choices.</p>
<p>Since rebuilding an index can be <strong>very</strong> long we wanted something that could persist even if the engine crashed or had to be restarted for an update. Soon it became obvious that Redis could be the answer. However it was missing some commands that we needed, especially one that would insert the same key with different values in different maps (if you have already written inverted indices you may understand why, otherwise have a look at <a href="http://files.catwell.info/presentations/2011-osdcfr-redis-iidx/">that presentation</a>). Lua scripting was what we needed, but it wasn&#8217;t there yet so I ended up forking Redis to develop it in C while <a href="http://files.catwell.info/presentations/2011-osdcfr-redis-iidx/img03.png">lobbying for scripting support</a>. Acorn was, to my knowledge, the first application to run Redis 2.5 in production, and the first one to use Redis scripting too. We never encountered any Redis-related crash.</p>
<p>Now, to have the index fit entirely in RAM, we would have to distribute it across different machines, so Acorn would have to be a distributed system. Knowing that, I chose to make Acorn nodes single-threaded: they would communicate by message passing and we would have several of them per instance.</p>
<p>We chose <a href="http://msgpack.org/">MessagePack</a> for serialization of Redis values, and I started looking at <a href="https://github.com/msgpack/msgpack-rpc">MessagePack-RPC</a>. It had a lot of the pieces that I wanted for the distribution part, and one major problem: it was only usable in Ruby. But we were not CPU-bound&#8230; Would it be sensible to write the engine in a dynamic language? I started investigating that possibility. Our C++ libraries already had Ruby bindings that we used for vision R&amp;D, and the little number crunching Oak Core did (mostly different scoring algorithms) turned out to be fast enough in Ruby.</p>
<p>So Acorn ended up as a distributed system written in Ruby, with MessagePack-RPC for communication and a fork of the development branch of Redis at its heart. It used MessagePack-RPC for communication with our Rails stack too.</p>
<p>In retrospect, relying on two unstable pieces of software was risky. It turned out well, and Redis was definitely the right choice, especially since Lua Scripting now allows us to use a regular, stable 2.6 version. <a href="http://www.zeromq.org/">0MQ</a> would probably have been a better technical choice than MessagePack-RPC, and plain C better than Ruby, but I believe those choices saved us development time, and time to market was important. Acorn is still in production today, doing its job for legacy clients who use online recognition.</p>
</section>
<section id="Moodstocks-Notes">
<h2>Moodstocks Notes</h2>
<p>You now know that when I joined Moodstocks it was trying to be a B2C company. However we were seeing interest in licensing our technology, and began to envision a B2B product: Moodstocks API.</p>
<p>When you write an API, especially as a product, you must write applications for it simultaneously. They serve two purposes: demonstrate what your API can do, and help you figure out how it should be improved. We set out to do that with two mobile applications, one of which was Notes.</p>
<p>The original idea I proposed was, I think, simple: <a href="http://www.google.com/sidewiki/">Google SideWiki</a> (RIP) for the real world. That is: you walk in the street, you see something interesting, you take a picture of it, you get a comments thread. If you are the first to do so, you get to leave the first comment (yay, first!!1).</p>
<p>As we were looking to add virality to it, that idea developed into a kind of mostly mobile social network where both people and objects could be followed. Objects actually had their own timeline with an associated Atom feed, which you could reach by browsing or, of course, as the result of an image search.</p>
<p>Technically the server-side part of Notes was a rather classic Sinatra application. The most interesting part of it was that it used some kind of CQRS architecture with all reads coming from Redis and all writes going to log-structured storage. The very nice thing about it was that any part of it could be replayed so it was almost trivial to reproduce bugs or replicate production incrementally to a development setup.</p>
<p>The iPhone application, on the other hand, was one of the nicest and most complex ones we have ever written. I wasn&#8217;t responsible for it so I won&#8217;t get into details here but the latest internal version we never actually released was IMO a thing of beauty.</p>
<p>As it turned out, Notes got a reasonable amount of <a href="http://techcrunch.com/2010/12/10/moodstocks-notes-is-stickybits-without-the-barcodes/">online</a> <a href="http://mashable.com/2010/12/18/moodstocks/">press</a> after our CEO showed it to Michael Arrington at the Le Web conference. This got us a few users and we briefly thought about making it a product in its own right. I wrote a wxPython GUI to analyze logs, trying my hand for the first time at techniques like cohort analysis.</p>
<p>Eventually we took the decision not to invest more time in the idea: we were a small team and our now core B2B business needed our attention. Notes&#8217; success was a long shot and would have required significant time and money investment so I guess it was the right decision, although I would love to see someone revisit the idea.</p>
</section>
<section id="Moodstocks-API-v2">
<h2>Moodstocks API v2</h2>
<p>As I said, Notes was written to help us design our API. Using its feedback and that from the few users of our v1 API, which was more some kind of beta, I set out to write version two.</p>
<p>I will not expand too much on all its aspects here, REST-ish API design being well covered in the literature and online (start <a href="http://amzn.to/17nHJmF">here</a>).</p>
<p>The main differences with API v1 were the use of JSON instead of XML, and the ability to index a single image by uploading it to the API using multipart post. Previously, users would upload a XML list of image URLs and associated IDs; we would download them and tell you when indexing was over. Now users index single images and changes are taken into account instantly. The necessity for that was a lesson from Notes and user feedback, and it was made possible by Acorn.</p>
<p>Another interesting choice was the authentication method, HTTP Digest, which we kept from version one. Theoretically, it had all the right properties and was a standard, so it was the best choice. What we had not realized is how many <a href="http://devblog.avdi.org/2013/02/04/the-trouble-with-http-digest-authentication/">implementations were broken</a> or incomplete (i.e. not supporting nonce reuse, which is a necessity on mobile to reduce the number of HTTP requests). I ended up having to submit patches to a lot of them, and I am not even mentioning .NET land&#8230; If I had to do it again today I would probably go with Basic Auth and SSL.</p>
</section>
<section id="Acorn-Quantizer">
<h2>Acorn Quantizer</h2>
<p>Earlier, I wrote about how I had made Acorn processes single-threaded. This had some advantages, but also a big inconvenient.</p>
<p>Part of the image search process involves quantizing features, which means associating vectors in a many-dimensional space to integers. To do this the <a href="http://en.wikipedia.org/wiki/Curse_of_dimensionality">curse of dimensionality</a> forces you to use an approximate nearest-neighbor search algorithm.</p>
<p>The way it works is: take a large number of features from a representative dataset and use some kind of clustering algorithm (e.g. k-means) on them to obtain a bunch of centroids (a &#8220;vocabulary&#8221;), then process these centroids to obtain a datastructure called kd-forest which will be used to perform nearest-neighbor search (a &#8220;dictionary&#8221;).</p>
<p>Vocabulary generation is clearly an offline task that requires a lot of number crunching and is done as little as possible. Generating the kd-forest, on the other hand, takes from a handful of seconds to a few minutes depending on the size of the vocabulary, so it is frequently done on engine startup. The kd-tree itself only exists in RAM.</p>
<p>The problem with that was that a kd-forest is a rather large datastructure. In our case it occupied hundreds of MB of RAM and took about one minute to generate. That was OK with Oak, where it was shared between threads, but with Acorn that overhead had to be paid for every process, both in space and time. We had to find a way to share the kd-forest across Acorn nodes on the same machine, and if possible to make startup faster.</p>
<p>The solution I opted for was to rewrite the whole quantizer. Previously we had been using popular Open Source libraries for this, but they didn&#8217;t do what I wanted.</p>
<p>I wrote the kd-forest generation algorithm as a <a href="http://luajit.org/">LuaJIT</a> program. It was the first Lua program officially used in production at Moodstocks, although as you will see it was only run offline. What it does is take centroids as input, generate a kd-forest and serialize it in a way easily readable in C thanks to the FFI. It can also actually perform nearest-neighbor searches but this is only used for test purpose.</p>
<p>Once the kd-forest is serialized, it can be loaded into <a href="http://beej.us/guide/bgipc/output/html/multipage/shm.html">system shared memory</a> quite fast. A C library can then be used in every Acorn process to access this shared memory read-only and perform nearest-neighbor searches.</p>
<p>The idea is simple once you stop under-estimating the capabilities of SHM on Linux. By default it usually limited to a few MB so you have to increase it a lot for this to work (it can be done with <a href="http://linux.die.net/man/8/sysctl">sysctl</a>). The implementation, on the other hand, is far from trivial. My code uses a <strong>lot</strong> of pointer arithmetics, I should probably clean it up someday, but in the meantime it does its job perfectly.</p>
</section>
<section id="Seed">
<h2>Seed</h2>
<p>The Acorn Quantizer was the last major improvement to our online search stack. Around that time, we resolved on a major technological shift: we would perform image recognition on mobile devices directly instead of doing it on the server. Of course, initially, we would have an hybrid approach where on-device recognition would work as a kind of cache, but the mobile was where we would focus our efforts.</p>
<p>Doing on-device image recognition, though, almost meant starting from scratch: we had to make different technological trade-offs, use very different algorithms, and that meant writing an almost entirely new image recognition stack. We named that project Seed.</p>
<p>Seed encompasses a lot of things now, but at its core are proprietary Computer Vision algorithms that we set out to develop with Cédric and <a href="https://twitter.com/mbrenon">Maxime</a>, who had joined us by then. We would discuss them as a team, then Maxime and Cédric would implement them in C while I would work on a Lua version.</p>
<p>The big picture is that some processing is done on the server at indexing time to generate signatures which are then sent to the client. Server-side software used to be entirely Lua, client-side software entirely C, but we decided to implement the whole stack in both languages. I think that was one of the best ideas we ever had. Being able to compare results avoided errors on both sides (tricky things like off-by-ones were always noticed thanks to the fact that Lua is 1-based, floating-point math issues were found&#8230;). Lua allowed faster prototyping on some parts and it was interesting to compare the different architectural choices we were making.</p>
<p>With the current (second) generation of the Seed algorithms, we are actually mostly using the C implementation through the LuaJIT FFI on the server side now. That is because I have been working on other projects while the rest of the team (which is not as comfortable with Lua) was developing them, so I would have been a bottleneck if we had kept the dual stack approach. I may well bring the Lua branch up to date someday though, who knows?</p>
</section>
<section id="chksrv-and-chkcoherence">
<h2>chksrv and chkcoherence</h2>
<p>Moodstocks&#8217; server-side architecture is <a href="/2013-01-02-startups-soa.html">some kind of SOA</a>. That means we have a lot of different services that run as daemons and need to stay up. chksrv is a medium-sized program in Bash that takes care of this. It is deployed on every instance with a configuration file that indicates which services should be running on that instance, and it makes sure that they are (correctly). It also checks if other instances are up. If something goes wrongs, it warns the &#8220;ops team&#8221;, who is basically me and Cédric as a backup in case I am not available.</p>
<p>chksrv is a very useful piece of software but I was a bit worried by its growth as we added services. Standardizing the way we deamonize processes helped a lot with that by increasing code reuse (thank you <a href="http://libslack.org/">libslack</a>).</p>
<p>chkcoherence is the ideal complement to chksrv: where the latter checks if services are running, the former verifies that they are doing things right. It is also written in Bash at the top level. I have already written about its concept <a href="/2013-05-28-coherence-checks.html">here</a>.</p>
</section>
<section id="Anemone">
<h2>Anemone</h2>
<p>Anemone is the project that deals with everything related to metrics and measurements at Moodstocks. It is written in Lua and has quite a few different roles:</p>
<ul>
<li>
collect logs and data from production instances;
</li>
<li>
generate internal daily and weekly reports with business metrics for the platforms and email them to the team;
</li>
<li>
generate technical reports for operations (e.g. growth of different datasets);
</li>
<li>
generate weekly reports per application and email them to our platform customers;
</li>
<li>
generate custom reports tailored to the needs of our enterprise customers.
</li>
</ul>
<p>It also has a web-based dashboard for the team with high-level KPI, written in JavaScript and <a href="http://code.google.com/p/flot/">flot</a>. Someday I might integrate Brett Slatkin&#8217;s <a href="http://bslatkin.github.com/cohorts/">Cohort Visualizer</a> into it.</p>
</section>
<section id="Dandelion">
<h2>Dandelion</h2>
<p>I said earlier that with Seed we generate image signatures on the server and send them to the mobile clients where they are used for recognition. Dandelion is the code name of the service responsible for that.</p>
<p>It turns out efficiently sending millions of image signatures per day, over slow and unreliable networks, to devices everywhere in the world, is not trivial. So Dandelion, more than software, is a synchronization protocol and its implementation; a range of tricks to make the best of mobile networks packaged as software. It is one of the reasons (along with all the innovation on CV algorithms and their optimized client-side implementation) why we can propose client-side recognition with databases of thousands of images or even videos, an order of magnitude more than our competitors.</p>
<p>The server part of Dandelion is written in Lua and depends on pieces like Redis and Beanstalkd, which is why I wrote <a href="https://github.com/catwell/haricot">haricot</a>.</p>
</section>
<section id="Physalis">
<h2>Physalis</h2>
<p>Finally, Physalis is the project I am currently working on. It has not been released yet so I won&#8217;t get into the details, but I can explain the reasoning behind it.</p>
<p>While we were building Dandelion and through our experience with our clients, we learned the following things:</p>
<ul>
<li>
writing mobile applications that work offline but keep their data up to date is tricky;
</li>
<li>
most developers who attempt to implement it from scratch end up with a broken solution or just give up;
</li>
<li>
when you succeed it makes your applications a <strong>lot</strong> better.
</li>
</ul>
<p>So we thought: we have done it, why not make it accessible to everybody? This is what Physalis is: Moodstocks&#8217; image signature distribution system generalized so that you can leverage it for your own mobile application.</p>
<p>Physalis will be available in private alpha for selected users soon, under its real brand name (Physalis is only its &#8220;internal plant-themed name&#8221;). If you are interested in trying it out, <a href="https://twitter.com/pchapuis">get in touch</a>. The requirements are that you should be making a mobile application and ready to communicate on a regular basis with us: we are doing this alpha to collect useful feedback.</p>
<blockquote>
<p>EDIT: Physalis was eventually released in August 2013 as <a href="https://winch.io/">Winch</a>.</p>
</blockquote>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Coherence checks in SOA</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-05-28-coherence-checks.html"
    />
    <id>tag:blog.separateconcerns.com,2013-05-28:coherence-checks</id>
    <published>2013-05-28T23:10:00Z</published>
    <updated>2013-05-28T23:10:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Recently I found a rare, ugly bug in a piece of software that had been in production at Moodstocks for 6 months. The bug itself is not that interesting, but the way I found and fixed it is.</p>
<section id="Story-of-a-bug">
<h2>Story of a bug</h2>
<p>Imagine you have a database where you can index some documents in a full text search engine. Indexing can be turned on and off on a per document basis.</p>
<p>As the size of your dataset increases, you outgrow it and decide to use a separate service for search. So you change your code such that documents which must be indexed are sent to that service, and you add a boolean field in your main datastore to indicate whether the document is indexed or not.</p>
<p>All is fine until one day you refactor this code a bit too fast and part of the logic for document updates becomes something like this:</p>
<pre><code class="language-lua">if document.indexed then
  search_engine:index(document)
  document.indexed = false -- &lt;-- WAT?
end
</code></pre>
<p>Of course, in practice, it is less trivial and only happens in rare corner cases, so your tests don&#8217;t catch it&#8230;</p>
</section>
<section id="This-ain't-normalized">
<h2>This ain&#8217;t normal(ized)</h2>
<p>This kind of bug in a system can be very nasty. What happens when it is triggered is that the worldviews of two subsystems (here the datastore and the index) are not coherent anymore.</p>
<p>If you are a programmer not used to distributed systems, you may think that the problem is that the information &#8220;the document is indexed&#8221; is duplicated. State is bad, but duplicate state is plain wrong, just always ask the index for that information and drop that &#8220;indexed&#8221; field!</p>
<p>In a normal application setting you would be right, but this is one of the main differences between SOA and OOP. There are two reasons why you do not want to do that. The first one is performance: this may generate more internal network requests. Its importance could be discussed at length (&#8220;Is it some form of premature optimization?&#8221;).</p>
<p>The second reason is much more important though: if you do that, your index becomes a data-critical service. That means you cannot lose its state without losing information, so you have to back it up seriously. This simple boolean field in the datastore is enough to rebuild the whole index, making it non-critical.</p>
<p>So that leaves us with denormalized data and its own problems. How do we mitigate them?</p>
</section>
<section id="Invariants-are-sexy">
<h2>Invariants are sexy</h2>
<p>Once you have denormalized data, your problem is to keep it coherent. That means that there are invariants that must be verified at all times by the various states of the subsystems. Or rather, because of asynchronous jobs, invariants that shouldn&#8217;t remain unverified for too long.</p>
<p>Those invariants are almost always properties on sets. For instance, if you have a forum where only registered users can comment, users who have commented must be a subset of users who have confirmed their email. In my case, the set of documents indexed in the search engine must be equal to the set of documents flagged as indexed in the main datastore.</p>
<p>The big idea is that every time you denormalize data you should write invariants that ensure coherence. These invariants are checked by scripts that can be run at every transaction in some cases, but are more usually cronned. You should also have procedures to reconcile (repair) the data in case of incoherence. I am not a huge fan of having them run automatically: incoherence often reveals bugs, so humans should check where it comes from and fix it.</p>
<p>In our case, the script responsible for coherence checks warned me that a few documents belonging to the same user were present in the search engine but not flagged as indexed. I asked the application logs what had happened to these documents around the time when the incoherence occurred, and saw they had all been updated. I looked up the relevant code path in application code&#8230; and facepalm-ed. I had pushed that code to production half a year ago, and it was obviously wrong.</p>
</section>
<section id="Conclusion">
<h2>Conclusion</h2>
<p>The moral of it all is not, as I already discussed, that you should not denormalize data. It is not that we should write more tests, either. At least it is not what I want the takeaway to be (we do test these things more carefully now, but edge cases can always slip through).</p>
<p>What I think this story shows is that, if you write distributed systems that handle denormalized data, you should have:</p>
<ul>
<li>
something to check invariants to detect issues;
</li>
<li>
exhaustive logs and tools to diagnose them;
</li>
<li>
reconciliation scripts to fix them.
</li>
</ul>
<p>I cannot imagine releasing a distributed system that does not have those things. They are even more important than a comprehensive test suite to me. Moreover, the coherence checks can also be run in the test suite itself (on mocks for instance) so writing them is always a win-win.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Werner Vogels on Skills</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-03-24-vogels-skills.html"
    />
    <id>tag:blog.separateconcerns.com,2013-03-24:vogels-skills</id>
    <published>2013-03-24T19:30:00Z</published>
    <updated>2013-03-24T19:30:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I found a talk by Werner Vogels, the CTO of Amazon <a href="http://blog.separateconcerns.com/2013-01-02-startups-soa.html">who is a role model of mine</a>, on <a href="http://skillsmatter.com/podcast/design-architecture/21st-century-application-architectures">21st century application architectures</a>.</p>
<p>After his presentation, someone from the audience asks him what skills he is looking for to run these services. His answer (starting at about 40:45 in the video) is so interesting that I thought it would be worth it to write it down. Here it is:</p>
<blockquote>
<p>What kind of skillset am I looking for for people to build these [infrastructure services] and manage them? I think I&#8217;m looking for a set of standard things that we look for in every Amazonian PM, which is&#8230;</p>
<p>A very strong sense of ownership. This is: the stuff that you&#8217;re building is not something that your boss tells you to build. You have to take pride in what you do, and you have to be someone [who] &#8220;does not like his or her own smell&#8221;. You have to be [highly] self-critical.</p>
<p>[You] have to be able to disagree but be able to commit to actual decisions being made, things like that. There&#8217;s this set of what we call Amazon leadership skills that I would be looking for in any engineer that we hire.</p>
<p>[In many] of these services we&#8217;re looking for people with very good distributed systems skills, or at least with very good fundamental distributed systems skills which they have learned in school. Actually, it isn&#8217;t that you have to have built a distributed system when you were in school. Remember: no professor ever had a real job in their life, right? And so they didn&#8217;t teach you how to build systems. But to have a truly fundamental understanding of how to read fault-tolerant algorithms, of how to think in a fundamental way about scaling&#8230; and those kind of things, is something that we are absolutely looking for.</p>
<p>Some demonstration, if you&#8217;re just out of school, [that] you&#8217;ve been involved with some practicals. Have you contributed to an Open Source project? Are you involved with programming groups? We&#8217;re looking for someone that is actually capable of doing hands-on work. [&#8230;]</p>
<p>If you&#8217;re really more experienced, what we will be looking for&#8230; Do we look for particular programming skills, languages? Not really. Most people are able to program in Java, C++&#8230; I don&#8217;t think I&#8217;ve actually met people who are not able to do that. We are in an environment that is pretty unique in that sense.</p>
<p>We don&#8217;t mandate the use of particular programming languages, we don&#8217;t mandate the use of particular middleware pieces or things like that. We believe that our systems, our team should be moving as fast as possible, which means that if we hire the absolute best people they should be able to make the decisions, what the right tools are for them to use in their particular project.</p>
<p>It doesn&#8217;t always go well. I think we&#8217;ve had a few choices around Erlang which did not necessarily work out that well, not because of Erlang, but because it is actually really hard to hire Erlang programmers after that. So we expect our engineers to have some level of business sense.</p>
<p>I think the willingness to do operational work&#8230; We live and breathe the DevOps mentality, where our engineers are responsible for the software that they run at some level, whether that is part time or whether that is actually in full site with some of our other engineers. We strongly believe that there&#8217;s no bigger motivator to fix your software than beepers going off at 4 A.M. And we give you time to actually fix your services if that&#8217;s the case.</p>
<p>These are the first few things that come to mind.</p>
</blockquote>

      </div>
    </content>
  </entry>
  <entry>
    <title>Viterbi, my favorite algorithm</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-03-03-viterbi-algorithm.html"
    />
    <id>tag:blog.separateconcerns.com,2013-03-03:viterbi-algorithm</id>
    <published>2013-03-03T18:00:01Z</published>
    <updated>2013-03-03T18:00:01Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <section id="The-State-Machine">
<h2>The State Machine</h2>
<p>Let us consider a system that can take a finite number of states <code>S[1]</code> to <code>S[n]</code> over time.</p>
<p>We can represent the system as a N-node directed graph, where nodes are the states. An arc exists between node <code>S[i]</code> and <code>S[j]</code> if the system can transition from <code>S[i]</code> to <code>S[j]</code>. You probably already know that.</p>
</section>
<section id="In-Chains">
<h2>In Chains</h2>
<p>We will now observe the evolution of the system over time. We will model time discretely. That does not mean that time itself is discrete, but we will observe the system at fixed-interval &#8220;ticks&#8221;. We call <code>S(t)</code> the state of the system at tick <code>t</code>.</p>
<p>If the system is known to be in <code>S[i]</code> at tick <code>t</code> (i.e. <code>S(t) = S[i]</code>) we call <code>P(i-&gt;j)</code> the probability that it will be in <code>S[j]</code> at tick <code>t+1</code>. Here is a definition for the mathematically inclined: <code>P(i-&gt;j) = P(S(t+1) = S[j] | S(t) = S[i])</code>.</p>
<p>A few remarks:</p>
<ul>
<li>
<code>P(i-&gt;j)</code> is considered independent of <code>t</code>;
</li>
<li>
<code>P(i-&gt;i)</code> exists;
</li>
<li>
the sum of outbound probabilities is 1: <code>∀i, ∑[j=1,N]{P(i-&gt;j)} = 1</code>.
</li>
</ul>
<p>By the way, this is called a Markov Chain.</p>
</section>
<section id="Blurry-Sights">
<h2>Blurry Sights</h2>
<p>Now let&#8217;s complicate things a little by introducing a separate system that can take states <code>V[1]</code> to <code>V[M]</code>. This second system <code>V</code> is tied to <code>S</code>: at every tick <code>t</code>, the probability distribution of <code>V(t)</code> only depends on <code>S(t)</code>. We will note: <code>O(i,j) = P(V(j) | S[i])</code>.</p>
<p>You can think of <code>V</code> as something that observes <code>S</code> and reports on its state in an incomplete and probabilistic manner.</p>
<p>If you have understood everything up to now, you should easily get what this means: <code>∀i, ∑[j=1,M]{O(i,j)} = 1</code>.</p>
<p>If you have not, let&#8217;s take a really simple example with <code>N = M = 2</code>. You can imagine that both <code>S</code> and <code>V</code> are lights that can be either red or blue. The relationship between <code>S</code> and <code>V</code> can be expressed by something like this: &#8220;If light <code>S</code> is red, then there is 90% chance that <code>V</code> is red too. If light <code>S</code> is blue, then there is only 40% chance that <code>V</code> is red.&#8221;</p>
<p>Now, add more possible colors to <code>S</code> and <code>V</code>, not necessarily the same number for both, to generalize the system.</p>
</section>
<section id="The-Black-Box">
<h2>The Black Box</h2>
<p>Now, here is our problem: imagine that you know how system <code>S</code> works (the probabilities of transition between the states) but that it is hidden in a black box such that you cannot observe it. What you <strong>can</strong> observe is system <code>V</code>. Is there any way to guess what system <code>S</code> is doing at any time in this setting? If yes, how?</p>
<p>The answer to the first question is: &#8220;sometimes, yes&#8221;. &#8220;Sometimes&#8221; means &#8220;if the probability distributions help us&#8221;.</p>
<p>The second question is the one my favorite algorithm, the Viterbi algorithm, answers. Let&#8217;s see how it works.</p>
</section>
<section id="Make-it-Code">
<h2>Make it Code</h2>
<p>First we need to represent the problem in a way that can be understood by a computer. I will use the Lua programming language for that.</p>
<p>We start by defining a few parameters. We will choose <code>N = 3</code> and <code>M = 2</code> for simplicity. We will observe the system over 1000 ticks.</p>
<pre><code class="language-lua">local N = 3
local M = 2
local L = 1000
</code></pre>
<p>The probabilities of transitions in <code>S</code> will be represented by a NxN matrix, with <code>P(i-&gt;j)</code> as <code>T[i][j]</code>. We use percentages because they are easier to read and avoid some floating point calculation issues.</p>
<pre><code class="language-lua">local T = {
  {  60, 20, 20 },
  {   0, 70, 30 },
  {  70, 10, 20 },
}
</code></pre>
<p>For instance, there is a 70% chance to transition from <code>S[3]</code> to <code>S[1]</code>.</p>
<p>The probablitities of observations will be represented by a NxM matrix, with <code>O(i,j)</code> as <code>O[i][j]</code>.</p>
<pre><code class="language-lua">local O = {
  { 5, 95 },
  { 55, 45 },
  { 90, 10 },
}
</code></pre>
<p>Let us make sure we didn&#8217;t make too many mistakes thanks to our two probability equations from earlier:</p>
<pre><code class="language-lua">local sum = function(t)
  local s = 0
  for i=1,#t do s = s + t[i] end
  return s
end

for i=1,N do
  assert(sum(T[i]) == 100)
  assert(sum(O[i]) == 100)
end
</code></pre>
<p>This is what our example system looks like in graph form:</p>
<p><img alt="graph" src="img/viterbi.png"/></p>
<p>The green part is the Markov chain itself, the blue part corresponds to the observation device. Arcs are labeled with probabilities of transition or observation.</p>
</section>
<section id="Stepping-Forward">
<h2>Stepping Forward</h2>
<p>Now we can simulate the behavior of the system.</p>
<pre><code class="language-lua">local proba_pick = function(v)
  local p,s = math.random(1,100),0
  for i=1,#v do
    s = s + v[i]
    if p &lt;= s then
      return i
    end
  end
  assert(false)
end

local S,V = {},{}

local transition = function(t)
  assert(S[t-1] and not S[t])
  S[t] = proba_pick(P[S[t-1]])
end

local observe = function(t)
  assert(S[t] and not V[t])
  V[t] = proba_pick(O[S[t]])
end

S[1] = math.random(1,N)
observe(1)

for t=2,L do
  transition(t)
  observe(t)
end
</code></pre>
<p>This code is slightly more complicated, but what you should understand is that, at the end of it, <code>S</code> is a vector of <code>L</code> states of the system and <code>V</code> is the corresponding vector of observations. The initial state <code>S[1]</code> is chosen randomly with uniform probabilities.</p>
</section>
<section id="Seeing-Through-the-Box">
<h2>Seeing Through the Box</h2>
<p>Now, let us proceed to guess what happens inside the black box. We do so iteratively: at each tick <code>t</code>, we calculate the most plausible sequence of events that could have led to each possible state of the system, given the observation at <code>t</code> and the results for <code>t-1</code>.</p>
<pre><code class="language-lua">local trellis = {{}}

local prb = function(x)
  return math.log(x/100)
end

local viterbi_node = function(t,i)
  local prev = assert(trellis[t-1])
  local idx,proba = 0,-math.huge
  local p
  for j=1,N do
    p = prev[j].proba + prb(T[j][i]) + prb(1/N*O[i][V[t]])
    if p &gt; proba then proba,idx = p,j end
  end
  return {
    state = i,
    proba = proba,
    prev = prev[idx],
  }
end

local viterbi_step = function(t)
  assert(not trellis[t])
  trellis[t] = {}
  for i=1,N do
    trellis[t][i] = viterbi_node(t,i)
  end
end

-- initialize the trellis
for i=1,N do
  trellis[1][i] = {
    state = i,
    proba = prb(1/N*O[i][V[1]])
  }
end

-- run the algorithm
for t=2,L do
  viterbi_step(t)
end
</code></pre>
<p>Again, not trivial code, but this is the Viterbi algorithm itself. Moreover we use logarithmic sums for probabilities to avoid numerical problems.</p>
<p>What the algorithm does is build a trellis, a special kind of graph. For every step <code>t</code> we calculate the most plausible sequence of events (a path through the trellis) which ends up with the system in each of the possible states. When we reach the end of the simulation, we take the most plausible state of the system and take the path that led to it as our estimate of what happened.</p>
<p>To avoid memory usage explosion, we do not actually store the paths themselves in the nodes of the trellis. Instead, in a node at tick <code>t</code>, we store a pointer to the previous node (at <code>t-1</code>) that led there. This is why we have to backtrack through the trellis to find the actual path:</p>
<pre><code class="language-lua">local getpath = function(node)
  local r = {}
  repeat
    table.insert(r,1,node.state)
    node = node.prev
  until (not node)
  return r
end

local best_node = function(nodes)
  local r = {proba = -math.huge}
  for i=1,#nodes do
    if nodes[i].proba &gt; r.proba then
      r = nodes[i]
    end
  end
  return r
end

local bestpath = getpath(best_node(trellis[L]))
</code></pre>
</section>
<section id="Does-this-thing-really-work">
<h2>Does this thing really work?</h2>
<p>To check if this work, let&#8217;s take the actual system out of the box and calculate how much it looks like our estimate:</p>
<pre><code class="language-lua">local ok = 0
for i=1,L do
  if S[i] == bestpath[i] then
    ok = ok + 1
  end
end

print(100*ok/L)
</code></pre>
<p>The result I got with those parameters is 72% accuracy, to compare to what a naive random process would get (33%).</p>
</section>
<section id="Why-I-love-it">
<h2>Why I love it</h2>
<p>Let&#8217;s go back to the title of this post: now that you know what it does, <strong>why</strong> is Viterbi&#8217;s algorithm my favorite?</p>
<p>I admit that the elegance of the representation of the problem as a trellis is part of the reason, but mainly it&#8217;s because of its implications. Think about it: fundamentally it is an algorithm that allows a machine to <strong>explain what it observes</strong>. Isn&#8217;t that crazy?</p>
<p>Yes, it is. And because of that it has a whole range of applications, from advanced orthographic correction and speech-to-text to the decoding of convolutional codes used in voice codecs. And I suspect its potential has not been fully exploited yet.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Algorithms, Data Structures &amp; Protocols</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-01-28-algorithms-data-structures-protocols.html"
    />
    <id>tag:blog.separateconcerns.com,2013-01-28:algorithms-data-structures-protocols</id>
    <published>2013-01-28T22:00:00Z</published>
    <updated>2013-01-28T22:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <section id="Algorithms-Data-Structures">
<h2>Algorithms &amp; Data Structures</h2>
<p>For a long time I have thought that there were only two fundamental parts to Computer Science: Algorithms and Data Structures. This is how it used to be taught, and how I think it should still be taught to beginners.</p>
<p>There are two main categories of parts in a computer: processing units (CPUs, GPUs&#8230;) and data storage units (caches, RAM, disk&#8230;). Your typical information processing program takes data from a durable storage unit, moves it to a temporary storage unit, modifies it thanks to a processing unit and stores the result in a permanent storage unit. Of course there are variations around this theme, and some programs do a bit of extra work such as handling user input, but that is the idea.</p>
<p>We call &#8220;algorithms&#8221; the different ways we instruct the processing units to act on the data and &#8220;data structures&#8221; the different layouts we use to store data in the storage units.</p>
<p>A very simple view of fundamental CS could be summed up to these two disciplines. You may argue that other things are indispensable, for instance theoretical aspects like lambda calculus or Turing machines, or maybe paradigms. You would be right, these things are important, but if you <strong>really</strong> want the baseline, it all comes down to algorithms and data structures.</p>
<p>Or so I thought.</p>
</section>
<section id="Protocols">
<h2>Protocols</h2>
<p>It turns out looking at the aforementioned parts of the computer is not enough. We need to look at the negative space too: how does the
data move around? Inside the computer, data mostly circulates in buses. Between computers, data may circulate in networks, on detachable storage units&#8230;</p>
<p>With computers becoming increasingly parallel, the Internet reaching ubiquity and programs turning into complex distributed systems, understanding the interactions between computer parts, software parts or entirely different systems has become a necessity. This reveals a third fundamental side of CS, on equal footing with algorithms and data structures: protocols.</p>
<p>Protocols are more present in CS than you may think. Even the original vision of OOP by Alan Kay was mostly about protocols. Joe Armstrong, a father of Erlang, <a href="http://erlang.org/pipermail/erlang-questions/2013-January/071944.html">recently insisted</a> on the necessity to teach protocols (and algorithms - if he had added data structures this post would look like plagiarism ;p).</p>
<p>CS classes at engineering school did not teach me much or influence the way I write programs, but majoring in network engineering did. It made me start to think in terms of independent blocks and the protocols they use to communicate. I cultivated that vision during my MSc in distributed systems (it used to be called &#8220;grid computing&#8221;) and I still have it today.</p>
<p>So when I see people arguing endlessly about static versus dynamic typing or such matters, I think: OK, that may be important, but do not forget CS is, at heart, about algorithms, data structures and protocols.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Startups, think about SOA</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-01-02-startups-soa.html"
    />
    <id>tag:blog.separateconcerns.com,2013-01-02:startups-soa</id>
    <published>2013-01-02T14:00:01Z</published>
    <updated>2013-01-02T14:00:01Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <section id="What-is-SOA">
<h2>What is SOA?</h2>
<p>When people say SOA (Service Oriented Architecture) they often mean different things. My personal definition of SOA is rather loose and, like all the quotes in this article, <a href="http://queue.acm.org/detail.cfm?id=1142065">comes from Werner Vogels</a>, the CTO of Amazon:</p>
<blockquote>
<p>For us service orientation means encapsulating data with the business logic that operates on the data, with the only access through a published service interface.</p>
</blockquote>
<p>If you are an Object Oriented Programming person this should ring a bell. Indeed, SOA is essentially encapsulation at the system level. Actually, I strongly believe OOP is a good idea (encapsulation) applied at the wrong layer.</p>
<p>The opposite of SOA in the context of the Web is monolithic applications. Think textbook Ruby on Rails or Django, for instance. Monolithic applications are fine as long as they are small, but I think SOA is a better fit for larger projects. If you are a technological startup, that means you should at least start thinking about what SOA could bring you if you are starting to have a clear idea of what your product is. Monolithic applications are great for prototypes and MVPs.</p>
<p>If you are wondering if what you are currently doing is closer to SOA than to monolithic applications, ask yourself these questions:</p>
<ul>
<li>
<p>How many different repositories does our code live in? (If you do <strong>not</strong> use source control you have more urgent problems to think about than SOA.)</p>
</li>
<li>
<p>How many different databases do we have? How many database instances do we have? How many connections? How many schemas? (SOA and NoSQL tend to mix well.)</p>
</li>
<li>
<p>Do we have a Web application that does significantly more than rendering templates? Is it stateful? What parts of that state could we also use in a mobile application? Does the same application render JSON and HTML?</p>
</li>
</ul>
</section>
<section id="Advantages-of-SOA">
<h2>Advantages of SOA</h2>
<p>One of the most obvious benefits of SOA is that services are easier to scale than monolithic applications. Maybe you want to migrate user authentication data to Redis and keep other data in whatever DB you already have? SOA makes it trivial. Maybe some part of your product would benefit from running on an AWS instance that has lots of RAM while another one is CPU-intensive? Just deploy the corresponding services where they run best.</p>
<p>SOA will also help you achieve resilience. You can program user-facing or aggregate services defensively so that they detect the unavailability of backend services and degrade gracefully. You can even use a <a href="https://blog.codinghorror.com/working-with-the-chaos-monkey/">chaos monkey</a> to ensure this.</p>
<p>However in my opinion the main advantages of SOA are not technical, they are organizational.</p>
<p>As the number of your employees increases you will have to separate them into teams. The classical way to do this is by specialty: first developers and operations, then spin off DBAs&#8230; The main problem with that organization is that it hinders innovation. To create a new feature you need to coordinate all these people, and it results in endless meetings and sterile debates (not to mention clan wars).</p>
<p>This is not a fatality. You have probably heard of DevOps, and maybe dismissed it as Yet Another Buzzword. Well SOA is the easiest way to implement True DevOps (TM?), meaning that developers and operations really work together all the time. The trick is that there are no &#8220;devs&#8221; and &#8220;ops&#8221;, because you create teams along another dimension: services. In Werner Vogel&#8217;s words:</p>
<blockquote>
<p>The traditional model is that you take your software to the wall that separates development and operations, and throw it over and then forget about it. Not at Amazon. You build it, you run it. This brings developers into contact with the day-to-day operation of their software.</p>
</blockquote>
<p>These teams are like smaller startups within your growing startup: they have all they need to build new features or even whole products by themselves. And they will keep you nimble if you give them enough leeway:</p>
<blockquote>
<p>We allow teams to function as independently as possible. Developers are like artists; they produce their best work if they have the freedom to do so, but they need good tools.</p>
</blockquote>
<p>SOA also gives you language agnosticism almost for free. Not much prevents different services from being written in different programming languages. Why would you want to do that? Well, beyond the fact that different problems are better solved in Python, Haskell or C, there is lot of talent out there not using Ruby, Python, PHP, Scala, JavaScript or whatever language you have chosen for your monolithic application. Some of those Scheme, Io, Factor, Lua or F# hackers can be real assets for those clever enough to give them a job.</p>
<p>Finally, I can see a (perhaps more abstract) last advantage to SOA which is related to the rise of the Programmable Web. After all, there is little difference between a Web API and a service, except that you wrote the latter and not the former. Embracing SOA will prepare you to work with external APIs, and more importantly to publish your own. For instance, lots of AWS services have started their life as internal services at Amazon.</p>
</section>
<section id="Conclusion">
<h2>Conclusion</h2>
<p>I am not saying SOA <strong>only</strong> has advantages. Such an architecture can be fragile if you do not code with service unavailability in mind. Testing complex operations involving lots of services can be hard, and debugging them even harder. Correctly defining the boundaries and interfaces of services requires a significant amount of reflection and may not be a good idea when you do not know what exactly you are building.</p>
<p>That being said I still think more technological and/or Web startups should consider SOA instead of the &#8220;everything within the Framework&#8221; approach, not really for future scalability reasons, but because they risk limiting their flexibility, speed of iteration and capacity to hire short term if it is not already the case.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>Hello again, World!</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2013-01-02-hello-world.html"
    />
    <id>tag:blog.separateconcerns.com,2013-01-02:hello-world</id>
    <published>2013-01-02T14:00:00Z</published>
    <updated>2013-01-02T14:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p><a href="http://catwell.info">I</a> have not had a blog for over two years. The main reason for that is that writing is hard, so I went shopping on Twitter instead.</p>
<p>This was a bit hypocrite since I am an advocate for the Open Web and a huge consumer of information feeds, with several hundreds of them in my news reader. So for this New Year I have decided to put an end to this situation, thrown together a few lines of Lua code that act as a static blog generator (because reinventing the wheel is fun), and here it is: my new online journal.</p>
<p>I do not know with what frequency I will publish but expect articles about working at startups, distributed systems, programming in Lua, dealing with mobile networks, and whatever I happen to read and find interesting. Oh, and also the occasional rant, I guess.</p>
<p>Now here&#8217;s to the tradition:</p>
<pre><code class="language-lua">local greet = function(name)
  print(string.format("Hello, %s!",name))
end

greet("World")
</code></pre>

      </div>
    </content>
  </entry>
  <entry>
    <title>The Future of Computing: Ubiquity</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2012-01-09-ubiquitous.html"
    />
    <id>tag:blog.separateconcerns.com,2012-01-09:ubiquitous</id>
    <published>2012-01-09T12:00:00Z</published>
    <updated>2012-01-09T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>I used to enjoy predicting how computing technology would evolve; it was like a game for me, and I was not too bad at it. But for a few years I have felt like I could not predict anything anymore. Things went too fast, and that bothered me.</p>
<p>During these years I have observed things that, taken separately, did not seem to make much sense. Some that already existed and grew in importance, and some that were new. Mobile &amp; Local computing. The Internet of Things. ARM&#8217;s revenge on x86. The Cloud. Multicore, GPGPU. The HTML5 applications craze. Unhosted. Siri. Minix3 getting funding. Wolfram|Alpha, NKS. JSON, Git, CouchDB, Redis, Riak, DynamoDB, Doozer. JIT compilers, functional languages, event-driven programming. SPDY, 0MQ, MessagePack-RPC. Mechanical Turk and humans computer pieces. LTE, 4G networks, Free disrupting the French cell phone industry.</p>
<p>And then, a few months ago, I took a step back and I found a pattern. If I am right, all this is going somewhere, and that somewhere is ubiquitous computing. But not in a limited sense: &#8220;computation everywhere&#8221;, taken to the extreme. My presentation slide-show moving from my pocket to the overhead projector of the conference room, forking
to the tablets of the attendees. Computation jumping from my desktop computer at work to my cell phone, sitting there peacefully to save battery while I walk to my self-driving car, only to rush to the powerful computer in the dashboard. Software running in the Cloud, on the 1028 cores of my DSL box and my toaster at home, in my headphones and in my AR lens, all simultaneously. One application in several (lots of) places. Ubiquitous.</p>
<p>Now maybe you are thinking &#8220;he&#8217;s nuts&#8221;, and I am thinking &#8220;maybe they&#8217;re right&#8221;. Because for this to work we will have to solve what I consider the hardest problem in Computer Science: large-scale algorithm collaboration. I honestly do not know how long it will take us or even whether it is within the reach of our limited brains. But if I am right, we are going there, and this is an exciting destination. This is a journey that requires planning, and going now would be foolish, but when we will be ready to set sail towards these unknown lands, count me on board of the first ship.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>(French) Neutralité du Net</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2010-02-04-fr-neutralite-du-net.html"
    />
    <id>tag:blog.separateconcerns.com,2010-02-04:fr-neutralite-du-net</id>
    <published>2010-02-04T12:00:00Z</published>
    <updated>2010-02-04T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Tout le monde parle de neutralité du Net en ce moment. J&#8217;ai pensé que ça pourrait être une bonne idée de faire un point là-dessus, parce que j&#8217;entends et je lis tout et n&#8217;importe quoi, en particulier dans la presse française.</p>
<p>La première étape pour appréhender le problème de la neutralité du Net, c&#8217;est de la définir. Benjamin Bayart <a href="http://blog.fdn.fr/post/2010/01/12/Rencontre-avec-l-ARCEP-sur-la-neutralit%C3%A9-du-r%C3%A9seau">s&#8217;y est essayé devant l&#8217;ARCEP</a> et je suis d&#8217;accord avec lui pour l&#8217;essentiel, même si nos points de vue divergent probablement sur certains points de détail.</p>
<p>D&#8217;abord, il faut comprendre que la neutralité du Net est une qualité essentielle. J&#8217;entends par là qu&#8217;Internet est par définition neutre, et donc qu&#8217;un réseau non-neutre n&#8217;est pas Internet</p>
<p>Qu&#8217;est-ce qu&#8217;Internet ? Comme son nom l&#8217;indique, c&#8217;est un ensemble de réseaux qui se sont mis d&#8217;accord pour se regrouper et permettre aux entités qui les composent de discuter entre elles. Que les puristes me pardonnent les raccourcis techniques qui vont suivre.</p>
<p>Les réseaux qui composent Internet sont appelés systèmes autonomes (AS), parce que leurs dirigeants sont libres de définir la manière dont les messages sont transportés en leur sein ainsi que les règles utilisées pour que ces messages arrivent à bonne destination. Pour faire une analogie fréquente : peu importe si les facteurs du bureau de poste de Trifouilly-les-oies distribuent le courrier à bicyclette ou en scooter, et peu importe s&#8217;ils utilisent un plan du quartier ou leur GPS pour trouver le 47 rue des Lilas, pourvu que Mme Michu, son occupante, reçoive son courrier en bon état.</p>
<p>Par contre, il est indispensable que le courrier soit distribué dans des enveloppes à un format standard sur lesquelles figure une adresse. Sur Internet, les lettres sont des paquets, composés d&#8217;un message (<strong>Protocol Data Unit</strong>) enveloppé dans des en-têtes au format <strong>Internet Protocol</strong>, parmi lesquels figure l&#8217;adresse du destinataire. Ces en-têtes (enveloppes) sont les mêmes dans tous les AS (bureaux de poste) du monde et les adresses sont uniques. C&#8217;est ce qui fait que Mme Michu peut correspondre avec son amant chinois, M. Chang.</p>
<p>Chaque bureau de poste est, je l&#8217;ai dit, libre de répertorier les adresses qui en dépendent comme il veut, mais il faut que le bureau de Trifouilly-les-oies sache quoi faire des lettres destinées à M. Chang. Sur Internet, chaque AS est identifié par un numéro unique, un peu comme un code postal à l&#8217;échelle mondiale, et maintient des tables permettant de savoir de quel AS dépend chaque adresse IP. Comme la structure d&#8217;Internet est dynamique (de nouveaux AS peuvent apparaitre, d&#8217;autres disparaitre, les associations IP - AS peuvent changer&#8230;), les AS s&#8217;échangent ces informations en permanence suivant le <strong>Border Gateway Protocol</strong>, le protocole de routage dans l&#8217;Internet.</p>
<p>La règle fondamentale de neutralité dans tout ça est très simple à comprendre avec mon analogie : la poste (les FAI) transporte le courrier (les paquets) de son point de départ à son point d&#8217;arrivée, et elle ne fait que ça. Le facteur n&#8217;ouvre pas les lettres pour lire les déclarations enflammées de M. Chang à Mme Michu, et il ne glisse pas de publicité dans les enveloppes. Sur Internet, il n&#8217;y a pas non plus de service de type Chronopost : un AS peut passer un accord avec ses voisins pour qu&#8217;ils transportent certains paquets plus vite, mais il ne l&#8217;écrit pas dans les en-têtes IP, et même s&#8217;il le fait personne n&#8217;a l&#8217;obligation de respecter ces instructions. On dit qu&#8217;un réseau IP, et en particulier Internet, ne gère pas les règles de qualité de service (QoS) mais fait simplement de son mieux (<strong>Best Effort</strong>).</p>
<p>Maintenant, on peut essayer de voir ce qui n&#8217;est pas neutre, et donc pas Internet. Un réseau où les machines n&#8217;ont pas d&#8217;adresses IP publiques n&#8217;est pas Internet. Elles ont des adresses IP, certes, mais une machine sur Internet ne peut pas leur envoyer de paquets directement. Bayart donne l&#8217;exemple des opérateurs mobiles, je vais en prendre un autre : si vous êtes connecté au <a href="http://resel.fr/">ResEl</a>, vous n&#8217;êtes pas sur Internet, parce que l&#8217;adresse attribuée à votre interface réseau n&#8217;est pas accessible de l&#8217;extérieur. C&#8217;est ce qui fait que vous ne pouvez pas héberger votre serveur web, par exemple. C&#8217;est une bonne occasion d&#8217;enfoncer une porte ouverte : Internet a un coût. Je ne connais pas de vrai Fournisseur d&#8217;Accès à Internet pour 10 € par an.</p>
<p>Un FAI ne devrait pas non plus empêcher certains paquets de passer. Si le votre bloque le peer-to-peer, il viole le principe de neutralité. En fait, le simple fait qu&#8217;il sache que vous faites du peer-to-peer suffit : il a regardé dans l&#8217;enveloppe. Si votre FAI traite les paquets d&#8217;un fournisseur de service (disons Dailymotion) plus vite que ceux d&#8217;un autre (disons Youtube), il y a aussi de fortes chances qu&#8217;il viole la neutralité du Net, sans parler de la législation sur la concurrence. Si quand vous consultez le web un bandeau s&#8217;affiche en haut de chaque page et vous rappelle que votre connexion est fournie par Machin, vous n&#8217;êtes pas sur Internet. Si vous ne pouvez pas installer un serveur SMTP sur le port 25 de votre machine&#8230; vous avez compris l&#8217;idée.</p>
<p>Un point tendancieux : je considère personnellement qu&#8217;Internet se limite à ce que j&#8217;ai décrit plus haut, ce qui veut dire qu&#8217;un filtrage BGP ou sur les IP est contraire à la neutralité du Net mais un filtrage au niveau des noms de domaine (DNS) pas forcément, dans le sens où vous bannir des pages blanches n&#8217;empêche pas de vous écrire. Je ne dis pas que j&#8217;y suis favorable, juste que c&#8217;est moins grave.</p>
<p>Maintenant, pourquoi la neutralité du Net est-elle si importante ? Parce que c&#8217;est ce qui lui permet de garantir des droits fondamentaux tels que la liberté d&#8217;expression (c&#8217;est pas moi qui le dit, <a href="http://www.conseil-constitutionnel.fr/conseil-constitutionnel/francais/les-decisions/acces-par-date/decisions-depuis-1959/2009/2009-580-dc/decision-n-2009-580-dc-du-10-juin-2009.42666.html">c&#8217;est le Conseil Constitutionnel</a>) ou la libre concurrence, et aussi parce que c&#8217;est parce qu&#8217;Internet est neutre qu&#8217;il peut fonctionner, techniquement et d&#8217;un point de vue diplomatique. Simplement parce que si on commence à dire qu&#8217;Internet n&#8217;est plus neutre (ou ouvert, c&#8217;est à peu près équivalent), alors c&#8217;est qu&#8217;<a href="http://twitter.com/timoreilly/status/7924286619">on en laisse le contrôle à quelqu&#8217;un</a>, et les autres ne
risquent pas d&#8217;être d&#8217;accord.</p>
<p>Alors évidemment, il y en a que ça tenterait bien de contrôler Internet. On l&#8217;a vu, la neutralité va plus loin que l&#8217;absence de censure, mais elle l&#8217;inclut, et c&#8217;est bien de cela qu&#8217;il est question quand on vous parle de <a href="http://www.generation-nt.com/loppsi-filtrage-net-juge-tardy-actualite-951391.html">filtrage</a>. Bien entendu, le gouvernement et leurs amis des médias vous diront qu&#8217;ils cherchent à empêcher les méchants terroristes et leurs comparses pédophiles de nuire, parce qu&#8217;ils ne vont pas vous dire ouvertement qu&#8217;ils veulent juste reprendre le contrôle de l&#8217;information. Demandez donc à M. Chang ce qu&#8217;il en pense !</p>
<p>Donc non, la neutralité du Net n&#8217;est <a href="http://www.youtube.com/watch?v=mP01t0Z4Hr8">pas une obsession de libristes illuminés</a>, et les artistes qui la comprennent <a href="http://futureofmusic.org/files/FCCopeninternet2010.rem.pdf">n&#8217;en pensent pas ce qu&#8217;on voudrait bien nous faire croire</a>. La France, en la matière, est en train de nager à contre-courant ; elle finira par s&#8217;épuiser et couler si elle persiste.</p>
<p>Pour conclure, un conseil : si vous voulez vous faire une idée sur le sujet, éteignez votre télévision, débranchez votre radio et oubliez les journaux. On ne juge pas les abus d&#8217;un état en prenant pour argent comptant sa propagande. Le seul endroit où l&#8217;on peut s&#8217;informer objectivement sur Internet en France, c&#8217;est le Net lui-même. Du moins, tant qu&#8217;il lui reste un semblant de liberté&#8230;</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>(French) Râleries multiples</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2010-01-30-fr-raleries.html"
    />
    <id>tag:blog.separateconcerns.com,2010-01-30:fr-raleries</id>
    <published>2010-01-30T12:00:00Z</published>
    <updated>2010-01-30T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Ceux qui me connaissent savent que râler, je sais faire. J&#8217;essaie d&#8217;éviter autant que possible, mais parfois c&#8217;est nécessaire.</p>
<section id="Paye-ta-TV">
<h2>Paye ta TV</h2>
<p>On la critique en France mais la redevance TV est bien pire en Angleterre. Si dans l&#8217;hexagone elle est perçue par l&#8217;État, ici c&#8217;est une <a href="http://www.tvlicensing.co.uk">société privée</a> qui s&#8217;en charge. Et contrairement à chez nous, ni les gens qui regardent la télé sur Internet ou sur un téléphone mobile ni les étudiants en résidence ne sont exemptés.</p>
<p>Cette société, TV Licensing, envoie régulièrement des lettres de menace aux délinquants qui osent capter la bonne parole diffusée sur les ondes sans s&#8217;acquitter de la dîme. Hmm, un petit arrière-goût d&#8217;HADOPI ? J&#8217;ai reçu cinq lettres, et je suis d&#8217;après leurs dires &#8220;scheduled for visit&#8221;. Ils peuvent venir, j&#8217;ai l&#8217;esprit tranquille : je ne regarde <strong>pas</strong> la TV, la loi anglaise ne leur permet pas d&#8217;entrer chez moi et de toute façon c&#8217;est tellement difficile techniquement d&#8217;atteindre ma porte que ça m&#8217;étonnerait qu&#8217;ils y arrivent un jour.</p>
</section>
<section id="Le-garçon-qui-criait-au-loup">
<h2>Le garçon qui criait au loup</h2>
<p>Depuis que j&#8217;habite ici, j&#8217;ai bien dû être réveillé une vingtaine de fois par des alarmes incendies en pleine nuit. La première fois, enfiler un manteau, des chaussures et descendre devant l&#8217;entrée se geler pendant une demi-heure en attendant l&#8217;arrivée de la sécurité peut être drôle, mais à la longue ça lasse. Qui plus est, le dispositif d&#8217;alarme permet de savoir aisément quel détecteur a déclenché l&#8217;alerte, et donc de confirmer rapidement que c&#8217;est une erreur, mais la loi anglaise stipule qu&#8217;ignorer l&#8217;alarme et retourner au chaud dans son lit est un crime !</p>
<p>Si jamais un feu se déclenche vraiment, j&#8217;espère que les familles des victimes penseront à faire un procès à tous les responsables du dispositif d&#8217;alarme. Un système d&#8217;alerte qui génère autant de faux-positifs est totalement inutile, simplement parce que personne n&#8217;y prête plus attention. Tous les administrateurs système qui ont déjà essayé de lire des logs doivent bien le savoir&#8230;</p>
</section>
<section id="La-vie-privée-c'est-dépassé">
<h2>La vie privée, c&#8217;est dépassé !</h2>
<p>C&#8217;est en tout cas ce que pense Mark Zuckerberg, le patron de Facebook. Il a le droit, et j&#8217;ai le droit de ne pas être d&#8217;accord. Comme <a href="http://www.alain-bazot.fr/index.php/la-vie-privee-un-concept-depasse/">mon ami Dédé</a>, je vais donc logiquement quitter le célèbre réseau social.</p>
<p>De toute façon, les soi-disant réseaux sociaux sont des aberrations, des substituts au Web pour ceux qui ne l&#8217;ont pas compris. Vous voulez donner des nouvelles, ou même poster des liens débiles ? Ouvrez un blog (on appelait ça &#8220;une page perso&#8221; à l&#8217;époque révolue du Web 1.0), ou twittez si ça vous amuse ! Il semblerait que la raison qui pousse les gens à rejoindre Facebook soit la simplicité d&#8217;ouverture d&#8217;un compte. Ouvrir son blog aussi est très simple.</p>
<p>Pour ma part, je ne consulterai pas Facebook en février. Je ne clôturerai mon compte que début mars de sorte que les gens qui n&#8217;ont que ce moyen pour me joindre puissent m&#8217;en demander un autre par message privé (je les reçois dans ma boite mail). Si vous trouvez que je suis paranoïaque, sachez simplement que l&#8217;un des sujets proposés en <strong>MSc Thesis</strong> à Cranfield consiste à faire du <strong>data-mining</strong> (collecter plein d&#8217;informations sur vous) sur Facebook en utilisant le <strong>Grid Computing</strong> (un paquet d&#8217;ordinateurs, dont des super-calculateurs, en réseau). Si de tels moyens, habituellement réservés à de très grosses industries comme le pétrole, l&#8217;automobile ou la mode, sont déployés dans ce but, c&#8217;est simplement parce que vos données personnelles valent très cher.</p>
</section>
<section id="Java-m'pendre-ou-pas">
<h2>Java m&#8217;pendre (ou pas)</h2>
<p>Java est un langage tout pourri, si je commençais à énumérer toutes les raisons pour ça il me faudrait autant de lignes que pour coder une application de taille moyenne dans le dit langage, et oui ça fait beaucoup.</p>
<p>En tout cas, étant contraint et forcé d&#8217;en faire pas mal en ce moment, j&#8217;ai pu bien m&#8217;arracher les cheveux sur quelques points :</p>
<ul>
<li>
<p><code>string.length()</code>, mais <code>table.length</code>. La cohérence, vous connaissez ?</p>
</li>
<li>
<p>Avec Java, Axis et un programme un peu complexe, il suffit qu&#8217;une exception se déclenche pour afficher une trace qui fait cinq fois la hauteur de votre console. Bien entendu, le message d&#8217;erreur intéressant est en haut.</p>
</li>
<li>
<p>Enfin et surtout, c&#8217;est <strong>lent</strong>, à la compilation comme à l&#8217;exécution.</p>
</li>
</ul>
<p>Voilà, tout ceux qui l&#8217;ont utilisé savent que Java c&#8217;est mal. Après, il y en a qui aiment, et je n&#8217;ai rien contre les masochistes, mais je supporte déjà moins les sadiques qui forcent des gens sains d&#8217;esprit à s&#8217;en servir.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>(French) GTD ROI</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2009-12-04-fr-gtd-roi.html"
    />
    <id>tag:blog.separateconcerns.com,2009-12-04:fr-gtd-roi</id>
    <published>2009-12-04T12:00:00Z</published>
    <updated>2009-12-04T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>J&#8217;ai l&#8217;impression que <a href="http://blog.separateconcerns.com/2009-11-16-fr-gen-y.html">mon article</a> sur les habitudes consommatrices de temps en ligne avait intéressé quelques personnes. Je vais revenir brièvement sur ce qui est arrivé depuis et en tirer un rapide bilan.</p>
<p>Dans l&#8217;ensemble, j&#8217;ai fait ce que j&#8217;avais prévu : je ne suis plus le forum d&#8217;archlinux.org ni Tuxmachines et j&#8217;ai arrêté les jeux Motion Twin. Ça m&#8217;arrive encore pas mal de cliquer sur des liens par pure curiosité mais j&#8217;imagine que c&#8217;est une habitude difficile à perdre.</p>
<p>En plus de ça, je consulte beaucoup moins Facebook pour lequel j&#8217;ai perdu de l&#8217;intérêt, j&#8217;ai encore écrémé un peu mes inscriptions aux <strong>mailing-lists</strong>, je relève ma messagerie moins fréquemment, j&#8217;ai quitté certains canaux IRC, et je me suis mis à utiliser <a href="http://surf.suckless.org/">surf</a> beaucoup plus que Firefox, ce qui limite la tentation de faire plusieurs choses à la fois (onglets) ou de remettre des choses triviales à plus tard (marque-pages).</p>
<p>J&#8217;ai l&#8217;impression que ces quelques changements n&#8217;ont pas trop mal fonctionné, et j&#8217;apprécie de m&#8217;être dégagé un peu de temps pour faire des choses plus enrichissantes. Je suis aussi content de ne pas avoir eu à recourir à mes idées plus radicales. Je pense que le plus important était surtout de prendre conscience du problème et de commencer à me demander de temps en temps, avant d&#8217;ouvrir une page web : &#8220;n&#8217;ai-je pas mieux à faire ?&#8221;.</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>(French) Chrome OS</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2009-12-04-fr-chrome-os.html"
    />
    <id>tag:blog.separateconcerns.com,2009-12-04:fr-chrome-os</id>
    <published>2009-12-04T12:00:00Z</published>
    <updated>2009-12-04T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>J&#8217;avais promis que j&#8217;en parlerais : comme tout le monde (ou pas), j&#8217;ai regardé <a href="http://www.chromium.org/chromium-os">les vidéos</a> diffusées par Google sur Chrome OS et je me suis fait ma petite idée.</p>
<p>La première chose qui me vient à l&#8217;esprit, c&#8217;est que même Benjamin Bayart était probablement loin d&#8217;imaginer combien il était proche de la vérité lorsqu&#8217;il parlait de Minitel 2.0. Le principe de Chrome OS, c&#8217;est le retour aux clients légers, aux terminaux. Toute l&#8217;information est dans les nuages, rien sur votre machine. Il ne supporte même pas les disques durs au profit de la mémoire Flash !</p>
<p>Du point de vue technique, l&#8217;interface emprunte de très bonnes idées aux gestionnaires de fenêtres minimalistes : applications en plein écran, panneaux qui se superposent aux fenêtres à une position fixe&#8230; Tout le travail effectué pour démarrer plus vite est aussi intéressant et se rapproche de ce que font certains utilisateurs d&#8217;Arch Linux amateurs d&#8217;optimisation et de <strong>bootcharts</strong>.</p>
<p>Le problème, comme toujours avec Google, n&#8217;est pas vraiment la technique. C&#8217;est le vrai but de l&#8217;opération qui est difficile à deviner. Chrome OS est <strong>open source</strong>, ce qui est très bien, mais qui ira lire les sources, les comprendre ? Qui saura influer sur l&#8217;évolution du système ? Qui utilisera d&#8217;autres serveurs que ceux de Google pour stocker ses données ?</p>
<p>Et même si le système client est <strong>open source</strong>, je le vois un peu comme un piège qui va influer lentement sur la mentalité du public et lui faire considérer comme normal de ne pas avoir le contrôle de ses données. Google sait bien que dicter leurs habitudes aux gens est une stratégie efficace, c&#8217;est ce qui fait que les tortues asthmatiques que sont Internet Explorer et Outlook dominent encore largement leurs marchés respectifs. Chrome OS, c&#8217;est une drogue dont la première dose est gratuite et ne fait aucun mal, mais ensuite ?</p>
<p>Heureusement, il y a de l&#8217;espoir : je pense que Google s&#8217;est laissé emporter par son élan et que Chrome OS est bien trop en avance sur son temps. Pourquoi ? Il cible principalement le marché des netbooks. Or, les gens achètent des netbooks entre autres parce qu&#8217;ils sont faciles à utiliser dans les transports en commun. Et vous êtes pratiquement certain de ne pas trouver de wifi gratuit dans un train, encore moins dans un avion. Votre netbook sous Chrome OS devient donc soudainement inutile : vous ne pouvez pas regarder votre film préféré parce qu&#8217;il est resté là-haut dans les nuages, et vous ne pouvez pas travailler sur votre rapport parce que Google Docs n&#8217;est pas accessible.</p>
<p>Bref, nous voilà encore une fois sauvés de l&#8217;horrible Big Brother du 21e siècle. Oh, et sinon, je viens de commencer à utiliser ce formidable outil qu&#8217;est Wave ! ;)</p>

      </div>
    </content>
  </entry>
  <entry>
    <title>(French) Ces sites qui ne devraient pas exister</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2009-11-24-fr-websites-that-should-not-exist.html"
    />
    <id>tag:blog.separateconcerns.com,2009-11-24:fr-websites-that-should-not-exist</id>
    <published>2009-11-24T12:00:00Z</published>
    <updated>2009-11-24T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Regarder le <a href="http://www.alexa.com/topsites">top 10 d&#8217;Alexa</a> peut faire peur quand on connait un peu ce qu&#8217;est Internet. Ce classement par trafic est assez représentatif de l&#8217;évolution du web ces quelques années. On y trouve évidemment beaucoup de moteurs de recherche : google.com (1er), yahoo.com (3e), live.com (5e), baidu.com (8e) et yahoo.jp (10e). msn.com, le portail de Microsoft, arrive en 9e position, pourquoi pas. Le problème, c&#8217;est les quatre autres. Prenons-les dans le désordre.</p>
<section id="YouTube-4e-et-Blogger-7e">
<h2>YouTube (4e) et Blogger (7e)</h2>
<p>Deux services de Google, bizarrement. Tous deux vous permettent d&#8217;héberger du contenu, vidéo pour YouTube et principalement textuel pour Blogger. Ce contenu pourra ensuite être commenté par d&#8217;autres utilisateurs, c&#8217;est ce qu&#8217;on appelle Web 2.0. Qu&#8217;y a-t-il de mal à cela ? Pas grand-chose, en fait, si ce n&#8217;est la situation de quasi-monopole de ces plates-formes.</p>
<p>En offrant un service simple et gratuit, Google [1] s&#8217;est imposé sur ces secteurs. Or, même si Google n&#8217;est <a href="http://investor.google.com/conduct.html">pas maléfique</a>, il est bon de se rappeler que c&#8217;est une entreprise dont le <strong>business model</strong> repose sur deux choses : vous vendre de la publicité et apprendre des choses sur vous. Vous lui donnez une occasion en or de faire la deuxième en vous créant un compte personnel chez eux et en y hébergeant vos données, quant à la première il n&#8217;y a qu&#8217;à voir le principal changement sur YouTube pour l&#8217;utilisateur depuis le rachat [2].</p>
<p>Autre problème commun à tous les services gratuits gérés par de grosses boites : vous ne valez pas grand-chose pour eux, et ils ne feront rien pour vous aider, par exemple, à éviter la censure. Il suffit de voir le nombre de vidéos supprimées de YouTube sans raison valable, sur simple demande de gens qui ne sont souvent pas les ayant-droits. Certains se souviennent peut-être de la vidéo où Mme Albanel prouvait son incompétence en annonçant qu&#8217;OpenOffice incluait un pare-feu. Cette vidéo a été censurée à de multiples reprises bien qu&#8217;elle ait été filmée de manière officielle à l&#8217;Assemblée Nationale.</p>
<p>Ceci dit, ces problèmes sont mineurs, il suffit d&#8217;en être informé, et ces services ont une raison d&#8217;être sur Internet. Pour les deux qui suivent, c&#8217;est une autre histoire.</p>
<p>[1] OK, pour Youtube c&#8217;était déjà le cas avant que Google achète&#8230;</p>
<p>[2] Pour ceux qui ne l&#8217;utilisent pas, je parle de publicités sous forme de bandeaux qui s&#8217;affichent en superposition sur la vidéo.</p>
</section>
<section id="Wikipedia-6e">
<h2>Wikipedia (6e)</h2>
<p>Wikipedia, l&#8217;un des plus gros succès du libre. Une source d&#8217;information à laquelle chacun peut contribuer s&#8217;il a les compétences nécessaires, accessible instantanément de tout point du monde. Une merveille !</p>
<p>Attendez, ça ne vous fait pas penser à quelque chose ça ? Ah si, le Web&#8230; Sauf que Wikipedia a un modèle centralisé alors que le Web est distribué. Sauf que sur Wikipedia ce sont les modérateurs qui détiennent le pouvoir de décider si une information est valable ou non, alors que sur le Web c&#8217;est à chacun de se faire son idée, même si l&#8217;opinion dominante se trouvera en premier dans les moteurs de recherche. Sauf que sur Wikipedia tout devra s&#8217;appuyer sur des sources &#8220;fiables&#8221;, comme par exemple des publications scientifiques (hum). Bref, Wikipedia, une formidable machine à imposer une pensée unique à des utilisateurs qui ne demandent pas mieux.</p>
<blockquote>
<p>EDIT - Pour ceux qui ne s&#8217;en seraient pas rendu compte, j&#8217;exagère volontairement. Ne prenez pas tout pour argent comptant non plus, la diversité d&#8217;opinion existe bien sur Wikipedia dans une certaine mesure.</p>
</blockquote>
</section>
<section id="Facebook-2e">
<h2>Facebook (2e)</h2>
<p>J&#8217;ai gardé le meilleur pour la fin. Juste derrière le roi des moteurs de recherche, le sultan des réseaux sociaux. Facebook, la toile dans la toile, mais une toile encore une fois centralisée et où on ne communique qu&#8217;avec ses &#8220;amis&#8221;. Pratique, je peux dire des bêtises comme ça, personne ne le verra. Et si jamais un jour je ne les assume plus, j&#8217;efface.</p>
<p>Mouais. Vous faites vraiment une confiance absolue à tous vos contacts, vous ? Si c&#8217;est le cas, bravo. Sinon, une fois que vous aurez réalisé que tout ce que vous mettez sur Facebook est du numérique, donc de l&#8217;information copiable, vous vous rendrez compte que, quels que soient les réglages de votre compte, il vaudrait mieux considérer que tout ce que vous y postez est public.</p>
<p>Et puis même au-delà de ça, comment comprendre qu&#8217;un tel principe ait du succès ? Parce qu&#8217;après tout, soit vous n&#8217;ajoutez pas de contenu et vous ne faites que poster des liens vers des choses que vous avez trouvées en surfant sur le Web ou partager ceux des autres, et ça ressemble fortement aux chaînes d&#8217;emails que personne ou presque n&#8217;aime, soit vous mettez des choses nouvelles en ligne et c&#8217;est souvent égoïste parce que vous réservez (théoriquement) à vos pseudo-amis l&#8217;accès à de l&#8217;information qui n&#8217;est en général pas si privée que ça et qui aurait peut-être pu servir ou faire plaisir à d&#8217;autres. Regardez un peu en arrière, même les kikoolols de la génération Caramail préféraient en général les forums publics aux forums privés.</p>
</section>
<section id="Le-cœur-du-problème">
<h2>Le cœur du problème</h2>
<p>Oui, parce qu&#8217;il faut bien le dire, il y a un problème. Et ce n&#8217;est pas que ces trucs-là existent, ils en ont le droit, c&#8217;est même un des fondements d&#8217;Internet : n&#8217;importe quel service a sa chance.</p>
<p>Non, le problème, c&#8217;est que bien que je voie tous leurs défauts gros comme des maisons, je les utilise ! J&#8217;ai un compte YouTube, un compte Facebook et ça m&#8217;arrive régulièrement de consulter des pages Wikipedia. Seule exception : ces quelques pages ne sont pas chez Google mais bien sur mon VPS, sous mon nom de domaine. Ouf.</p>
<p>La raison pour laquelle je les utilise, c&#8217;est que bien que conceptuellement et idéologiquement ils soient percés de partout, techniquement, ils vont de pas trop mauvais (Facebook, Wikipedia) à très bons (tout ce que fait Google). C&#8217;est un peu la différence avec Windows ou Internet Explorer, vous voyez : le fait qu&#8217;ils sont techniquement mauvais fait que leurs alternatives sont crédibles, pas vraiment la question éthique qui est derrière.</p>
</section>
<section id="Conclusion">
<h2>Conclusion</h2>
<p>Conclusion ? Rien. Que voulez-vous que je dise de plus ? Voir que ces sites-là sont parmi les plus visités du monde me rend un peu triste mais ce n&#8217;est pas pour autant que je vais arrêter de les utiliser. Pas tout de suite en tout cas.</p>
<p>Peut-être qu&#8217;un jour j&#8217;aurai le temps de mettre en place un système simple pour héberger mes vidéos sur mon serveur. Peut-être que je me lasserai de Facebook (les gens que dont je voudrais avoir des nouvelles n&#8217;y postent plus trop de toute façon) et que je fermerai mon compte. Peut-être qu&#8217;on reverra des annuaires collaboratifs de liens vers des pages qui donnent des avis variés sur divers sujets, avec une structure d&#8217;arbre ou de graphe par thématique et un hébergement décentralisé, de la réplication spontanée, du Web quoi&#8230; Houlà, je m&#8217;envole ;)</p>
<p>En attendant le miracle, je profite de la qualité de ces services, comme tout le monde. Je ne suis pas assez fanatique pour les boycotter. J&#8217;essaie juste de me rappeler de temps en temps qu&#8217;on est bien loin de l&#8217;utopie du Web de 90.</p>
<p>La prochaine fois, je parlerai peut-être de Chrome OS, un sujet pas si éloigné finalement.</p>
</section>

      </div>
    </content>
  </entry>
  <entry>
    <title>(French) Le piège de la génération Y</title>
    <link
      rel="alternate" type="text/html"
      href="https://blog.separateconcerns.com/2009-11-16-fr-gen-y.html"
    />
    <id>tag:blog.separateconcerns.com,2009-11-16:fr-gen-y</id>
    <published>2009-11-16T12:00:00Z</published>
    <updated>2009-11-16T12:00:00Z</updated>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <p>Hier soir, j&#8217;ai joué à <a href="http://www.bigbluecup.com/yabb/index.php?topic=39327.0">Featherweight</a>, un bon petit jeu d&#8217;aventure indépendant qui se finit en quelques minutes. J&#8217;ai beaucoup apprécié, et ça m&#8217;a fait réaliser que ça faisait longtemps que je n&#8217;avais pas fait quelque chose du genre. La raison ? Je suis atteint d&#8217;un syndrome qui touche beaucoup de gens de ma génération : je passe la plupart de mon temps libre à faire des choses inintéressantes sur mon PC. Du coup, je ne fais plus un certain nombre de choses que je faisais avant et qui me plaisaient beaucoup, comme jouer à des jeux vidéos ou coder pour moi, et ça me manque. C&#8217;est grave docteur, ça se soigne ? À mon avis oui, mais il va falloir reprendre les choses en main et supprimer un certain nombre de distractions.</p>
<p>Heureusement, le principal danger est évité : je gère à peu près bien ma messagerie instantanée. Je n&#8217;ai jamais utilisé de réseau type MSN, et je vais beaucoup moins sur IRC depuis que <a href="http://phraktured.net/becoming-a-morning-person.html#comment-6120694">phrakture me l&#8217;a conseillé</a>. J&#8217;ai ajouté un peu trop de contacts dans Skype à mon goût, mais ça reste gérable. Je me suis aussi désinscrit de la plupart des mailing-lists de Télécom qui me prenaient pas mal de temps à lire, et j&#8217;ai délaissé identi.ca (un twitter-like libre). Par contre, je fais un paquet de choses inutiles par habitude, que je vais arrêter immédiatement.</p>
<p>D&#8217;abord, lire les nouveaux messages sur le forum anglophone d&#8217;Arch Linux. Il y en a beaucoup trop maintenant, plusieurs centaines par jour, ça n&#8217;est plus gérable. Je continuerai à lire ceux du forum francophone de temps en temps pour l&#8217;instant.</p>
<p>Ensuite, jouer à des jeux en ligne, du genre de ceux publiés par <a href="http://www.motion-twin.com/">Motion Twin</a>. Jouer à des jeux vidéos n&#8217;est pas forcément mauvais, c&#8217;est jouer à des jeux sans fin le problème (MMORPG, jeux Flash, etc). Je vais faire une exception de <a href="http://www.shinobi.fr/">Shinobi</a> pour l&#8217;instant parce que je m&#8217;y suis pas mal impliqué et qu&#8217;il ne me prend pas beaucoup de temps.</p>
<p>Enfin, j&#8217;arrêterai de suivre <a href="http://www.tuxmachines.org/">Tuxmachines</a> ainsi que les liens lorsque je lis un article ou, pire, les suggestions de Youtube quand je regarde une vidéo.</p>
<p>J&#8217;évaluerai l&#8217;efficacité de ces mesures dans environ deux semaines. Si ça ne suffit pas, j&#8217;en prendrai d&#8217;autres.</p>
<p>Je commencerai par supprimer de mes contacts Facebook tous les gens qui ne sont pas des amis proches, surtout ceux qui spamment avec des quiz débiles (SVP, stop).</p>
<p>Je supprimerai des RSS de mon lecteur de news. Certes, le RSS, c&#8217;est du push, donc bon pour la productivité, mais trop de webcomic tue le webcomic, et pareil pour l&#8217;actualité technologique.</p>
<p>J&#8217;arrêterai Shinobi, le forum archlinux.fr et je me désinscrirai de presque toutes les mailing-lists auxquelles je suis abonné.</p>
<p>C&#8217;est un peu violent, certes, mais je pense que j&#8217;y gagnerai beaucoup. Et si jamais tout ça ne suffit pas, j&#8217;ai bien encore des idées comme utiliser un navigateur, un client mail et un lecteur de flux RSS en mode texte seulement, mais j&#8217;espère bien ne pas en arriver à de telles extrémités, pourtant courantes chez les gens adeptes du worse is better. Je n&#8217;irai quand même pas jusqu&#8217;à faire comme Knuth, qui <a href="http://www-cs-faculty.stanford.edu/%7Euno/email.html">n&#8217;utilise pas l&#8217;email</a>&#8230;</p>
<p>J&#8217;espère en tout cas que tout ça me permettra de gagner en productivité et en temps libre pour faire des choses utiles et/ou qui me plaisent plus.</p>

      </div>
    </content>
  </entry>
</feed>
